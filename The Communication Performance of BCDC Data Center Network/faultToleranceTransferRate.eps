%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: faultToleranceTransferRate.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2019/12/2, 16:59:14
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-12-02T12:09:06+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
gsave
0 345.6 mo
461 345.6 li
461 -.399999 li
0 -.399999 li
0 345.6 li
clp
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.584 mo
414.72 307.584 li
414.72 41.472 li
57.6 41.472 li
57.6 307.584 li
f
91.8691 307.584 mo
73.8327 307.584 li
73.8327 72.5901 li
91.8691 72.5901 li
91.8691 307.584 li
/1 
[/DeviceCMYK] /CSA add_res
0 .638514 .385901 0 cmyk
f
182.051 307.584 mo
164.014 307.584 li
164.014 90.2612 li
182.051 90.2612 li
182.051 307.584 li
f
272.233 307.584 mo
254.196 307.584 li
254.196 54.144 li
272.233 54.144 li
272.233 307.584 li
f
362.415 307.584 mo
344.378 307.584 li
344.378 95.6864 li
362.415 95.6864 li
362.415 307.584 li
f
109.905 307.584 mo
91.8691 307.584 li
91.8691 79.7205 li
109.905 79.7205 li
109.905 307.584 li
.578576 .527581 0 0 cmyk
f
200.087 307.584 mo
182.051 307.584 li
182.051 95.0664 li
200.087 95.0664 li
200.087 307.584 li
f
290.269 307.584 mo
272.233 307.584 li
272.233 77.5504 li
290.269 77.5504 li
290.269 307.584 li
f
380.451 307.584 mo
362.415 307.584 li
362.415 141.414 li
380.451 141.414 li
380.451 307.584 li
f
127.942 307.584 mo
109.905 307.584 li
127.942 307.584 li
.532036 .0339361 .660609 0 cmyk
f
218.124 307.584 mo
200.087 307.584 li
200.087 131.494 li
218.124 131.494 li
218.124 307.584 li
f
308.305 307.584 mo
290.269 307.584 li
290.269 116.458 li
308.305 116.458 li
308.305 307.584 li
f
398.487 307.584 mo
380.451 307.584 li
380.451 151.8 li
398.487 151.8 li
398.487 307.584 li
f
91.8691 307.584 mo
91.8691 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.8691 307.584 mo
91.8691 311.084 li
@
62.9632 316.868 mo
62.9632 317.718 li
62.7032 317.598 62.4432 317.498 62.1732 317.428 cv
61.8932 317.368 61.6132 317.328 61.3232 317.328 cv
60.8732 317.328 60.5332 317.398 60.3132 317.538 cv
60.0932 317.678 59.9832 317.878 59.9832 318.148 cv
59.9832 318.358 60.0632 318.518 60.2232 318.638 cv
60.3832 318.758 60.7032 318.878 61.1832 318.978 cv
61.4932 319.048 li
62.1332 319.188 62.5832 319.388 62.8532 319.628 cv
63.1132 319.878 63.2532 320.228 63.2532 320.668 cv
63.2532 321.178 63.0532 321.578 62.6532 321.868 cv
62.2532 322.168 61.6932 322.308 60.9932 322.308 cv
60.6932 322.308 60.3932 322.278 60.0732 322.228 cv
59.7532 322.178 59.4232 322.098 59.0732 321.978 cv
59.0732 321.048 li
59.4032 321.228 59.7332 321.358 60.0532 321.438 cv
60.3732 321.528 60.6932 321.568 61.0132 321.568 cv
61.4332 321.568 61.7632 321.498 61.9932 321.358 cv
62.2132 321.218 62.3332 321.008 62.3332 320.738 cv
62.3332 320.498 62.2432 320.308 62.0832 320.178 cv
61.9232 320.048 61.5632 319.918 61.0032 319.798 cv
60.6932 319.728 li
60.1332 319.608 59.7232 319.428 59.4832 319.188 cv
59.2332 318.948 59.1132 318.618 59.1132 318.188 cv
59.1132 317.678 59.2932 317.278 59.6532 316.998 cv
60.0132 316.718 60.5332 316.578 61.2132 316.578 cv
61.5432 316.578 61.8532 316.608 62.1532 316.658 cv
62.4432 316.708 62.7132 316.778 62.9632 316.868 cv
f
69.3631 319.218 mo
69.3631 319.658 li
65.2331 319.658 li
65.2731 320.278 65.4531 320.758 65.7931 321.078 cv
66.1231 321.398 66.5831 321.558 67.1831 321.558 cv
67.5231 321.558 67.8631 321.518 68.1831 321.438 cv
68.5031 321.358 68.8331 321.228 69.1531 321.048 cv
69.1531 321.898 li
68.8331 322.038 68.5031 322.148 68.1631 322.208 cv
67.8231 322.268 67.4731 322.308 67.1331 322.308 cv
66.2531 322.308 65.5631 322.058 65.0531 321.558 cv
64.5431 321.058 64.2931 320.368 64.2931 319.498 cv
64.2931 318.608 64.5331 317.898 65.0131 317.368 cv
65.4931 316.848 66.1531 316.578 66.9731 316.578 cv
67.7131 316.578 68.2931 316.818 68.7231 317.288 cv
69.1431 317.768 69.3631 318.408 69.3631 319.218 cv
68.4631 318.958 mo
68.4531 318.468 68.3131 318.078 68.0531 317.778 cv
67.7831 317.488 67.4231 317.338 66.9831 317.338 cv
66.4831 317.338 66.0831 317.488 65.7831 317.768 cv
65.4831 318.048 65.3031 318.448 65.2631 318.958 cv
68.4631 318.958 li
f
74.0032 317.548 mo
73.9032 317.488 73.7932 317.448 73.6732 317.418 cv
73.5532 317.398 73.4232 317.378 73.2832 317.378 cv
72.7732 317.378 72.3832 317.548 72.1132 317.878 cv
71.8332 318.208 71.7032 318.678 71.7032 319.298 cv
71.7032 322.178 li
70.8032 322.178 li
70.8032 316.708 li
71.7032 316.708 li
71.7032 317.558 li
71.8832 317.228 72.1332 316.978 72.4332 316.818 cv
72.7332 316.658 73.1032 316.578 73.5432 316.578 cv
73.7532 316.588 li
73.8232 316.598 73.9032 316.608 74.0032 316.628 cv
74.0032 317.548 li
f
74.3031 316.708 mo
75.2531 316.708 li
76.9631 321.298 li
78.6731 316.708 li
79.6231 316.708 li
77.5731 322.178 li
76.3531 322.178 li
74.3031 316.708 li
f
85.5431 319.218 mo
85.5431 319.658 li
81.4131 319.658 li
81.4531 320.278 81.6331 320.758 81.9731 321.078 cv
82.3031 321.398 82.7631 321.558 83.3631 321.558 cv
83.7031 321.558 84.0431 321.518 84.3631 321.438 cv
84.6831 321.358 85.0131 321.228 85.3331 321.048 cv
85.3331 321.898 li
85.0131 322.038 84.6831 322.148 84.3431 322.208 cv
84.0031 322.268 83.6531 322.308 83.3131 322.308 cv
82.4331 322.308 81.7431 322.058 81.2331 321.558 cv
80.7231 321.058 80.4731 320.368 80.4731 319.498 cv
80.4731 318.608 80.7131 317.898 81.1931 317.368 cv
81.6731 316.848 82.3331 316.578 83.1531 316.578 cv
83.8931 316.578 84.4731 316.818 84.9031 317.288 cv
85.3231 317.768 85.5431 318.408 85.5431 319.218 cv
84.6431 318.958 mo
84.6331 318.468 84.4931 318.078 84.2331 317.778 cv
83.9631 317.488 83.6031 317.338 83.1631 317.338 cv
82.6631 317.338 82.2631 317.488 81.9631 317.768 cv
81.6631 318.048 81.4831 318.448 81.4431 318.958 cv
84.6431 318.958 li
f
90.1831 317.548 mo
90.0831 317.488 89.9731 317.448 89.8531 317.418 cv
89.7331 317.398 89.6031 317.378 89.4631 317.378 cv
88.9531 317.378 88.5631 317.548 88.2931 317.878 cv
88.0131 318.208 87.8831 318.678 87.8831 319.298 cv
87.8831 322.178 li
86.9831 322.178 li
86.9831 316.708 li
87.8831 316.708 li
87.8831 317.558 li
88.0631 317.228 88.3131 316.978 88.6131 316.818 cv
88.9131 316.658 89.2831 316.578 89.7231 316.578 cv
89.9331 316.588 li
90.0031 316.598 90.0831 316.608 90.1831 316.628 cv
90.1831 317.548 li
f
97.073 314.578 mo
97.073 315.328 li
96.213 315.328 li
95.893 315.328 95.663 315.398 95.543 315.528 cv
95.413 315.658 95.353 315.888 95.353 316.228 cv
95.353 316.708 li
96.833 316.708 li
96.833 317.408 li
95.353 317.408 li
95.353 322.178 li
94.453 322.178 li
94.453 317.408 li
93.593 317.408 li
93.593 316.708 li
94.453 316.708 li
94.453 316.328 li
94.453 315.728 94.593 315.278 94.873 314.998 cv
95.153 314.718 95.603 314.578 96.223 314.578 cv
97.073 314.578 li
f
100.313 319.428 mo
99.5831 319.428 99.0831 319.518 98.8031 319.678 cv
98.5231 319.848 98.3831 320.128 98.3831 320.528 cv
98.3831 320.848 98.4831 321.108 98.6931 321.288 cv
98.9031 321.478 99.1931 321.568 99.5531 321.568 cv
100.053 321.568 100.453 321.398 100.753 321.038 cv
101.053 320.688 101.203 320.218 101.203 319.628 cv
101.203 319.428 li
100.313 319.428 li
102.103 319.058 mo
102.103 322.178 li
101.203 322.178 li
101.203 321.348 li
100.993 321.688 100.733 321.928 100.433 322.078 cv
100.133 322.228 99.7531 322.308 99.3131 322.308 cv
98.7531 322.308 98.3031 322.158 97.9731 321.848 cv
97.6431 321.538 97.4831 321.118 97.4831 320.588 cv
97.4831 319.978 97.6831 319.518 98.1031 319.198 cv
98.5131 318.888 99.1231 318.728 99.9431 318.728 cv
101.203 318.728 li
101.203 318.638 li
101.203 318.228 101.063 317.908 100.793 317.678 cv
100.523 317.458 100.143 317.338 99.6531 317.338 cv
99.3331 317.338 99.0331 317.378 98.7331 317.458 cv
98.4331 317.538 98.1531 317.648 97.8831 317.788 cv
97.8831 316.958 li
98.2031 316.838 98.5231 316.738 98.8331 316.678 cv
99.1431 316.618 99.4431 316.578 99.7431 316.578 cv
100.533 316.578 101.123 316.788 101.513 317.198 cv
101.903 317.608 102.103 318.228 102.103 319.058 cv
f
103.953 316.708 mo
104.853 316.708 li
104.853 322.178 li
103.953 322.178 li
103.953 316.708 li
103.953 314.578 mo
104.853 314.578 li
104.853 315.718 li
103.953 315.718 li
103.953 314.578 li
f
106.733 314.578 mo
107.633 314.578 li
107.633 322.178 li
106.733 322.178 li
106.733 314.578 li
f
109.423 320.018 mo
109.423 316.708 li
110.323 316.708 li
110.323 319.988 li
110.323 320.508 110.423 320.888 110.623 321.148 cv
110.823 321.408 111.123 321.538 111.533 321.538 cv
112.013 321.538 112.403 321.388 112.683 321.078 cv
112.963 320.768 113.103 320.348 113.103 319.808 cv
113.103 316.708 li
114.003 316.708 li
114.003 322.178 li
113.103 322.178 li
113.103 321.338 li
112.883 321.678 112.623 321.918 112.343 322.078 cv
112.053 322.228 111.723 322.308 111.343 322.308 cv
110.713 322.308 110.233 322.118 109.913 321.728 cv
109.583 321.348 109.423 320.778 109.423 320.018 cv
111.683 316.578 mo
111.683 316.578 li
f
119.023 317.548 mo
118.923 317.488 118.813 317.448 118.693 317.418 cv
118.573 317.398 118.443 317.378 118.303 317.378 cv
117.793 317.378 117.403 317.548 117.133 317.878 cv
116.853 318.208 116.723 318.678 116.723 319.298 cv
116.723 322.178 li
115.823 322.178 li
115.823 316.708 li
116.723 316.708 li
116.723 317.558 li
116.903 317.228 117.153 316.978 117.453 316.818 cv
117.753 316.658 118.123 316.578 118.563 316.578 cv
118.773 316.588 li
118.843 316.598 118.923 316.608 119.023 316.628 cv
119.023 317.548 li
f
124.643 319.218 mo
124.643 319.658 li
120.513 319.658 li
120.553 320.278 120.733 320.758 121.073 321.078 cv
121.403 321.398 121.863 321.558 122.463 321.558 cv
122.803 321.558 123.143 321.518 123.463 321.438 cv
123.783 321.358 124.113 321.228 124.433 321.048 cv
124.433 321.898 li
124.113 322.038 123.783 322.148 123.443 322.208 cv
123.103 322.268 122.753 322.308 122.413 322.308 cv
121.533 322.308 120.843 322.058 120.333 321.558 cv
119.823 321.058 119.573 320.368 119.573 319.498 cv
119.573 318.608 119.813 317.898 120.293 317.368 cv
120.773 316.848 121.433 316.578 122.253 316.578 cv
122.993 316.578 123.573 316.818 124.003 317.288 cv
124.423 317.768 124.643 318.408 124.643 319.218 cv
123.743 318.958 mo
123.733 318.468 123.593 318.078 123.333 317.778 cv
123.063 317.488 122.703 317.338 122.263 317.338 cv
121.763 317.338 121.363 317.488 121.063 317.768 cv
120.763 318.048 120.583 318.448 120.543 318.958 cv
123.743 318.958 li
f
182.051 307.584 mo
182.051 311.084 li
f
182.051 307.584 mo
182.051 311.084 li
@
153.004 316.868 mo
153.004 317.718 li
152.744 317.598 152.484 317.498 152.214 317.428 cv
151.934 317.368 151.654 317.328 151.364 317.328 cv
150.914 317.328 150.574 317.398 150.354 317.538 cv
150.134 317.678 150.024 317.878 150.024 318.148 cv
150.024 318.358 150.104 318.518 150.264 318.638 cv
150.424 318.758 150.744 318.878 151.224 318.978 cv
151.534 319.048 li
152.174 319.188 152.624 319.388 152.894 319.628 cv
153.154 319.878 153.294 320.228 153.294 320.668 cv
153.294 321.178 153.094 321.578 152.694 321.868 cv
152.294 322.168 151.734 322.308 151.034 322.308 cv
150.734 322.308 150.434 322.278 150.114 322.228 cv
149.794 322.178 149.464 322.098 149.114 321.978 cv
149.114 321.048 li
149.444 321.228 149.774 321.358 150.094 321.438 cv
150.414 321.528 150.734 321.568 151.054 321.568 cv
151.474 321.568 151.804 321.498 152.034 321.358 cv
152.254 321.218 152.374 321.008 152.374 320.738 cv
152.374 320.498 152.284 320.308 152.124 320.178 cv
151.964 320.048 151.604 319.918 151.044 319.798 cv
150.734 319.728 li
150.174 319.608 149.764 319.428 149.524 319.188 cv
149.274 318.948 149.154 318.618 149.154 318.188 cv
149.154 317.678 149.334 317.278 149.694 316.998 cv
150.054 316.718 150.574 316.578 151.254 316.578 cv
151.584 316.578 151.894 316.608 152.194 316.658 cv
152.484 316.708 152.754 316.778 153.004 316.868 cv
f
154.204 316.708 mo
155.104 316.708 li
156.224 320.978 li
157.344 316.708 li
158.404 316.708 li
159.524 320.978 li
160.644 316.708 li
161.544 316.708 li
160.114 322.178 li
159.054 322.178 li
157.874 317.698 li
156.694 322.178 li
155.634 322.178 li
154.204 316.708 li
f
162.904 316.708 mo
163.804 316.708 li
163.804 322.178 li
162.904 322.178 li
162.904 316.708 li
162.904 314.578 mo
163.804 314.578 li
163.804 315.718 li
162.904 315.718 li
162.904 314.578 li
f
166.574 315.158 mo
166.574 316.708 li
168.424 316.708 li
168.424 317.408 li
166.574 317.408 li
166.574 320.378 li
166.574 320.828 166.634 321.118 166.754 321.238 cv
166.874 321.368 167.124 321.428 167.504 321.428 cv
168.424 321.428 li
168.424 322.178 li
167.504 322.178 li
166.804 322.178 166.324 322.048 166.064 321.788 cv
165.804 321.528 165.674 321.058 165.674 320.378 cv
165.674 317.408 li
165.014 317.408 li
165.014 316.708 li
165.674 316.708 li
165.674 315.158 li
166.574 315.158 li
f
173.544 316.918 mo
173.544 317.758 li
173.284 317.618 173.034 317.518 172.774 317.448 cv
172.514 317.378 172.264 317.338 172.004 317.338 cv
171.424 317.338 170.964 317.528 170.644 317.898 cv
170.324 318.268 170.164 318.788 170.164 319.448 cv
170.164 320.118 170.324 320.638 170.644 321.008 cv
170.964 321.378 171.424 321.558 172.004 321.558 cv
172.264 321.558 172.514 321.528 172.774 321.458 cv
173.034 321.388 173.284 321.278 173.544 321.138 cv
173.544 321.968 li
173.284 322.088 173.024 322.178 172.764 322.228 cv
172.494 322.278 172.204 322.308 171.904 322.308 cv
171.084 322.308 170.424 322.058 169.944 321.538 cv
169.454 321.028 169.214 320.328 169.214 319.448 cv
169.214 318.558 169.454 317.858 169.944 317.348 cv
170.434 316.838 171.104 316.578 171.964 316.578 cv
172.244 316.578 172.514 316.608 172.774 316.668 cv
173.034 316.728 173.294 316.808 173.544 316.918 cv
f
179.654 318.878 mo
179.654 322.178 li
178.754 322.178 li
178.754 318.908 li
178.754 318.388 178.644 318.008 178.444 317.748 cv
178.244 317.488 177.944 317.358 177.544 317.358 cv
177.054 317.358 176.674 317.518 176.394 317.828 cv
176.114 318.138 175.974 318.558 175.974 319.088 cv
175.974 322.178 li
175.074 322.178 li
175.074 314.578 li
175.974 314.578 li
175.974 317.558 li
176.184 317.238 176.434 316.988 176.734 316.828 cv
177.024 316.668 177.364 316.578 177.744 316.578 cv
178.364 316.578 178.844 316.778 179.164 317.168 cv
179.484 317.558 179.654 318.128 179.654 318.878 cv
f
187.394 314.578 mo
187.394 315.328 li
186.534 315.328 li
186.214 315.328 185.984 315.398 185.864 315.528 cv
185.734 315.658 185.674 315.888 185.674 316.228 cv
185.674 316.708 li
187.154 316.708 li
187.154 317.408 li
185.674 317.408 li
185.674 322.178 li
184.774 322.178 li
184.774 317.408 li
183.914 317.408 li
183.914 316.708 li
184.774 316.708 li
184.774 316.328 li
184.774 315.728 184.914 315.278 185.194 314.998 cv
185.474 314.718 185.924 314.578 186.544 314.578 cv
187.394 314.578 li
f
190.634 319.428 mo
189.904 319.428 189.404 319.518 189.124 319.678 cv
188.844 319.848 188.704 320.128 188.704 320.528 cv
188.704 320.848 188.804 321.108 189.014 321.288 cv
189.224 321.478 189.514 321.568 189.874 321.568 cv
190.374 321.568 190.774 321.398 191.074 321.038 cv
191.374 320.688 191.524 320.218 191.524 319.628 cv
191.524 319.428 li
190.634 319.428 li
192.424 319.058 mo
192.424 322.178 li
191.524 322.178 li
191.524 321.348 li
191.314 321.688 191.054 321.928 190.754 322.078 cv
190.454 322.228 190.074 322.308 189.634 322.308 cv
189.074 322.308 188.624 322.158 188.294 321.848 cv
187.964 321.538 187.804 321.118 187.804 320.588 cv
187.804 319.978 188.004 319.518 188.424 319.198 cv
188.834 318.888 189.444 318.728 190.264 318.728 cv
191.524 318.728 li
191.524 318.638 li
191.524 318.228 191.384 317.908 191.114 317.678 cv
190.844 317.458 190.464 317.338 189.974 317.338 cv
189.654 317.338 189.354 317.378 189.054 317.458 cv
188.754 317.538 188.474 317.648 188.204 317.788 cv
188.204 316.958 li
188.524 316.838 188.844 316.738 189.154 316.678 cv
189.464 316.618 189.764 316.578 190.064 316.578 cv
190.854 316.578 191.444 316.788 191.834 317.198 cv
192.224 317.608 192.424 318.228 192.424 319.058 cv
f
194.274 316.708 mo
195.174 316.708 li
195.174 322.178 li
194.274 322.178 li
194.274 316.708 li
194.274 314.578 mo
195.174 314.578 li
195.174 315.718 li
194.274 315.718 li
194.274 314.578 li
f
197.054 314.578 mo
197.954 314.578 li
197.954 322.178 li
197.054 322.178 li
197.054 314.578 li
f
199.744 320.018 mo
199.744 316.708 li
200.644 316.708 li
200.644 319.988 li
200.644 320.508 200.744 320.888 200.944 321.148 cv
201.144 321.408 201.444 321.538 201.854 321.538 cv
202.334 321.538 202.724 321.388 203.004 321.078 cv
203.284 320.768 203.424 320.348 203.424 319.808 cv
203.424 316.708 li
204.324 316.708 li
204.324 322.178 li
203.424 322.178 li
203.424 321.338 li
203.204 321.678 202.944 321.918 202.664 322.078 cv
202.374 322.228 202.044 322.308 201.664 322.308 cv
201.034 322.308 200.554 322.118 200.234 321.728 cv
199.904 321.348 199.744 320.778 199.744 320.018 cv
202.004 316.578 mo
202.004 316.578 li
f
209.344 317.548 mo
209.244 317.488 209.134 317.448 209.014 317.418 cv
208.894 317.398 208.764 317.378 208.624 317.378 cv
208.114 317.378 207.724 317.548 207.454 317.878 cv
207.174 318.208 207.044 318.678 207.044 319.298 cv
207.044 322.178 li
206.144 322.178 li
206.144 316.708 li
207.044 316.708 li
207.044 317.558 li
207.224 317.228 207.474 316.978 207.774 316.818 cv
208.074 316.658 208.444 316.578 208.884 316.578 cv
209.094 316.588 li
209.164 316.598 209.244 316.608 209.344 316.628 cv
209.344 317.548 li
f
214.964 319.218 mo
214.964 319.658 li
210.834 319.658 li
210.874 320.278 211.054 320.758 211.394 321.078 cv
211.724 321.398 212.184 321.558 212.784 321.558 cv
213.124 321.558 213.464 321.518 213.784 321.438 cv
214.104 321.358 214.434 321.228 214.754 321.048 cv
214.754 321.898 li
214.434 322.038 214.104 322.148 213.764 322.208 cv
213.424 322.268 213.074 322.308 212.734 322.308 cv
211.854 322.308 211.164 322.058 210.654 321.558 cv
210.144 321.058 209.894 320.368 209.894 319.498 cv
209.894 318.608 210.134 317.898 210.614 317.368 cv
211.094 316.848 211.754 316.578 212.574 316.578 cv
213.314 316.578 213.894 316.818 214.324 317.288 cv
214.744 317.768 214.964 318.408 214.964 319.218 cv
214.064 318.958 mo
214.054 318.468 213.914 318.078 213.654 317.778 cv
213.384 317.488 213.024 317.338 212.584 317.338 cv
212.084 317.338 211.684 317.488 211.384 317.768 cv
211.084 318.048 210.904 318.448 210.864 318.958 cv
214.064 318.958 li
f
272.233 307.584 mo
272.233 311.084 li
f
272.233 307.584 mo
272.233 311.084 li
@
246.821 314.578 mo
247.721 314.578 li
247.721 322.178 li
246.821 322.178 li
246.821 314.578 li
f
249.601 316.708 mo
250.501 316.708 li
250.501 322.178 li
249.601 322.178 li
249.601 316.708 li
249.601 314.578 mo
250.501 314.578 li
250.501 315.718 li
249.601 315.718 li
249.601 314.578 li
f
256.931 318.878 mo
256.931 322.178 li
256.031 322.178 li
256.031 318.908 li
256.031 318.388 255.921 318.008 255.721 317.748 cv
255.521 317.488 255.221 317.358 254.821 317.358 cv
254.331 317.358 253.951 317.518 253.671 317.828 cv
253.391 318.138 253.251 318.558 253.251 319.088 cv
253.251 322.178 li
252.351 322.178 li
252.351 316.708 li
253.251 316.708 li
253.251 317.558 li
253.461 317.238 253.711 316.988 254.011 316.828 cv
254.301 316.668 254.641 316.578 255.021 316.578 cv
255.641 316.578 256.121 316.778 256.441 317.168 cv
256.761 317.558 256.931 318.128 256.931 318.878 cv
f
258.691 314.578 mo
259.591 314.578 li
259.591 319.068 li
262.271 316.708 li
263.421 316.708 li
260.521 319.268 li
263.541 322.178 li
262.371 322.178 li
259.591 319.508 li
259.591 322.178 li
258.691 322.178 li
258.691 314.578 li
f
270.461 314.578 mo
270.461 315.328 li
269.601 315.328 li
269.281 315.328 269.051 315.398 268.931 315.528 cv
268.801 315.658 268.741 315.888 268.741 316.228 cv
268.741 316.708 li
270.221 316.708 li
270.221 317.408 li
268.741 317.408 li
268.741 322.178 li
267.841 322.178 li
267.841 317.408 li
266.981 317.408 li
266.981 316.708 li
267.841 316.708 li
267.841 316.328 li
267.841 315.728 267.981 315.278 268.261 314.998 cv
268.541 314.718 268.991 314.578 269.611 314.578 cv
270.461 314.578 li
f
273.701 319.428 mo
272.971 319.428 272.471 319.518 272.191 319.678 cv
271.911 319.848 271.771 320.128 271.771 320.528 cv
271.771 320.848 271.871 321.108 272.081 321.288 cv
272.291 321.478 272.581 321.568 272.941 321.568 cv
273.441 321.568 273.841 321.398 274.141 321.038 cv
274.441 320.688 274.591 320.218 274.591 319.628 cv
274.591 319.428 li
273.701 319.428 li
275.491 319.058 mo
275.491 322.178 li
274.591 322.178 li
274.591 321.348 li
274.381 321.688 274.121 321.928 273.821 322.078 cv
273.521 322.228 273.141 322.308 272.701 322.308 cv
272.141 322.308 271.691 322.158 271.361 321.848 cv
271.031 321.538 270.871 321.118 270.871 320.588 cv
270.871 319.978 271.071 319.518 271.491 319.198 cv
271.901 318.888 272.511 318.728 273.331 318.728 cv
274.591 318.728 li
274.591 318.638 li
274.591 318.228 274.451 317.908 274.181 317.678 cv
273.911 317.458 273.531 317.338 273.041 317.338 cv
272.721 317.338 272.421 317.378 272.121 317.458 cv
271.821 317.538 271.541 317.648 271.271 317.788 cv
271.271 316.958 li
271.591 316.838 271.911 316.738 272.221 316.678 cv
272.531 316.618 272.831 316.578 273.131 316.578 cv
273.921 316.578 274.511 316.788 274.901 317.198 cv
275.291 317.608 275.491 318.228 275.491 319.058 cv
f
277.341 316.708 mo
278.241 316.708 li
278.241 322.178 li
277.341 322.178 li
277.341 316.708 li
277.341 314.578 mo
278.241 314.578 li
278.241 315.718 li
277.341 315.718 li
277.341 314.578 li
f
280.121 314.578 mo
281.021 314.578 li
281.021 322.178 li
280.121 322.178 li
280.121 314.578 li
f
282.811 320.018 mo
282.811 316.708 li
283.711 316.708 li
283.711 319.988 li
283.711 320.508 283.811 320.888 284.011 321.148 cv
284.211 321.408 284.511 321.538 284.921 321.538 cv
285.401 321.538 285.791 321.388 286.071 321.078 cv
286.351 320.768 286.491 320.348 286.491 319.808 cv
286.491 316.708 li
287.391 316.708 li
287.391 322.178 li
286.491 322.178 li
286.491 321.338 li
286.271 321.678 286.011 321.918 285.731 322.078 cv
285.441 322.228 285.111 322.308 284.731 322.308 cv
284.101 322.308 283.621 322.118 283.301 321.728 cv
282.971 321.348 282.811 320.778 282.811 320.018 cv
285.071 316.578 mo
285.071 316.578 li
f
292.411 317.548 mo
292.311 317.488 292.201 317.448 292.081 317.418 cv
291.961 317.398 291.831 317.378 291.691 317.378 cv
291.181 317.378 290.791 317.548 290.521 317.878 cv
290.241 318.208 290.111 318.678 290.111 319.298 cv
290.111 322.178 li
289.211 322.178 li
289.211 316.708 li
290.111 316.708 li
290.111 317.558 li
290.291 317.228 290.541 316.978 290.841 316.818 cv
291.141 316.658 291.511 316.578 291.951 316.578 cv
292.161 316.588 li
292.231 316.598 292.311 316.608 292.411 316.628 cv
292.411 317.548 li
f
298.031 319.218 mo
298.031 319.658 li
293.901 319.658 li
293.941 320.278 294.121 320.758 294.461 321.078 cv
294.791 321.398 295.251 321.558 295.851 321.558 cv
296.191 321.558 296.531 321.518 296.851 321.438 cv
297.171 321.358 297.501 321.228 297.821 321.048 cv
297.821 321.898 li
297.501 322.038 297.171 322.148 296.831 322.208 cv
296.491 322.268 296.141 322.308 295.801 322.308 cv
294.921 322.308 294.231 322.058 293.721 321.558 cv
293.211 321.058 292.961 320.368 292.961 319.498 cv
292.961 318.608 293.201 317.898 293.681 317.368 cv
294.161 316.848 294.821 316.578 295.641 316.578 cv
296.381 316.578 296.961 316.818 297.391 317.288 cv
297.811 317.768 298.031 318.408 298.031 319.218 cv
297.131 318.958 mo
297.121 318.468 296.981 318.078 296.721 317.778 cv
296.451 317.488 296.091 317.338 295.651 317.338 cv
295.151 317.338 294.751 317.488 294.451 317.768 cv
294.151 318.048 293.971 318.448 293.931 318.958 cv
297.131 318.958 li
f
362.415 307.584 mo
362.415 311.084 li
f
362.415 307.584 mo
362.415 311.084 li
@
334.483 318.878 mo
334.483 322.178 li
333.583 322.178 li
333.583 318.908 li
333.583 318.388 333.473 318.008 333.273 317.748 cv
333.073 317.488 332.773 317.358 332.373 317.358 cv
331.883 317.358 331.503 317.518 331.223 317.828 cv
330.943 318.138 330.803 318.558 330.803 319.088 cv
330.803 322.178 li
329.903 322.178 li
329.903 314.578 li
330.803 314.578 li
330.803 317.558 li
331.013 317.238 331.263 316.988 331.563 316.828 cv
331.853 316.668 332.193 316.578 332.573 316.578 cv
333.193 316.578 333.673 316.778 333.993 317.168 cv
334.313 317.558 334.483 318.128 334.483 318.878 cv
f
338.553 322.678 mo
338.293 323.318 338.043 323.748 337.803 323.948 cv
337.563 324.148 337.243 324.248 336.843 324.248 cv
336.123 324.248 li
336.123 323.498 li
336.653 323.498 li
336.893 323.498 337.083 323.438 337.223 323.318 cv
337.363 323.198 337.513 322.928 337.683 322.488 cv
337.843 322.088 li
335.633 316.708 li
336.583 316.708 li
338.293 320.988 li
340.003 316.708 li
340.953 316.708 li
338.553 322.678 li
f
346.123 319.448 mo
346.123 318.788 345.983 318.278 345.713 317.898 cv
345.433 317.518 345.063 317.328 344.593 317.328 cv
344.113 317.328 343.743 317.518 343.473 317.898 cv
343.193 318.278 343.063 318.788 343.063 319.448 cv
343.063 320.108 343.193 320.628 343.473 321.008 cv
343.743 321.388 344.113 321.568 344.593 321.568 cv
345.063 321.568 345.433 321.388 345.713 321.008 cv
345.983 320.628 346.123 320.108 346.123 319.448 cv
343.063 317.538 mo
343.243 317.218 343.483 316.978 343.773 316.818 cv
344.063 316.658 344.413 316.578 344.813 316.578 cv
345.473 316.578 346.013 316.848 346.433 317.368 cv
346.843 317.898 347.053 318.588 347.053 319.448 cv
347.053 320.308 346.843 321.008 346.433 321.528 cv
346.013 322.048 345.473 322.308 344.813 322.308 cv
344.413 322.308 344.063 322.228 343.773 322.078 cv
343.483 321.928 343.243 321.688 343.063 321.358 cv
343.063 322.178 li
342.163 322.178 li
342.163 314.578 li
343.063 314.578 li
343.063 317.538 li
f
351.713 317.548 mo
351.613 317.488 351.503 317.448 351.383 317.418 cv
351.263 317.398 351.133 317.378 350.993 317.378 cv
350.483 317.378 350.093 317.548 349.823 317.878 cv
349.543 318.208 349.413 318.678 349.413 319.298 cv
349.413 322.178 li
348.513 322.178 li
348.513 316.708 li
349.413 316.708 li
349.413 317.558 li
349.593 317.228 349.843 316.978 350.143 316.818 cv
350.443 316.658 350.813 316.578 351.253 316.578 cv
351.463 316.588 li
351.533 316.598 351.613 316.608 351.713 316.628 cv
351.713 317.548 li
f
352.653 316.708 mo
353.553 316.708 li
353.553 322.178 li
352.653 322.178 li
352.653 316.708 li
352.653 314.578 mo
353.553 314.578 li
353.553 315.718 li
352.653 315.718 li
352.653 314.578 li
f
359.033 317.538 mo
359.033 314.578 li
359.933 314.578 li
359.933 322.178 li
359.033 322.178 li
359.033 321.358 li
358.843 321.688 358.603 321.928 358.313 322.078 cv
358.023 322.228 357.683 322.308 357.283 322.308 cv
356.623 322.308 356.083 322.048 355.663 321.528 cv
355.243 321.008 355.043 320.308 355.043 319.448 cv
355.043 318.588 355.243 317.898 355.663 317.368 cv
356.083 316.848 356.623 316.578 357.283 316.578 cv
357.683 316.578 358.023 316.658 358.313 316.818 cv
358.603 316.978 358.843 317.218 359.033 317.538 cv
355.973 319.448 mo
355.973 320.108 356.103 320.628 356.373 321.008 cv
356.643 321.388 357.023 321.568 357.503 321.568 cv
357.973 321.568 358.343 321.388 358.623 321.008 cv
358.893 320.628 359.033 320.108 359.033 319.448 cv
359.033 318.788 358.893 318.278 358.623 317.898 cv
358.343 317.518 357.973 317.328 357.503 317.328 cv
357.023 317.328 356.643 317.518 356.373 317.898 cv
356.103 318.278 355.973 318.788 355.973 319.448 cv
f
367.732 314.578 mo
367.732 315.328 li
366.872 315.328 li
366.552 315.328 366.322 315.398 366.202 315.528 cv
366.072 315.658 366.012 315.888 366.012 316.228 cv
366.012 316.708 li
367.492 316.708 li
367.492 317.408 li
366.012 317.408 li
366.012 322.178 li
365.112 322.178 li
365.112 317.408 li
364.252 317.408 li
364.252 316.708 li
365.112 316.708 li
365.112 316.328 li
365.112 315.728 365.252 315.278 365.532 314.998 cv
365.812 314.718 366.262 314.578 366.882 314.578 cv
367.732 314.578 li
f
370.972 319.428 mo
370.242 319.428 369.742 319.518 369.462 319.678 cv
369.182 319.848 369.042 320.128 369.042 320.528 cv
369.042 320.848 369.142 321.108 369.352 321.288 cv
369.562 321.478 369.852 321.568 370.212 321.568 cv
370.712 321.568 371.112 321.398 371.412 321.038 cv
371.712 320.688 371.862 320.218 371.862 319.628 cv
371.862 319.428 li
370.972 319.428 li
372.762 319.058 mo
372.762 322.178 li
371.862 322.178 li
371.862 321.348 li
371.652 321.688 371.392 321.928 371.092 322.078 cv
370.792 322.228 370.412 322.308 369.972 322.308 cv
369.412 322.308 368.962 322.158 368.632 321.848 cv
368.302 321.538 368.142 321.118 368.142 320.588 cv
368.142 319.978 368.342 319.518 368.762 319.198 cv
369.172 318.888 369.782 318.728 370.602 318.728 cv
371.862 318.728 li
371.862 318.638 li
371.862 318.228 371.722 317.908 371.452 317.678 cv
371.182 317.458 370.802 317.338 370.312 317.338 cv
369.992 317.338 369.692 317.378 369.392 317.458 cv
369.092 317.538 368.812 317.648 368.542 317.788 cv
368.542 316.958 li
368.862 316.838 369.182 316.738 369.492 316.678 cv
369.802 316.618 370.102 316.578 370.402 316.578 cv
371.192 316.578 371.782 316.788 372.172 317.198 cv
372.562 317.608 372.762 318.228 372.762 319.058 cv
f
374.613 316.708 mo
375.513 316.708 li
375.513 322.178 li
374.613 322.178 li
374.613 316.708 li
374.613 314.578 mo
375.513 314.578 li
375.513 315.718 li
374.613 315.718 li
374.613 314.578 li
f
377.393 314.578 mo
378.293 314.578 li
378.293 322.178 li
377.393 322.178 li
377.393 314.578 li
f
380.083 320.018 mo
380.083 316.708 li
380.983 316.708 li
380.983 319.988 li
380.983 320.508 381.083 320.888 381.283 321.148 cv
381.483 321.408 381.783 321.538 382.193 321.538 cv
382.673 321.538 383.063 321.388 383.343 321.078 cv
383.623 320.768 383.763 320.348 383.763 319.808 cv
383.763 316.708 li
384.663 316.708 li
384.663 322.178 li
383.763 322.178 li
383.763 321.338 li
383.543 321.678 383.283 321.918 383.003 322.078 cv
382.713 322.228 382.383 322.308 382.003 322.308 cv
381.373 322.308 380.893 322.118 380.573 321.728 cv
380.243 321.348 380.083 320.778 380.083 320.018 cv
382.343 316.578 mo
382.343 316.578 li
f
389.683 317.548 mo
389.583 317.488 389.473 317.448 389.353 317.418 cv
389.233 317.398 389.103 317.378 388.963 317.378 cv
388.453 317.378 388.063 317.548 387.793 317.878 cv
387.513 318.208 387.383 318.678 387.383 319.298 cv
387.383 322.178 li
386.483 322.178 li
386.483 316.708 li
387.383 316.708 li
387.383 317.558 li
387.563 317.228 387.813 316.978 388.113 316.818 cv
388.413 316.658 388.783 316.578 389.223 316.578 cv
389.433 316.588 li
389.503 316.598 389.583 316.608 389.683 316.628 cv
389.683 317.548 li
f
395.303 319.218 mo
395.303 319.658 li
391.173 319.658 li
391.213 320.278 391.393 320.758 391.733 321.078 cv
392.063 321.398 392.523 321.558 393.123 321.558 cv
393.463 321.558 393.803 321.518 394.123 321.438 cv
394.443 321.358 394.773 321.228 395.093 321.048 cv
395.093 321.898 li
394.773 322.038 394.443 322.148 394.103 322.208 cv
393.763 322.268 393.413 322.308 393.073 322.308 cv
392.193 322.308 391.503 322.058 390.993 321.558 cv
390.483 321.058 390.233 320.368 390.233 319.498 cv
390.233 318.608 390.473 317.898 390.953 317.368 cv
391.433 316.848 392.093 316.578 392.913 316.578 cv
393.653 316.578 394.233 316.818 394.663 317.288 cv
395.083 317.768 395.303 318.408 395.303 319.218 cv
394.403 318.958 mo
394.393 318.468 394.253 318.078 393.993 317.778 cv
393.723 317.488 393.363 317.338 392.923 317.338 cv
392.423 317.338 392.023 317.488 391.723 317.768 cv
391.423 318.048 391.243 318.448 391.203 318.958 cv
394.403 318.958 li
f
181.874 328.56 mo
186.064 328.56 li
186.064 329.39 li
182.864 329.39 li
182.864 331.54 li
185.754 331.54 li
185.754 332.37 li
182.864 332.37 li
182.864 335.85 li
181.874 335.85 li
181.874 328.56 li
f
189.704 331.01 mo
189.224 331.01 188.844 331.2 188.564 331.58 cv
188.284 331.96 188.144 332.47 188.144 333.12 cv
188.144 333.78 188.274 334.29 188.554 334.67 cv
188.834 335.05 189.214 335.23 189.704 335.23 cv
190.184 335.23 190.564 335.05 190.844 334.67 cv
191.124 334.29 191.264 333.78 191.264 333.12 cv
191.264 332.48 191.124 331.96 190.844 331.58 cv
190.564 331.2 190.184 331.01 189.704 331.01 cv
189.704 330.25 mo
190.484 330.25 191.094 330.51 191.544 331.01 cv
191.984 331.52 192.214 332.22 192.214 333.12 cv
192.214 334.02 191.984 334.72 191.544 335.22 cv
191.094 335.73 190.484 335.98 189.704 335.98 cv
188.914 335.98 188.294 335.73 187.854 335.22 cv
187.414 334.72 187.194 334.02 187.194 333.12 cv
187.194 332.22 187.414 331.52 187.854 331.01 cv
188.294 330.51 188.914 330.25 189.704 330.25 cv
f
193.614 333.69 mo
193.614 330.38 li
194.514 330.38 li
194.514 333.66 li
194.514 334.18 194.614 334.56 194.814 334.82 cv
195.014 335.08 195.314 335.21 195.724 335.21 cv
196.204 335.21 196.594 335.06 196.874 334.75 cv
197.154 334.44 197.294 334.02 197.294 333.48 cv
197.294 330.38 li
198.194 330.38 li
198.194 335.85 li
197.294 335.85 li
197.294 335.01 li
197.074 335.35 196.814 335.59 196.534 335.75 cv
196.244 335.9 195.914 335.98 195.534 335.98 cv
194.904 335.98 194.424 335.79 194.104 335.4 cv
193.774 335.02 193.614 334.45 193.614 333.69 cv
195.874 330.25 mo
195.874 330.25 li
f
203.214 331.22 mo
203.114 331.16 203.004 331.12 202.884 331.09 cv
202.764 331.07 202.634 331.05 202.494 331.05 cv
201.984 331.05 201.594 331.22 201.324 331.55 cv
201.044 331.88 200.914 332.35 200.914 332.97 cv
200.914 335.85 li
200.014 335.85 li
200.014 330.38 li
200.914 330.38 li
200.914 331.23 li
201.094 330.9 201.344 330.65 201.644 330.49 cv
201.944 330.33 202.314 330.25 202.754 330.25 cv
202.964 330.26 li
203.034 330.27 203.114 330.28 203.214 330.3 cv
203.214 331.22 li
f
206.374 328.56 mo
212.534 328.56 li
212.534 329.39 li
209.944 329.39 li
209.944 335.85 li
208.954 335.85 li
208.954 329.39 li
206.374 329.39 li
206.374 328.56 li
f
215.724 336.35 mo
215.464 336.99 215.214 337.42 214.974 337.62 cv
214.734 337.82 214.414 337.92 214.014 337.92 cv
213.294 337.92 li
213.294 337.17 li
213.824 337.17 li
214.064 337.17 214.254 337.11 214.394 336.99 cv
214.534 336.87 214.684 336.6 214.854 336.16 cv
215.014 335.76 li
212.804 330.38 li
213.754 330.38 li
215.464 334.66 li
217.174 330.38 li
218.124 330.38 li
215.724 336.35 li
f
220.234 335.03 mo
220.234 337.92 li
219.334 337.92 li
219.334 330.38 li
220.234 330.38 li
220.234 331.21 li
220.414 330.89 220.654 330.65 220.944 330.49 cv
221.234 330.33 221.584 330.25 221.984 330.25 cv
222.644 330.25 223.184 330.52 223.604 331.04 cv
224.014 331.57 224.224 332.26 224.224 333.12 cv
224.224 333.98 224.014 334.68 223.604 335.2 cv
223.184 335.72 222.644 335.98 221.984 335.98 cv
221.584 335.98 221.234 335.9 220.944 335.75 cv
220.654 335.6 220.414 335.36 220.234 335.03 cv
223.294 333.12 mo
223.294 332.46 223.154 331.95 222.884 331.57 cv
222.604 331.19 222.234 331 221.764 331 cv
221.284 331 220.914 331.19 220.644 331.57 cv
220.364 331.95 220.234 332.46 220.234 333.12 cv
220.234 333.78 220.364 334.3 220.644 334.68 cv
220.914 335.06 221.284 335.24 221.764 335.24 cv
222.234 335.24 222.604 335.06 222.884 334.68 cv
223.154 334.3 223.294 333.78 223.294 333.12 cv
f
230.394 332.89 mo
230.394 333.33 li
226.264 333.33 li
226.304 333.95 226.484 334.43 226.824 334.75 cv
227.154 335.07 227.614 335.23 228.214 335.23 cv
228.554 335.23 228.894 335.19 229.214 335.11 cv
229.534 335.03 229.864 334.9 230.184 334.72 cv
230.184 335.57 li
229.864 335.71 229.534 335.82 229.194 335.88 cv
228.854 335.94 228.504 335.98 228.164 335.98 cv
227.284 335.98 226.594 335.73 226.084 335.23 cv
225.574 334.73 225.324 334.04 225.324 333.17 cv
225.324 332.28 225.564 331.57 226.044 331.04 cv
226.524 330.52 227.184 330.25 228.004 330.25 cv
228.744 330.25 229.324 330.49 229.754 330.96 cv
230.174 331.44 230.394 332.08 230.394 332.89 cv
229.494 332.63 mo
229.484 332.14 229.344 331.75 229.084 331.45 cv
228.814 331.16 228.454 331.01 228.014 331.01 cv
227.514 331.01 227.114 331.16 226.814 331.44 cv
226.514 331.72 226.334 332.12 226.294 332.63 cv
229.494 332.63 li
f
235.354 330.54 mo
235.354 331.39 li
235.094 331.27 234.834 331.17 234.564 331.1 cv
234.284 331.04 234.004 331 233.714 331 cv
233.264 331 232.924 331.07 232.704 331.21 cv
232.484 331.35 232.374 331.55 232.374 331.82 cv
232.374 332.03 232.454 332.19 232.614 332.31 cv
232.774 332.43 233.094 332.55 233.574 332.65 cv
233.884 332.72 li
234.524 332.86 234.974 333.06 235.244 333.3 cv
235.504 333.55 235.644 333.9 235.644 334.34 cv
235.644 334.85 235.444 335.25 235.044 335.54 cv
234.644 335.84 234.084 335.98 233.384 335.98 cv
233.084 335.98 232.784 335.95 232.464 335.9 cv
232.144 335.85 231.814 335.77 231.464 335.65 cv
231.464 334.72 li
231.794 334.9 232.124 335.03 232.444 335.11 cv
232.764 335.2 233.084 335.24 233.404 335.24 cv
233.824 335.24 234.154 335.17 234.384 335.03 cv
234.604 334.89 234.724 334.68 234.724 334.41 cv
234.724 334.17 234.634 333.98 234.474 333.85 cv
234.314 333.72 233.954 333.59 233.394 333.47 cv
233.084 333.4 li
232.524 333.28 232.114 333.1 231.874 332.86 cv
231.624 332.62 231.504 332.29 231.504 331.86 cv
231.504 331.35 231.684 330.95 232.044 330.67 cv
232.404 330.39 232.924 330.25 233.604 330.25 cv
233.934 330.25 234.244 330.28 234.544 330.33 cv
234.834 330.38 235.104 330.45 235.354 330.54 cv
f
242.374 331.01 mo
241.894 331.01 241.514 331.2 241.234 331.58 cv
240.954 331.96 240.814 332.47 240.814 333.12 cv
240.814 333.78 240.944 334.29 241.224 334.67 cv
241.504 335.05 241.884 335.23 242.374 335.23 cv
242.854 335.23 243.234 335.05 243.514 334.67 cv
243.794 334.29 243.934 333.78 243.934 333.12 cv
243.934 332.48 243.794 331.96 243.514 331.58 cv
243.234 331.2 242.854 331.01 242.374 331.01 cv
242.374 330.25 mo
243.154 330.25 243.764 330.51 244.214 331.01 cv
244.654 331.52 244.884 332.22 244.884 333.12 cv
244.884 334.02 244.654 334.72 244.214 335.22 cv
243.764 335.73 243.154 335.98 242.374 335.98 cv
241.584 335.98 240.964 335.73 240.524 335.22 cv
240.084 334.72 239.864 334.02 239.864 333.12 cv
239.864 332.22 240.084 331.52 240.524 331.01 cv
240.964 330.51 241.584 330.25 242.374 330.25 cv
f
249.144 328.25 mo
249.144 329 li
248.284 329 li
247.964 329 247.734 329.07 247.614 329.2 cv
247.484 329.33 247.424 329.56 247.424 329.9 cv
247.424 330.38 li
248.904 330.38 li
248.904 331.08 li
247.424 331.08 li
247.424 335.85 li
246.524 335.85 li
246.524 331.08 li
245.664 331.08 li
245.664 330.38 li
246.524 330.38 li
246.524 330 li
246.524 329.4 246.664 328.95 246.944 328.67 cv
247.224 328.39 247.674 328.25 248.294 328.25 cv
249.144 328.25 li
f
253.114 328.56 mo
257.304 328.56 li
257.304 329.39 li
254.104 329.39 li
254.104 331.54 li
256.994 331.54 li
256.994 332.37 li
254.104 332.37 li
254.104 335.85 li
253.114 335.85 li
253.114 328.56 li
f
261.314 333.1 mo
260.584 333.1 260.084 333.19 259.804 333.35 cv
259.524 333.52 259.384 333.8 259.384 334.2 cv
259.384 334.52 259.484 334.78 259.694 334.96 cv
259.904 335.15 260.194 335.24 260.554 335.24 cv
261.054 335.24 261.454 335.07 261.754 334.71 cv
262.054 334.36 262.204 333.89 262.204 333.3 cv
262.204 333.1 li
261.314 333.1 li
263.104 332.73 mo
263.104 335.85 li
262.204 335.85 li
262.204 335.02 li
261.994 335.36 261.734 335.6 261.434 335.75 cv
261.134 335.9 260.754 335.98 260.314 335.98 cv
259.754 335.98 259.304 335.83 258.974 335.52 cv
258.644 335.21 258.484 334.79 258.484 334.26 cv
258.484 333.65 258.684 333.19 259.104 332.87 cv
259.514 332.56 260.124 332.4 260.944 332.4 cv
262.204 332.4 li
262.204 332.31 li
262.204 331.9 262.064 331.58 261.794 331.35 cv
261.524 331.13 261.144 331.01 260.654 331.01 cv
260.334 331.01 260.034 331.05 259.734 331.13 cv
259.434 331.21 259.154 331.32 258.884 331.46 cv
258.884 330.63 li
259.204 330.51 259.524 330.41 259.834 330.35 cv
260.144 330.29 260.444 330.25 260.744 330.25 cv
261.534 330.25 262.124 330.46 262.514 330.87 cv
262.904 331.28 263.104 331.9 263.104 332.73 cv
f
264.954 330.38 mo
265.854 330.38 li
265.854 335.85 li
264.954 335.85 li
264.954 330.38 li
264.954 328.25 mo
265.854 328.25 li
265.854 329.39 li
264.954 329.39 li
264.954 328.25 li
f
267.734 328.25 mo
268.634 328.25 li
268.634 335.85 li
267.734 335.85 li
267.734 328.25 li
f
270.424 333.69 mo
270.424 330.38 li
271.324 330.38 li
271.324 333.66 li
271.324 334.18 271.424 334.56 271.624 334.82 cv
271.824 335.08 272.124 335.21 272.534 335.21 cv
273.014 335.21 273.404 335.06 273.684 334.75 cv
273.964 334.44 274.104 334.02 274.104 333.48 cv
274.104 330.38 li
275.004 330.38 li
275.004 335.85 li
274.104 335.85 li
274.104 335.01 li
273.884 335.35 273.624 335.59 273.344 335.75 cv
273.054 335.9 272.724 335.98 272.344 335.98 cv
271.714 335.98 271.234 335.79 270.914 335.4 cv
270.584 335.02 270.424 334.45 270.424 333.69 cv
272.684 330.25 mo
272.684 330.25 li
f
280.024 331.22 mo
279.924 331.16 279.814 331.12 279.694 331.09 cv
279.574 331.07 279.444 331.05 279.304 331.05 cv
278.794 331.05 278.404 331.22 278.134 331.55 cv
277.854 331.88 277.724 332.35 277.724 332.97 cv
277.724 335.85 li
276.824 335.85 li
276.824 330.38 li
277.724 330.38 li
277.724 331.23 li
277.904 330.9 278.154 330.65 278.454 330.49 cv
278.754 330.33 279.124 330.25 279.564 330.25 cv
279.774 330.26 li
279.844 330.27 279.924 330.28 280.024 330.3 cv
280.024 331.22 li
f
285.644 332.89 mo
285.644 333.33 li
281.514 333.33 li
281.554 333.95 281.734 334.43 282.074 334.75 cv
282.404 335.07 282.864 335.23 283.464 335.23 cv
283.804 335.23 284.144 335.19 284.464 335.11 cv
284.784 335.03 285.114 334.9 285.434 334.72 cv
285.434 335.57 li
285.114 335.71 284.784 335.82 284.444 335.88 cv
284.104 335.94 283.754 335.98 283.414 335.98 cv
282.534 335.98 281.844 335.73 281.334 335.23 cv
280.824 334.73 280.574 334.04 280.574 333.17 cv
280.574 332.28 280.814 331.57 281.294 331.04 cv
281.774 330.52 282.434 330.25 283.254 330.25 cv
283.994 330.25 284.574 330.49 285.004 330.96 cv
285.424 331.44 285.644 332.08 285.644 332.89 cv
284.744 332.63 mo
284.734 332.14 284.594 331.75 284.334 331.45 cv
284.064 331.16 283.704 331.01 283.264 331.01 cv
282.764 331.01 282.364 331.16 282.064 331.44 cv
281.764 331.72 281.584 332.12 281.544 332.63 cv
284.744 332.63 li
f
290.604 330.54 mo
290.604 331.39 li
290.344 331.27 290.084 331.17 289.814 331.1 cv
289.534 331.04 289.254 331 288.964 331 cv
288.514 331 288.174 331.07 287.954 331.21 cv
287.734 331.35 287.624 331.55 287.624 331.82 cv
287.624 332.03 287.704 332.19 287.864 332.31 cv
288.024 332.43 288.344 332.55 288.824 332.65 cv
289.134 332.72 li
289.774 332.86 290.224 333.06 290.494 333.3 cv
290.754 333.55 290.894 333.9 290.894 334.34 cv
290.894 334.85 290.694 335.25 290.294 335.54 cv
289.894 335.84 289.334 335.98 288.634 335.98 cv
288.334 335.98 288.034 335.95 287.714 335.9 cv
287.394 335.85 287.064 335.77 286.714 335.65 cv
286.714 334.72 li
287.044 334.9 287.374 335.03 287.694 335.11 cv
288.014 335.2 288.334 335.24 288.654 335.24 cv
289.074 335.24 289.404 335.17 289.634 335.03 cv
289.854 334.89 289.974 334.68 289.974 334.41 cv
289.974 334.17 289.884 333.98 289.724 333.85 cv
289.564 333.72 289.204 333.59 288.644 333.47 cv
288.334 333.4 li
287.774 333.28 287.364 333.1 287.124 332.86 cv
286.874 332.62 286.754 332.29 286.754 331.86 cv
286.754 331.35 286.934 330.95 287.294 330.67 cv
287.654 330.39 288.174 330.25 288.854 330.25 cv
289.184 330.25 289.494 330.28 289.794 330.33 cv
290.084 330.38 290.354 330.45 290.604 330.54 cv
f
57.6 307.584 mo
54.1 307.584 li
f
57.6 307.584 mo
54.1 307.584 li
@
47.4206 304.741 mo
46.9106 304.741 46.5306 304.991 46.2706 305.491 cv
46.0106 305.991 45.8906 306.741 45.8906 307.741 cv
45.8906 308.741 46.0106 309.491 46.2706 309.991 cv
46.5306 310.491 46.9106 310.741 47.4206 310.741 cv
47.9306 310.741 48.3106 310.491 48.5706 309.991 cv
48.8206 309.491 48.9506 308.741 48.9506 307.741 cv
48.9506 306.741 48.8206 305.991 48.5706 305.491 cv
48.3106 304.991 47.9306 304.741 47.4206 304.741 cv
47.4206 303.961 mo
48.2306 303.961 48.8506 304.291 49.2906 304.931 cv
49.7206 305.581 49.9406 306.521 49.9406 307.741 cv
49.9406 308.971 49.7206 309.911 49.2906 310.551 cv
48.8506 311.191 48.2306 311.511 47.4206 311.511 cv
46.6006 311.511 45.9706 311.191 45.5406 310.551 cv
45.1106 309.911 44.9006 308.971 44.9006 307.741 cv
44.9006 306.521 45.1106 305.581 45.5406 304.931 cv
45.9706 304.291 46.6006 303.961 47.4206 303.961 cv
f
57.6 276.582 mo
54.1 276.582 li
f
57.6 276.582 mo
54.1 276.582 li
@
46.1606 279.549 mo
49.6006 279.549 li
49.6006 280.379 li
44.9706 280.379 li
44.9706 279.549 li
45.3406 279.169 45.8506 278.649 46.5006 277.989 cv
47.1406 277.339 47.5506 276.919 47.7206 276.729 cv
48.0406 276.379 48.2606 276.079 48.3806 275.829 cv
48.5006 275.589 48.5706 275.339 48.5706 275.099 cv
48.5706 274.719 48.4306 274.399 48.1606 274.159 cv
47.8906 273.919 47.5406 273.789 47.1006 273.789 cv
46.7906 273.789 46.4606 273.849 46.1206 273.949 cv
45.7806 274.059 45.4106 274.219 45.0206 274.439 cv
45.0206 273.439 li
45.4206 273.279 45.7906 273.159 46.1306 273.079 cv
46.4706 272.999 46.7906 272.959 47.0806 272.959 cv
47.8306 272.959 48.4306 273.149 48.8806 273.529 cv
49.3306 273.909 49.5606 274.409 49.5606 275.039 cv
49.5606 275.339 49.5006 275.629 49.3906 275.889 cv
49.2806 276.159 49.0806 276.479 48.7806 276.839 cv
48.7006 276.939 48.4406 277.209 48.0006 277.659 cv
47.5606 278.109 46.9506 278.739 46.1606 279.549 cv
f
57.6 245.58 mo
54.1 245.58 li
f
57.6 245.58 mo
54.1 245.58 li
@
48.0206 242.947 mo
45.5306 246.837 li
48.0206 246.837 li
48.0206 242.947 li
47.7606 242.087 mo
49.0006 242.087 li
49.0006 246.837 li
50.0406 246.837 li
50.0406 247.657 li
49.0006 247.657 li
49.0006 249.377 li
48.0206 249.377 li
48.0206 247.657 li
44.7306 247.657 li
44.7306 246.707 li
47.7606 242.087 li
f
57.6 214.579 mo
54.1 214.579 li
f
57.6 214.579 mo
54.1 214.579 li
@
47.5406 214.335 mo
47.1006 214.335 46.7506 214.495 46.4906 214.795 cv
46.2306 215.095 46.1006 215.515 46.1006 216.035 cv
46.1006 216.565 46.2306 216.985 46.4906 217.285 cv
46.7506 217.585 47.1006 217.735 47.5406 217.735 cv
47.9806 217.735 48.3306 217.585 48.5906 217.285 cv
48.8506 216.985 48.9806 216.565 48.9806 216.035 cv
48.9806 215.515 48.8506 215.095 48.5906 214.795 cv
48.3306 214.495 47.9806 214.335 47.5406 214.335 cv
49.5006 211.245 mo
49.5006 212.145 li
49.2506 212.025 49.0006 211.935 48.7506 211.875 cv
48.4906 211.815 48.2406 211.785 48.0006 211.785 cv
47.3406 211.785 46.8406 212.005 46.5006 212.445 cv
46.1606 212.885 45.9606 213.555 45.9206 214.435 cv
46.1106 214.155 46.3506 213.935 46.6406 213.785 cv
46.9306 213.635 47.2506 213.555 47.6006 213.555 cv
48.3306 213.555 48.9106 213.785 49.3306 214.225 cv
49.7506 214.665 49.9706 215.275 49.9706 216.035 cv
49.9706 216.785 49.7406 217.385 49.3006 217.835 cv
48.8606 218.285 48.2706 218.505 47.5406 218.505 cv
46.7006 218.505 46.0506 218.185 45.6106 217.545 cv
45.1606 216.905 44.9406 215.965 44.9406 214.735 cv
44.9406 213.585 45.2106 212.665 45.7606 211.985 cv
46.3006 211.305 47.0406 210.955 47.9606 210.955 cv
48.2006 210.955 48.4506 210.985 48.7106 211.025 cv
48.9606 211.075 49.2206 211.145 49.5006 211.245 cv
f
57.6 183.577 mo
54.1 183.577 li
f
57.6 183.577 mo
54.1 183.577 li
@
47.4206 183.914 mo
46.9506 183.914 46.5806 184.044 46.3106 184.294 cv
46.0406 184.544 45.9106 184.884 45.9106 185.324 cv
45.9106 185.764 46.0406 186.114 46.3106 186.364 cv
46.5806 186.614 46.9506 186.734 47.4206 186.734 cv
47.8806 186.734 48.2506 186.614 48.5206 186.354 cv
48.7906 186.104 48.9306 185.764 48.9306 185.324 cv
48.9306 184.884 48.7906 184.544 48.5306 184.294 cv
48.2606 184.044 47.8906 183.914 47.4206 183.914 cv
46.4306 183.494 mo
46.0106 183.394 45.6806 183.194 45.4406 182.904 cv
45.2006 182.614 45.0906 182.264 45.0906 181.844 cv
45.0906 181.264 45.2906 180.804 45.7106 180.464 cv
46.1206 180.124 46.6906 179.954 47.4206 179.954 cv
48.1406 179.954 48.7106 180.124 49.1306 180.464 cv
49.5406 180.804 49.7506 181.264 49.7506 181.844 cv
49.7506 182.264 49.6306 182.614 49.3906 182.904 cv
49.1506 183.194 48.8306 183.394 48.4106 183.494 cv
48.8806 183.604 49.2506 183.824 49.5206 184.144 cv
49.7806 184.464 49.9206 184.864 49.9206 185.324 cv
49.9206 186.034 49.7006 186.574 49.2706 186.944 cv
48.8306 187.324 48.2206 187.504 47.4206 187.504 cv
46.6106 187.504 45.9906 187.324 45.5606 186.944 cv
45.1306 186.574 44.9206 186.034 44.9206 185.324 cv
44.9206 184.864 45.0506 184.464 45.3206 184.144 cv
45.5806 183.824 45.9506 183.604 46.4306 183.494 cv
46.0706 181.934 mo
46.0706 182.314 46.1806 182.614 46.4206 182.824 cv
46.6606 183.034 46.9906 183.134 47.4206 183.134 cv
47.8406 183.134 48.1706 183.034 48.4106 182.824 cv
48.6506 182.614 48.7706 182.314 48.7706 181.934 cv
48.7706 181.554 48.6506 181.264 48.4106 181.054 cv
48.1706 180.844 47.8406 180.734 47.4206 180.734 cv
46.9906 180.734 46.6606 180.844 46.4206 181.054 cv
46.1806 181.264 46.0706 181.554 46.0706 181.934 cv
f
57.6 152.575 mo
54.1 152.575 li
f
57.6 152.575 mo
54.1 152.575 li
@
39.1213 155.542 mo
40.7312 155.542 li
40.7312 149.982 li
38.9812 150.332 li
38.9812 149.432 li
40.7212 149.082 li
41.7113 149.082 li
41.7113 155.542 li
43.3213 155.542 li
43.3213 156.372 li
39.1213 156.372 li
39.1213 155.542 li
f
47.4213 149.732 mo
46.9113 149.732 46.5313 149.982 46.2713 150.482 cv
46.0113 150.982 45.8913 151.732 45.8913 152.732 cv
45.8913 153.732 46.0113 154.482 46.2713 154.982 cv
46.5313 155.482 46.9113 155.732 47.4213 155.732 cv
47.9313 155.732 48.3113 155.482 48.5713 154.982 cv
48.8213 154.482 48.9513 153.732 48.9513 152.732 cv
48.9513 151.732 48.8213 150.982 48.5713 150.482 cv
48.3113 149.982 47.9313 149.732 47.4213 149.732 cv
47.4213 148.952 mo
48.2313 148.952 48.8513 149.282 49.2913 149.922 cv
49.7213 150.572 49.9413 151.512 49.9413 152.732 cv
49.9413 153.962 49.7213 154.902 49.2913 155.542 cv
48.8513 156.182 48.2313 156.502 47.4213 156.502 cv
46.6013 156.502 45.9713 156.182 45.5413 155.542 cv
45.1113 154.902 44.9013 153.962 44.9013 152.732 cv
44.9013 151.512 45.1113 150.572 45.5413 149.922 cv
45.9713 149.282 46.6013 148.952 47.4213 148.952 cv
f
57.6 121.573 mo
54.1 121.573 li
f
57.6 121.573 mo
54.1 121.573 li
@
39.1213 124.54 mo
40.7312 124.54 li
40.7312 118.98 li
38.9812 119.33 li
38.9812 118.43 li
40.7212 118.08 li
41.7113 118.08 li
41.7113 124.54 li
43.3213 124.54 li
43.3213 125.37 li
39.1213 125.37 li
39.1213 124.54 li
f
46.1613 124.54 mo
49.6013 124.54 li
49.6013 125.37 li
44.9713 125.37 li
44.9713 124.54 li
45.3413 124.16 45.8513 123.64 46.5013 122.98 cv
47.1413 122.33 47.5513 121.91 47.7213 121.72 cv
48.0413 121.37 48.2613 121.07 48.3813 120.82 cv
48.5013 120.58 48.5713 120.33 48.5713 120.09 cv
48.5713 119.71 48.4313 119.39 48.1613 119.15 cv
47.8913 118.91 47.5413 118.78 47.1013 118.78 cv
46.7913 118.78 46.4613 118.84 46.1213 118.94 cv
45.7813 119.05 45.4113 119.21 45.0213 119.43 cv
45.0213 118.43 li
45.4213 118.27 45.7913 118.15 46.1313 118.07 cv
46.4713 117.99 46.7913 117.95 47.0813 117.95 cv
47.8313 117.95 48.4313 118.14 48.8813 118.52 cv
49.3313 118.9 49.5613 119.4 49.5613 120.03 cv
49.5613 120.33 49.5013 120.62 49.3913 120.88 cv
49.2813 121.15 49.0813 121.47 48.7813 121.83 cv
48.7013 121.93 48.4413 122.2 48.0013 122.65 cv
47.5613 123.1 46.9513 123.73 46.1613 124.54 cv
f
57.6 90.5712 mo
54.1 90.5712 li
f
57.6 90.5712 mo
54.1 90.5712 li
@
39.1213 93.538 mo
40.7312 93.538 li
40.7312 87.978 li
38.9812 88.328 li
38.9812 87.428 li
40.7212 87.078 li
41.7113 87.078 li
41.7113 93.538 li
43.3213 93.538 li
43.3213 94.368 li
39.1213 94.368 li
39.1213 93.538 li
f
48.0213 87.938 mo
45.5313 91.828 li
48.0213 91.828 li
48.0213 87.938 li
47.7613 87.078 mo
49.0013 87.078 li
49.0013 91.828 li
50.0413 91.828 li
50.0413 92.648 li
49.0013 92.648 li
49.0013 94.368 li
48.0213 94.368 li
48.0213 92.648 li
44.7313 92.648 li
44.7313 91.698 li
47.7613 87.078 li
f
57.6 59.5693 mo
54.1 59.5693 li
f
57.6 59.5693 mo
54.1 59.5693 li
@
39.1213 62.5362 mo
40.7312 62.5362 li
40.7312 56.9762 li
38.9812 57.3262 li
38.9812 56.4262 li
40.7212 56.0762 li
41.7113 56.0762 li
41.7113 62.5362 li
43.3213 62.5362 li
43.3213 63.3662 li
39.1213 63.3662 li
39.1213 62.5362 li
f
47.5413 59.3262 mo
47.1013 59.3262 46.7513 59.4862 46.4913 59.7862 cv
46.2313 60.0862 46.1013 60.5062 46.1013 61.0262 cv
46.1013 61.5562 46.2313 61.9762 46.4913 62.2762 cv
46.7513 62.5762 47.1013 62.7262 47.5413 62.7262 cv
47.9813 62.7262 48.3313 62.5762 48.5913 62.2762 cv
48.8513 61.9762 48.9813 61.5562 48.9813 61.0262 cv
48.9813 60.5062 48.8513 60.0862 48.5913 59.7862 cv
48.3313 59.4862 47.9813 59.3262 47.5413 59.3262 cv
49.5013 56.2362 mo
49.5013 57.1362 li
49.2513 57.0162 49.0013 56.9262 48.7513 56.8662 cv
48.4913 56.8062 48.2413 56.7762 48.0013 56.7762 cv
47.3413 56.7762 46.8413 56.9962 46.5013 57.4362 cv
46.1613 57.8762 45.9613 58.5462 45.9213 59.4262 cv
46.1113 59.1462 46.3513 58.9262 46.6413 58.7762 cv
46.9313 58.6262 47.2513 58.5462 47.6013 58.5462 cv
48.3313 58.5462 48.9113 58.7762 49.3313 59.2162 cv
49.7513 59.6562 49.9713 60.2662 49.9713 61.0262 cv
49.9713 61.7762 49.7413 62.3762 49.3013 62.8262 cv
48.8613 63.2762 48.2713 63.4962 47.5413 63.4962 cv
46.7013 63.4962 46.0513 63.1762 45.6113 62.5362 cv
45.1613 61.8962 44.9413 60.9562 44.9413 59.7262 cv
44.9413 58.5762 45.2113 57.6562 45.7613 56.9762 cv
46.3013 56.2962 47.0413 55.9462 47.9613 55.9462 cv
48.2013 55.9462 48.4513 55.9762 48.7113 56.0162 cv
48.9613 56.0662 49.2213 56.1362 49.5013 56.2362 cv
f
25.3231 261.331 mo
30.9931 261.331 li
30.9931 260.141 li
30.9931 259.141 30.7731 258.401 30.3131 257.931 cv
29.8531 257.471 29.1331 257.231 28.1531 257.231 cv
27.1731 257.231 26.4631 257.471 26.0031 257.931 cv
25.5531 258.401 25.3231 259.141 25.3231 260.141 cv
25.3231 261.331 li
24.5131 262.321 mo
24.5131 260.291 li
24.5131 258.881 24.8131 257.841 25.3931 257.181 cv
25.9831 256.521 26.9031 256.191 28.1531 256.191 cv
29.4131 256.191 30.3331 256.531 30.9231 257.191 cv
31.5131 257.851 31.8031 258.891 31.8031 260.291 cv
31.8031 262.321 li
24.5131 262.321 li
f
29.0531 252.171 mo
29.0531 252.901 29.1431 253.401 29.3031 253.681 cv
29.4731 253.961 29.7531 254.101 30.1531 254.101 cv
30.4731 254.101 30.7331 254.001 30.9131 253.791 cv
31.1031 253.581 31.1931 253.291 31.1931 252.931 cv
31.1931 252.431 31.0231 252.031 30.6631 251.731 cv
30.3131 251.431 29.8431 251.281 29.2531 251.281 cv
29.0531 251.281 li
29.0531 252.171 li
28.6831 250.381 mo
31.8031 250.381 li
31.8031 251.281 li
30.9731 251.281 li
31.3131 251.491 31.5531 251.751 31.7031 252.051 cv
31.8531 252.351 31.9331 252.731 31.9331 253.171 cv
31.9331 253.731 31.7831 254.181 31.4731 254.511 cv
31.1631 254.841 30.7431 255.001 30.2131 255.001 cv
29.6031 255.001 29.1431 254.801 28.8231 254.381 cv
28.5131 253.971 28.3531 253.361 28.3531 252.541 cv
28.3531 251.281 li
28.2631 251.281 li
27.8531 251.281 27.5331 251.421 27.3031 251.691 cv
27.0831 251.961 26.9631 252.341 26.9631 252.831 cv
26.9631 253.151 27.0031 253.451 27.0831 253.751 cv
27.1631 254.051 27.2731 254.331 27.4131 254.601 cv
26.5831 254.601 li
26.4631 254.281 26.3631 253.961 26.3031 253.651 cv
26.2431 253.341 26.2031 253.041 26.2031 252.741 cv
26.2031 251.951 26.4131 251.361 26.8231 250.971 cv
27.2331 250.581 27.8531 250.381 28.6831 250.381 cv
f
24.7831 247.641 mo
26.3331 247.641 li
26.3331 245.791 li
27.0331 245.791 li
27.0331 247.641 li
30.0031 247.641 li
30.4531 247.641 30.7431 247.581 30.8631 247.461 cv
30.9931 247.341 31.0531 247.091 31.0531 246.711 cv
31.0531 245.791 li
31.8031 245.791 li
31.8031 246.711 li
31.8031 247.411 31.6731 247.891 31.4131 248.151 cv
31.1531 248.411 30.6831 248.541 30.0031 248.541 cv
27.0331 248.541 li
27.0331 249.201 li
26.3331 249.201 li
26.3331 248.541 li
24.7831 248.541 li
24.7831 247.641 li
f
29.0531 242.121 mo
29.0531 242.851 29.1431 243.351 29.3031 243.631 cv
29.4731 243.911 29.7531 244.051 30.1531 244.051 cv
30.4731 244.051 30.7331 243.951 30.9131 243.741 cv
31.1031 243.531 31.1931 243.241 31.1931 242.881 cv
31.1931 242.381 31.0231 241.981 30.6631 241.681 cv
30.3131 241.381 29.8431 241.231 29.2531 241.231 cv
29.0531 241.231 li
29.0531 242.121 li
28.6831 240.331 mo
31.8031 240.331 li
31.8031 241.231 li
30.9731 241.231 li
31.3131 241.441 31.5531 241.701 31.7031 242.001 cv
31.8531 242.301 31.9331 242.681 31.9331 243.121 cv
31.9331 243.681 31.7831 244.131 31.4731 244.461 cv
31.1631 244.791 30.7431 244.951 30.2131 244.951 cv
29.6031 244.951 29.1431 244.751 28.8231 244.331 cv
28.5131 243.921 28.3531 243.311 28.3531 242.491 cv
28.3531 241.231 li
28.2631 241.231 li
27.8531 241.231 27.5331 241.371 27.3031 241.641 cv
27.0831 241.911 26.9631 242.291 26.9631 242.781 cv
26.9631 243.101 27.0031 243.401 27.0831 243.701 cv
27.1631 244.001 27.2731 244.281 27.4131 244.551 cv
26.5831 244.551 li
26.4631 244.231 26.3631 243.911 26.3031 243.601 cv
26.2431 243.291 26.2031 242.991 26.2031 242.691 cv
26.2031 241.901 26.4131 241.311 26.8231 240.921 cv
27.2331 240.531 27.8531 240.331 28.6831 240.331 cv
f
24.5131 236.261 mo
24.5131 230.101 li
25.3431 230.101 li
25.3431 232.691 li
31.8031 232.691 li
31.8031 233.681 li
25.3431 233.681 li
25.3431 236.261 li
24.5131 236.261 li
f
27.1731 226.021 mo
27.1131 226.121 27.0731 226.231 27.0431 226.351 cv
27.0231 226.471 27.0031 226.601 27.0031 226.741 cv
27.0031 227.251 27.1731 227.641 27.5031 227.911 cv
27.8331 228.191 28.3031 228.321 28.9231 228.321 cv
31.8031 228.321 li
31.8031 229.221 li
26.3331 229.221 li
26.3331 228.321 li
27.1831 228.321 li
26.8531 228.141 26.6031 227.891 26.4431 227.591 cv
26.2831 227.291 26.2031 226.921 26.2031 226.481 cv
26.2131 226.271 li
26.2231 226.201 26.2331 226.121 26.2531 226.021 cv
27.1731 226.021 li
f
29.0531 222.591 mo
29.0531 223.321 29.1431 223.821 29.3031 224.101 cv
29.4731 224.381 29.7531 224.521 30.1531 224.521 cv
30.4731 224.521 30.7331 224.421 30.9131 224.211 cv
31.1031 224.001 31.1931 223.711 31.1931 223.351 cv
31.1931 222.851 31.0231 222.451 30.6631 222.151 cv
30.3131 221.851 29.8431 221.701 29.2531 221.701 cv
29.0531 221.701 li
29.0531 222.591 li
28.6831 220.801 mo
31.8031 220.801 li
31.8031 221.701 li
30.9731 221.701 li
31.3131 221.911 31.5531 222.171 31.7031 222.471 cv
31.8531 222.771 31.9331 223.151 31.9331 223.591 cv
31.9331 224.151 31.7831 224.601 31.4731 224.931 cv
31.1631 225.261 30.7431 225.421 30.2131 225.421 cv
29.6031 225.421 29.1431 225.221 28.8231 224.801 cv
28.5131 224.391 28.3531 223.781 28.3531 222.961 cv
28.3531 221.701 li
28.2631 221.701 li
27.8531 221.701 27.5331 221.841 27.3031 222.111 cv
27.0831 222.381 26.9631 222.761 26.9631 223.251 cv
26.9631 223.571 27.0031 223.871 27.0831 224.171 cv
27.1631 224.471 27.2731 224.751 27.4131 225.021 cv
26.5831 225.021 li
26.4631 224.701 26.3631 224.381 26.3031 224.071 cv
26.2431 223.761 26.2031 223.461 26.2031 223.161 cv
26.2031 222.371 26.4131 221.781 26.8231 221.391 cv
27.2331 221.001 27.8531 220.801 28.6831 220.801 cv
f
28.5031 214.401 mo
31.8031 214.401 li
31.8031 215.301 li
28.5331 215.301 li
28.0131 215.301 27.6331 215.411 27.3731 215.611 cv
27.1131 215.811 26.9831 216.111 26.9831 216.511 cv
26.9831 217.001 27.1431 217.381 27.4531 217.661 cv
27.7631 217.941 28.1831 218.081 28.7131 218.081 cv
31.8031 218.081 li
31.8031 218.981 li
26.3331 218.981 li
26.3331 218.081 li
27.1831 218.081 li
26.8631 217.871 26.6131 217.621 26.4531 217.321 cv
26.2931 217.031 26.2031 216.691 26.2031 216.311 cv
26.2031 215.691 26.4031 215.211 26.7931 214.891 cv
27.1831 214.571 27.7531 214.401 28.5031 214.401 cv
f
26.4931 209.121 mo
27.3431 209.121 li
27.2231 209.381 27.1231 209.641 27.0531 209.911 cv
26.9931 210.191 26.9531 210.471 26.9531 210.761 cv
26.9531 211.211 27.0231 211.551 27.1631 211.771 cv
27.3031 211.991 27.5031 212.101 27.7731 212.101 cv
27.9831 212.101 28.1431 212.021 28.2631 211.861 cv
28.3831 211.701 28.5031 211.381 28.6031 210.901 cv
28.6731 210.591 li
28.8131 209.951 29.0131 209.501 29.2531 209.231 cv
29.5031 208.971 29.8531 208.831 30.2931 208.831 cv
30.8031 208.831 31.2031 209.031 31.4931 209.431 cv
31.7931 209.831 31.9331 210.391 31.9331 211.091 cv
31.9331 211.391 31.9031 211.691 31.8531 212.011 cv
31.8031 212.331 31.7231 212.661 31.6031 213.011 cv
30.6731 213.011 li
30.8531 212.681 30.9831 212.351 31.0631 212.031 cv
31.1531 211.711 31.1931 211.391 31.1931 211.071 cv
31.1931 210.651 31.1231 210.321 30.9831 210.091 cv
30.8431 209.871 30.6331 209.751 30.3631 209.751 cv
30.1231 209.751 29.9331 209.841 29.8031 210.001 cv
29.6731 210.161 29.5431 210.521 29.4231 211.081 cv
29.3531 211.391 li
29.2331 211.951 29.0531 212.361 28.8131 212.601 cv
28.5731 212.851 28.2431 212.971 27.8131 212.971 cv
27.3031 212.971 26.9031 212.791 26.6231 212.431 cv
26.3431 212.071 26.2031 211.551 26.2031 210.871 cv
26.2031 210.541 26.2331 210.231 26.2831 209.931 cv
26.3331 209.641 26.4031 209.371 26.4931 209.121 cv
f
24.2031 204.631 mo
24.9531 204.631 li
24.9531 205.491 li
24.9531 205.811 25.0231 206.041 25.1531 206.161 cv
25.2831 206.291 25.5131 206.351 25.8531 206.351 cv
26.3331 206.351 li
26.3331 204.871 li
27.0331 204.871 li
27.0331 206.351 li
31.8031 206.351 li
31.8031 207.251 li
27.0331 207.251 li
27.0331 208.111 li
26.3331 208.111 li
26.3331 207.251 li
25.9531 207.251 li
25.3531 207.251 24.9031 207.111 24.6231 206.831 cv
24.3431 206.551 24.2031 206.101 24.2031 205.481 cv
24.2031 204.631 li
f
28.8431 199.201 mo
29.2831 199.201 li
29.2831 203.331 li
29.9031 203.291 30.3831 203.111 30.7031 202.771 cv
31.0231 202.441 31.1831 201.981 31.1831 201.381 cv
31.1831 201.041 31.1431 200.701 31.0631 200.381 cv
30.9831 200.061 30.8531 199.731 30.6731 199.411 cv
31.5231 199.411 li
31.6631 199.731 31.7731 200.061 31.8331 200.401 cv
31.8931 200.741 31.9331 201.091 31.9331 201.431 cv
31.9331 202.311 31.6831 203.001 31.1831 203.511 cv
30.6831 204.021 29.9931 204.271 29.1231 204.271 cv
28.2331 204.271 27.5231 204.031 26.9931 203.551 cv
26.4731 203.071 26.2031 202.411 26.2031 201.591 cv
26.2031 200.851 26.4431 200.271 26.9131 199.841 cv
27.3931 199.421 28.0331 199.201 28.8431 199.201 cv
28.5831 200.101 mo
28.0931 200.111 27.7031 200.251 27.4031 200.511 cv
27.1131 200.781 26.9631 201.141 26.9631 201.581 cv
26.9631 202.081 27.1131 202.481 27.3931 202.781 cv
27.6731 203.081 28.0731 203.261 28.5831 203.301 cv
28.5831 200.101 li
f
27.1731 194.561 mo
27.1131 194.661 27.0731 194.771 27.0431 194.891 cv
27.0231 195.011 27.0031 195.141 27.0031 195.281 cv
27.0031 195.791 27.1731 196.181 27.5031 196.451 cv
27.8331 196.731 28.3031 196.861 28.9231 196.861 cv
31.8031 196.861 li
31.8031 197.761 li
26.3331 197.761 li
26.3331 196.861 li
27.1831 196.861 li
26.8531 196.681 26.6031 196.431 26.4431 196.131 cv
26.2831 195.831 26.2031 195.461 26.2031 195.021 cv
26.2131 194.811 li
26.2231 194.741 26.2331 194.661 26.2531 194.561 cv
27.1731 194.561 li
f
28.3831 186.941 mo
28.4631 186.731 28.6131 186.521 28.8431 186.321 cv
29.0831 186.121 29.4031 185.921 29.8131 185.721 cv
31.8031 184.721 li
31.8031 185.781 li
29.9331 186.711 li
29.4531 186.951 29.1231 187.191 28.9631 187.411 cv
28.8031 187.641 28.7231 187.951 28.7231 188.341 cv
28.7231 189.411 li
31.8031 189.411 li
31.8031 190.401 li
24.5131 190.401 li
24.5131 188.171 li
24.5131 187.341 24.6931 186.721 25.0331 186.311 cv
25.3831 185.901 25.9131 185.691 26.6131 185.691 cv
27.0731 185.691 27.4631 185.801 27.7631 186.011 cv
28.0631 186.231 28.2731 186.541 28.3831 186.941 cv
25.3231 189.411 mo
27.9131 189.411 li
27.9131 188.171 li
27.9131 187.701 27.8031 187.341 27.5831 187.101 cv
27.3631 186.861 27.0431 186.731 26.6131 186.731 cv
26.1931 186.731 25.8731 186.861 25.6531 187.101 cv
25.4331 187.341 25.3231 187.701 25.3231 188.171 cv
25.3231 189.411 li
f
29.0531 181.001 mo
29.0531 181.731 29.1431 182.231 29.3031 182.511 cv
29.4731 182.791 29.7531 182.931 30.1531 182.931 cv
30.4731 182.931 30.7331 182.831 30.9131 182.621 cv
31.1031 182.411 31.1931 182.121 31.1931 181.761 cv
31.1931 181.261 31.0231 180.861 30.6631 180.561 cv
30.3131 180.261 29.8431 180.111 29.2531 180.111 cv
29.0531 180.111 li
29.0531 181.001 li
28.6831 179.211 mo
31.8031 179.211 li
31.8031 180.111 li
30.9731 180.111 li
31.3131 180.321 31.5531 180.581 31.7031 180.881 cv
31.8531 181.181 31.9331 181.561 31.9331 182.001 cv
31.9331 182.561 31.7831 183.011 31.4731 183.341 cv
31.1631 183.671 30.7431 183.831 30.2131 183.831 cv
29.6031 183.831 29.1431 183.631 28.8231 183.211 cv
28.5131 182.801 28.3531 182.191 28.3531 181.371 cv
28.3531 180.111 li
28.2631 180.111 li
27.8531 180.111 27.5331 180.251 27.3031 180.521 cv
27.0831 180.791 26.9631 181.171 26.9631 181.661 cv
26.9631 181.981 27.0031 182.281 27.0831 182.581 cv
27.1631 182.881 27.2731 183.161 27.4131 183.431 cv
26.5831 183.431 li
26.4631 183.111 26.3631 182.791 26.3031 182.481 cv
26.2431 182.171 26.2031 181.871 26.2031 181.571 cv
26.2031 180.781 26.4131 180.191 26.8231 179.801 cv
27.2331 179.411 27.8531 179.211 28.6831 179.211 cv
f
24.7831 176.471 mo
26.3331 176.471 li
26.3331 174.621 li
27.0331 174.621 li
27.0331 176.471 li
30.0031 176.471 li
30.4531 176.471 30.7431 176.411 30.8631 176.291 cv
30.9931 176.171 31.0531 175.921 31.0531 175.541 cv
31.0531 174.621 li
31.8031 174.621 li
31.8031 175.541 li
31.8031 176.241 31.6731 176.721 31.4131 176.981 cv
31.1531 177.241 30.6831 177.371 30.0031 177.371 cv
27.0331 177.371 li
27.0331 178.031 li
26.3331 178.031 li
26.3331 177.371 li
24.7831 177.371 li
24.7831 176.471 li
f
28.8431 168.761 mo
29.2831 168.761 li
29.2831 172.891 li
29.9031 172.851 30.3831 172.671 30.7031 172.331 cv
31.0231 172.001 31.1831 171.541 31.1831 170.941 cv
31.1831 170.601 31.1431 170.261 31.0631 169.941 cv
30.9831 169.621 30.8531 169.291 30.6731 168.971 cv
31.5231 168.971 li
31.6631 169.291 31.7731 169.621 31.8331 169.961 cv
31.8931 170.301 31.9331 170.651 31.9331 170.991 cv
31.9331 171.871 31.6831 172.561 31.1831 173.071 cv
30.6831 173.581 29.9931 173.831 29.1231 173.831 cv
28.2331 173.831 27.5231 173.591 26.9931 173.111 cv
26.4731 172.631 26.2031 171.971 26.2031 171.151 cv
26.2031 170.411 26.4431 169.831 26.9131 169.401 cv
27.3931 168.981 28.0331 168.761 28.8431 168.761 cv
28.5831 169.661 mo
28.0931 169.671 27.7031 169.811 27.4031 170.071 cv
27.1131 170.341 26.9631 170.701 26.9631 171.141 cv
26.9631 171.641 27.1131 172.041 27.3931 172.341 cv
27.6731 172.641 28.0731 172.821 28.5831 172.861 cv
28.5831 169.661 li
f
25.3231 163.081 mo
28.0631 163.081 li
28.0631 161.841 li
28.0631 161.381 27.9531 161.031 27.7131 160.781 cv
27.4731 160.531 27.1331 160.401 26.6931 160.401 cv
26.2531 160.401 25.9231 160.531 25.6831 160.781 cv
25.4431 161.031 25.3231 161.381 25.3231 161.841 cv
25.3231 163.081 li
24.5131 164.071 mo
24.5131 161.841 li
24.5131 161.031 24.7031 160.411 25.0731 159.991 cv
25.4431 159.571 25.9831 159.361 26.6931 159.361 cv
27.4131 159.361 27.9631 159.571 28.3231 159.991 cv
28.6931 160.411 28.8731 161.031 28.8731 161.841 cv
28.8731 163.081 li
31.8031 163.081 li
31.8031 164.071 li
24.5131 164.071 li
f
28.8431 153.401 mo
29.2831 153.401 li
29.2831 157.531 li
29.9031 157.491 30.3831 157.311 30.7031 156.971 cv
31.0231 156.641 31.1831 156.181 31.1831 155.581 cv
31.1831 155.241 31.1431 154.901 31.0631 154.581 cv
30.9831 154.261 30.8531 153.931 30.6731 153.611 cv
31.5231 153.611 li
31.6631 153.931 31.7731 154.261 31.8331 154.601 cv
31.8931 154.941 31.9331 155.291 31.9331 155.631 cv
31.9331 156.511 31.6831 157.201 31.1831 157.711 cv
30.6831 158.221 29.9931 158.471 29.1231 158.471 cv
28.2331 158.471 27.5231 158.231 26.9931 157.751 cv
26.4731 157.271 26.2031 156.611 26.2031 155.791 cv
26.2031 155.051 26.4431 154.471 26.9131 154.041 cv
27.3931 153.621 28.0331 153.401 28.8431 153.401 cv
28.5831 154.301 mo
28.0931 154.311 27.7031 154.451 27.4031 154.711 cv
27.1131 154.981 26.9631 155.341 26.9631 155.781 cv
26.9631 156.281 27.1131 156.681 27.3931 156.981 cv
27.6731 157.281 28.0731 157.461 28.5831 157.501 cv
28.5831 154.301 li
f
27.1731 148.761 mo
27.1131 148.861 27.0731 148.971 27.0431 149.091 cv
27.0231 149.211 27.0031 149.341 27.0031 149.481 cv
27.0031 149.991 27.1731 150.381 27.5031 150.651 cv
27.8331 150.931 28.3031 151.061 28.9231 151.061 cv
31.8031 151.061 li
31.8031 151.961 li
26.3331 151.961 li
26.3331 151.061 li
27.1831 151.061 li
26.8531 150.881 26.6031 150.631 26.4431 150.331 cv
26.2831 150.031 26.2031 149.661 26.2031 149.221 cv
26.2131 149.011 li
26.2231 148.941 26.2331 148.861 26.2531 148.761 cv
27.1731 148.761 li
f
24.7531 140.231 mo
25.7131 140.231 li
25.5331 140.611 25.4031 140.961 25.3131 141.291 cv
25.2331 141.631 25.1831 141.951 25.1831 142.251 cv
25.1831 142.791 25.2931 143.211 25.4931 143.501 cv
25.7031 143.791 26.0031 143.931 26.3831 143.931 cv
26.7031 143.931 26.9531 143.841 27.1131 143.641 cv
27.2831 143.451 27.4131 143.081 27.5131 142.541 cv
27.6331 141.941 li
27.7731 141.211 28.0231 140.671 28.3731 140.321 cv
28.7331 139.971 29.2031 139.791 29.7931 139.791 cv
30.5031 139.791 31.0331 140.031 31.3931 140.501 cv
31.7531 140.981 31.9331 141.671 31.9331 142.581 cv
31.9331 142.931 31.8931 143.301 31.8231 143.691 cv
31.7531 144.081 31.6431 144.481 31.4831 144.891 cv
30.4631 144.891 li
30.6931 144.491 30.8631 144.101 30.9731 143.721 cv
31.0931 143.341 31.1431 142.961 31.1431 142.581 cv
31.1431 142.021 31.0331 141.591 30.8131 141.281 cv
30.5931 140.981 30.2831 140.821 29.8631 140.821 cv
29.5031 140.821 29.2231 140.931 29.0231 141.151 cv
28.8231 141.371 28.6731 141.731 28.5731 142.231 cv
28.4531 142.831 li
28.3131 143.571 28.0831 144.101 27.7631 144.431 cv
27.4531 144.761 27.0231 144.921 26.4631 144.921 cv
25.8231 144.921 25.3131 144.701 24.9431 144.241 cv
24.5731 143.791 24.3831 143.161 24.3831 142.361 cv
24.3831 142.021 24.4131 141.681 24.4731 141.321 cv
24.5331 140.971 24.6331 140.611 24.7531 140.231 cv
f
28.8431 133.611 mo
29.2831 133.611 li
29.2831 137.741 li
29.9031 137.701 30.3831 137.521 30.7031 137.181 cv
31.0231 136.851 31.1831 136.391 31.1831 135.791 cv
31.1831 135.451 31.1431 135.111 31.0631 134.791 cv
30.9831 134.471 30.8531 134.141 30.6731 133.821 cv
31.5231 133.821 li
31.6631 134.141 31.7731 134.471 31.8331 134.811 cv
31.8931 135.151 31.9331 135.501 31.9331 135.841 cv
31.9331 136.721 31.6831 137.411 31.1831 137.921 cv
30.6831 138.431 29.9931 138.681 29.1231 138.681 cv
28.2331 138.681 27.5231 138.441 26.9931 137.961 cv
26.4731 137.481 26.2031 136.821 26.2031 136.001 cv
26.2031 135.261 26.4431 134.681 26.9131 134.251 cv
27.3931 133.831 28.0331 133.611 28.8431 133.611 cv
28.5831 134.511 mo
28.0931 134.521 27.7031 134.661 27.4031 134.921 cv
27.1131 135.191 26.9631 135.551 26.9631 135.991 cv
26.9631 136.491 27.1131 136.891 27.3931 137.191 cv
27.6731 137.491 28.0731 137.671 28.5831 137.711 cv
28.5831 134.511 li
f
26.5431 128.201 mo
27.3831 128.201 li
27.2431 128.461 27.1431 128.711 27.0731 128.971 cv
27.0031 129.231 26.9631 129.481 26.9631 129.741 cv
26.9631 130.321 27.1531 130.781 27.5231 131.101 cv
27.8931 131.421 28.4131 131.581 29.0731 131.581 cv
29.7431 131.581 30.2631 131.421 30.6331 131.101 cv
31.0031 130.781 31.1831 130.321 31.1831 129.741 cv
31.1831 129.481 31.1531 129.231 31.0831 128.971 cv
31.0131 128.711 30.9031 128.461 30.7631 128.201 cv
31.5931 128.201 li
31.7131 128.461 31.8031 128.721 31.8531 128.981 cv
31.9031 129.251 31.9331 129.541 31.9331 129.841 cv
31.9331 130.661 31.6831 131.321 31.1631 131.801 cv
30.6531 132.291 29.9531 132.531 29.0731 132.531 cv
28.1831 132.531 27.4831 132.291 26.9731 131.801 cv
26.4631 131.311 26.2031 130.641 26.2031 129.781 cv
26.2031 129.501 26.2331 129.231 26.2931 128.971 cv
26.3531 128.711 26.4331 128.451 26.5431 128.201 cv
f
26.9631 124.521 mo
26.9631 125.001 27.1531 125.381 27.5331 125.661 cv
27.9131 125.941 28.4231 126.081 29.0731 126.081 cv
29.7331 126.081 30.2431 125.951 30.6231 125.671 cv
31.0031 125.391 31.1831 125.011 31.1831 124.521 cv
31.1831 124.041 31.0031 123.661 30.6231 123.381 cv
30.2431 123.101 29.7331 122.961 29.0731 122.961 cv
28.4331 122.961 27.9131 123.101 27.5331 123.381 cv
27.1531 123.661 26.9631 124.041 26.9631 124.521 cv
26.2031 124.521 mo
26.2031 123.741 26.4631 123.131 26.9631 122.681 cv
27.4731 122.241 28.1731 122.011 29.0731 122.011 cv
29.9731 122.011 30.6731 122.241 31.1731 122.681 cv
31.6831 123.131 31.9331 123.741 31.9331 124.521 cv
31.9331 125.311 31.6831 125.931 31.1731 126.371 cv
30.6731 126.811 29.9731 127.031 29.0731 127.031 cv
28.1731 127.031 27.4731 126.811 26.9631 126.371 cv
26.4631 125.931 26.2031 125.311 26.2031 124.521 cv
f
28.5031 115.971 mo
31.8031 115.971 li
31.8031 116.871 li
28.5331 116.871 li
28.0131 116.871 27.6331 116.981 27.3731 117.181 cv
27.1131 117.381 26.9831 117.681 26.9831 118.081 cv
26.9831 118.571 27.1431 118.951 27.4531 119.231 cv
27.7631 119.511 28.1831 119.651 28.7131 119.651 cv
31.8031 119.651 li
31.8031 120.551 li
26.3331 120.551 li
26.3331 119.651 li
27.1831 119.651 li
26.8631 119.441 26.6131 119.191 26.4531 118.891 cv
26.2931 118.601 26.2031 118.261 26.2031 117.881 cv
26.2031 117.261 26.4031 116.781 26.7931 116.461 cv
27.1831 116.141 27.7531 115.971 28.5031 115.971 cv
f
27.1631 110.581 mo
24.2031 110.581 li
24.2031 109.681 li
31.8031 109.681 li
31.8031 110.581 li
30.9831 110.581 li
31.3131 110.771 31.5531 111.011 31.7031 111.301 cv
31.8531 111.591 31.9331 111.931 31.9331 112.331 cv
31.9331 112.991 31.6731 113.531 31.1531 113.951 cv
30.6331 114.371 29.9331 114.571 29.0731 114.571 cv
28.2131 114.571 27.5231 114.371 26.9931 113.951 cv
26.4731 113.531 26.2031 112.991 26.2031 112.331 cv
26.2031 111.931 26.2831 111.591 26.4431 111.301 cv
26.6031 111.011 26.8431 110.771 27.1631 110.581 cv
29.0731 113.641 mo
29.7331 113.641 30.2531 113.511 30.6331 113.241 cv
31.0131 112.971 31.1931 112.591 31.1931 112.111 cv
31.1931 111.641 31.0131 111.271 30.6331 110.991 cv
30.2531 110.721 29.7331 110.581 29.0731 110.581 cv
28.4131 110.581 27.9031 110.721 27.5231 110.991 cv
27.1431 111.271 26.9531 111.641 26.9531 112.111 cv
26.9531 112.591 27.1431 112.971 27.5231 113.241 cv
27.9031 113.511 28.4131 113.641 29.0731 113.641 cv
f
24.2131 105.671 mo
24.9731 106.111 25.7131 106.431 26.4431 106.641 cv
27.1731 106.861 27.9131 106.961 28.6631 106.961 cv
29.4231 106.961 30.1631 106.861 30.8931 106.641 cv
31.6331 106.431 32.3631 106.111 33.1131 105.671 cv
33.1131 106.451 li
32.3431 106.941 31.6031 107.311 30.8631 107.551 cv
30.1231 107.791 29.3931 107.911 28.6631 107.911 cv
27.9431 107.911 27.2131 107.791 26.4731 107.551 cv
25.7331 107.311 24.9831 106.951 24.2131 106.451 cv
24.2131 105.671 li
f
27.3831 99.6712 mo
26.9831 99.4512 26.6931 99.1812 26.4931 98.8712 cv
26.3031 98.5612 26.2031 98.1912 26.2031 97.7612 cv
26.2031 97.2012 26.4031 96.7612 26.8031 96.4512 cv
27.2031 96.1412 27.7731 95.9812 28.5031 95.9812 cv
31.8031 95.9812 li
31.8031 96.8812 li
28.5331 96.8812 li
28.0131 96.8812 27.6231 96.9812 27.3631 97.1612 cv
27.1131 97.3512 26.9831 97.6312 26.9831 98.0112 cv
26.9831 98.4812 27.1431 98.8512 27.4531 99.1212 cv
27.7631 99.3912 28.1831 99.5212 28.7131 99.5212 cv
31.8031 99.5212 li
31.8031 100.421 li
28.5331 100.421 li
28.0131 100.421 27.6231 100.521 27.3631 100.701 cv
27.1131 100.891 26.9831 101.181 26.9831 101.561 cv
26.9831 102.021 27.1431 102.391 27.4531 102.661 cv
27.7631 102.931 28.1831 103.061 28.7131 103.061 cv
31.8031 103.061 li
31.8031 103.961 li
26.3331 103.961 li
26.3331 103.061 li
27.1831 103.061 li
26.8531 102.861 26.6031 102.611 26.4431 102.321 cv
26.2831 102.041 26.2031 101.701 26.2031 101.301 cv
26.2031 100.901 26.3031 100.571 26.5031 100.291 cv
26.7031 100.011 27.0031 99.8112 27.3831 99.6712 cv
f
24.5131 92.5912 mo
24.5131 91.7612 li
32.7231 94.3012 li
32.7231 95.1312 li
24.5131 92.5912 li
f
26.4931 87.3311 mo
27.3431 87.3311 li
27.2231 87.5911 27.1231 87.8511 27.0531 88.1211 cv
26.9931 88.4011 26.9531 88.6811 26.9531 88.9711 cv
26.9531 89.4211 27.0231 89.7611 27.1631 89.9811 cv
27.3031 90.2011 27.5031 90.3111 27.7731 90.3111 cv
27.9831 90.3111 28.1431 90.2311 28.2631 90.0711 cv
28.3831 89.9111 28.5031 89.5911 28.6031 89.1111 cv
28.6731 88.8011 li
28.8131 88.1611 29.0131 87.7111 29.2531 87.4411 cv
29.5031 87.1811 29.8531 87.0411 30.2931 87.0411 cv
30.8031 87.0411 31.2031 87.2411 31.4931 87.6411 cv
31.7931 88.0411 31.9331 88.6011 31.9331 89.3011 cv
31.9331 89.6011 31.9031 89.9011 31.8531 90.2211 cv
31.8031 90.5411 31.7231 90.8711 31.6031 91.2211 cv
30.6731 91.2211 li
30.8531 90.8911 30.9831 90.5611 31.0631 90.2411 cv
31.1531 89.9211 31.1931 89.6011 31.1931 89.2811 cv
31.1931 88.8611 31.1231 88.5311 30.9831 88.3011 cv
30.8431 88.0811 30.6331 87.9611 30.3631 87.9611 cv
30.1231 87.9611 29.9331 88.0511 29.8031 88.2111 cv
29.6731 88.3711 29.5431 88.7311 29.4231 89.2911 cv
29.3531 89.6011 li
29.2331 90.1611 29.0531 90.5711 28.8131 90.8111 cv
28.5731 91.0611 28.2431 91.1811 27.8131 91.1811 cv
27.3031 91.1811 26.9031 91.0011 26.6231 90.6411 cv
26.3431 90.2811 26.2031 89.7611 26.2031 89.0811 cv
26.2031 88.7511 26.2331 88.4411 26.2831 88.1411 cv
26.3331 87.8511 26.4031 87.5811 26.4931 87.3311 cv
f
24.2131 85.7512 mo
24.2131 84.9712 li
24.9831 84.4912 25.7331 84.1212 26.4731 83.8812 cv
27.2131 83.6412 27.9431 83.5112 28.6631 83.5112 cv
29.3931 83.5112 30.1231 83.6412 30.8631 83.8812 cv
31.6031 84.1212 32.3431 84.4912 33.1131 84.9712 cv
33.1131 85.7512 li
32.3631 85.3212 31.6331 85.0012 30.8931 84.7812 cv
30.1631 84.5712 29.4231 84.4612 28.6631 84.4612 cv
27.9131 84.4612 27.1731 84.5712 26.4431 84.7812 cv
25.7131 85.0012 24.9731 85.3212 24.2131 85.7512 cv
f
2 lc
0 lj
57.6 307.584 mo
57.6 41.472 li
@
414.72 307.584 mo
414.72 41.472 li
@
57.6 307.584 mo
414.72 307.584 li
@
57.6 41.472 mo
414.72 41.472 li
@
73.7033 70.556 mo
74.8303 70.556 li
74.8303 66.664 li
73.6053 66.909 li
73.6053 66.279 li
74.8233 66.034 li
75.5163 66.034 li
75.5163 70.556 li
76.6433 70.556 li
76.6433 71.137 li
73.7033 71.137 li
73.7033 70.556 li
0 .993988 1 0 cmyk
f
78.0433 66.034 mo
80.7523 66.034 li
80.7523 66.615 li
78.6733 66.615 li
78.6733 67.868 li
78.7713 67.833 78.8763 67.805 78.9743 67.791 cv
79.0723 67.777 79.1773 67.763 79.2753 67.763 cv
79.8423 67.763 80.2903 67.924 80.6263 68.232 cv
80.9623 68.547 81.1303 68.967 81.1303 69.499 cv
81.1303 70.052 80.9553 70.479 80.6123 70.78 cv
80.2693 71.081 79.7863 71.228 79.1703 71.228 cv
78.9533 71.228 78.7363 71.207 78.5123 71.179 cv
78.2883 71.144 78.0643 71.095 77.8263 71.018 cv
77.8263 70.325 li
78.0293 70.437 78.2393 70.521 78.4633 70.577 cv
78.6803 70.633 78.9113 70.654 79.1563 70.654 cv
79.5483 70.654 79.8633 70.556 80.0943 70.346 cv
80.3183 70.136 80.4373 69.856 80.4373 69.499 cv
80.4373 69.149 80.3183 68.869 80.0943 68.659 cv
79.8633 68.449 79.5483 68.344 79.1563 68.344 cv
78.9743 68.344 78.7853 68.365 78.6033 68.407 cv
78.4213 68.449 78.2323 68.512 78.0433 68.596 cv
78.0433 66.034 li
f
82.4883 70.269 mo
83.2093 70.269 li
83.2093 71.137 li
82.4883 71.137 li
82.4883 70.269 li
f
84.8333 70.556 mo
85.9603 70.556 li
85.9603 66.664 li
84.7353 66.909 li
84.7353 66.279 li
85.9533 66.034 li
86.6463 66.034 li
86.6463 70.556 li
87.7733 70.556 li
87.7733 71.137 li
84.8333 71.137 li
84.8333 70.556 li
f
90.7273 68.309 mo
90.4193 68.309 90.1743 68.421 89.9923 68.631 cv
89.8103 68.841 89.7193 69.135 89.7193 69.499 cv
89.7193 69.87 89.8103 70.164 89.9923 70.374 cv
90.1743 70.584 90.4193 70.689 90.7273 70.689 cv
91.0353 70.689 91.2803 70.584 91.4623 70.374 cv
91.6443 70.164 91.7353 69.87 91.7353 69.499 cv
91.7353 69.135 91.6443 68.841 91.4623 68.631 cv
91.2803 68.421 91.0353 68.309 90.7273 68.309 cv
92.0993 66.146 mo
92.0993 66.776 li
91.9243 66.692 91.7493 66.629 91.5743 66.587 cv
91.3923 66.545 91.2173 66.524 91.0493 66.524 cv
90.5873 66.524 90.2373 66.678 89.9993 66.986 cv
89.7613 67.294 89.6213 67.763 89.5933 68.379 cv
89.7263 68.183 89.8943 68.029 90.0973 67.924 cv
90.3003 67.819 90.5243 67.763 90.7693 67.763 cv
91.2803 67.763 91.6863 67.924 91.9803 68.232 cv
92.2743 68.54 92.4283 68.967 92.4283 69.499 cv
92.4283 70.024 92.2673 70.444 91.9593 70.759 cv
91.6513 71.074 91.2383 71.228 90.7273 71.228 cv
90.1393 71.228 89.6843 71.004 89.3763 70.556 cv
89.0613 70.108 88.9073 69.45 88.9073 68.589 cv
88.9073 67.784 89.0963 67.14 89.4813 66.664 cv
89.8593 66.188 90.3773 65.943 91.0213 65.943 cv
91.1893 65.943 91.3643 65.964 91.5463 65.992 cv
91.7213 66.027 91.9033 66.076 92.0993 66.146 cv
f
163.885 88.227 mo
165.012 88.227 li
165.012 84.335 li
163.787 84.58 li
163.787 83.95 li
165.005 83.705 li
165.698 83.705 li
165.698 88.227 li
166.825 88.227 li
166.825 88.808 li
163.885 88.808 li
163.885 88.227 li
f
170.115 84.307 mo
168.372 87.03 li
170.115 87.03 li
170.115 84.307 li
169.933 83.705 mo
170.801 83.705 li
170.801 87.03 li
171.529 87.03 li
171.529 87.604 li
170.801 87.604 li
170.801 88.808 li
170.115 88.808 li
170.115 87.604 li
167.812 87.604 li
167.812 86.939 li
169.933 83.705 li
f
172.67 87.94 mo
173.391 87.94 li
173.391 88.808 li
172.67 88.808 li
172.67 87.94 li
f
176.373 84.16 mo
176.016 84.16 175.75 84.335 175.568 84.685 cv
175.386 85.035 175.302 85.56 175.302 86.26 cv
175.302 86.96 175.386 87.485 175.568 87.835 cv
175.75 88.185 176.016 88.36 176.373 88.36 cv
176.73 88.36 176.996 88.185 177.178 87.835 cv
177.353 87.485 177.444 86.96 177.444 86.26 cv
177.444 85.56 177.353 85.035 177.178 84.685 cv
176.996 84.335 176.73 84.16 176.373 84.16 cv
176.373 83.614 mo
176.94 83.614 177.374 83.845 177.682 84.293 cv
177.983 84.748 178.137 85.406 178.137 86.26 cv
178.137 87.121 177.983 87.779 177.682 88.227 cv
177.374 88.675 176.94 88.899 176.373 88.899 cv
175.799 88.899 175.358 88.675 175.057 88.227 cv
174.756 87.779 174.609 87.121 174.609 86.26 cv
174.609 85.406 174.756 84.748 175.057 84.293 cv
175.358 83.845 175.799 83.614 176.373 83.614 cv
f
179.943 88.227 mo
182.351 88.227 li
182.351 88.808 li
179.11 88.808 li
179.11 88.227 li
179.369 87.961 179.726 87.597 180.181 87.135 cv
180.629 86.68 180.916 86.386 181.035 86.253 cv
181.259 86.008 181.413 85.798 181.497 85.623 cv
181.581 85.455 181.63 85.28 181.63 85.112 cv
181.63 84.846 181.532 84.622 181.343 84.454 cv
181.154 84.286 180.909 84.195 180.601 84.195 cv
180.384 84.195 180.153 84.237 179.915 84.307 cv
179.677 84.384 179.418 84.496 179.145 84.65 cv
179.145 83.95 li
179.425 83.838 179.684 83.754 179.922 83.698 cv
180.16 83.642 180.384 83.614 180.587 83.614 cv
181.112 83.614 181.532 83.747 181.847 84.013 cv
182.162 84.279 182.323 84.629 182.323 85.07 cv
182.323 85.28 182.281 85.483 182.204 85.665 cv
182.127 85.854 181.987 86.078 181.777 86.33 cv
181.721 86.4 181.539 86.589 181.231 86.904 cv
180.923 87.219 180.496 87.66 179.943 88.227 cv
f
254.067 52.1099 mo
255.194 52.1099 li
255.194 48.2179 li
253.969 48.4629 li
253.969 47.8329 li
255.187 47.5879 li
255.88 47.5879 li
255.88 52.1099 li
257.007 52.1099 li
257.007 52.6909 li
254.067 52.6909 li
254.067 52.1099 li
f
259.961 49.8629 mo
259.653 49.8629 259.408 49.9749 259.226 50.1849 cv
259.044 50.3949 258.953 50.6889 258.953 51.0529 cv
258.953 51.4239 259.044 51.7179 259.226 51.9279 cv
259.408 52.1379 259.653 52.2429 259.961 52.2429 cv
260.269 52.2429 260.514 52.1379 260.696 51.9279 cv
260.878 51.7179 260.969 51.4239 260.969 51.0529 cv
260.969 50.6889 260.878 50.3949 260.696 50.1849 cv
260.514 49.9749 260.269 49.8629 259.961 49.8629 cv
261.333 47.6999 mo
261.333 48.3299 li
261.158 48.2459 260.983 48.1829 260.808 48.1409 cv
260.626 48.0989 260.451 48.0779 260.283 48.0779 cv
259.821 48.0779 259.471 48.2319 259.233 48.5399 cv
258.995 48.8479 258.855 49.3169 258.827 49.9329 cv
258.96 49.7369 259.128 49.5829 259.331 49.4779 cv
259.534 49.3729 259.758 49.3169 260.003 49.3169 cv
260.514 49.3169 260.92 49.4779 261.214 49.7859 cv
261.508 50.0939 261.662 50.5209 261.662 51.0529 cv
261.662 51.5779 261.501 51.9979 261.193 52.3129 cv
260.885 52.6279 260.472 52.7819 259.961 52.7819 cv
259.373 52.7819 258.918 52.5579 258.61 52.1099 cv
258.295 51.6619 258.141 51.0039 258.141 50.1429 cv
258.141 49.3379 258.33 48.6939 258.715 48.2179 cv
259.093 47.7419 259.611 47.4969 260.255 47.4969 cv
260.423 47.4969 260.598 47.5179 260.78 47.5459 cv
260.955 47.5809 261.137 47.6299 261.333 47.6999 cv
f
262.852 51.8229 mo
263.573 51.8229 li
263.573 52.6909 li
262.852 52.6909 li
262.852 51.8229 li
f
267.171 49.9399 mo
267.5 50.0099 267.759 50.1569 267.941 50.3809 cv
268.123 50.6049 268.221 50.8849 268.221 51.2069 cv
268.221 51.7109 268.046 52.1029 267.703 52.3759 cv
267.353 52.6489 266.863 52.7819 266.226 52.7819 cv
266.009 52.7819 265.785 52.7609 265.561 52.7189 cv
265.337 52.6839 265.099 52.6209 264.861 52.5369 cv
264.861 51.8719 li
265.05 51.9839 265.26 52.0679 265.491 52.1239 cv
265.715 52.1799 265.953 52.2079 266.205 52.2079 cv
266.639 52.2079 266.968 52.1239 267.192 51.9559 cv
267.416 51.7879 267.535 51.5359 267.535 51.2069 cv
267.535 50.9129 267.43 50.6749 267.22 50.5069 cv
267.01 50.3389 266.716 50.2479 266.338 50.2479 cv
265.743 50.2479 li
265.743 49.6809 li
266.366 49.6809 li
266.702 49.6809 266.961 49.6179 267.143 49.4779 cv
267.325 49.3449 267.416 49.1489 267.416 48.8899 cv
267.416 48.6309 267.318 48.4279 267.136 48.2879 cv
266.947 48.1479 266.681 48.0779 266.338 48.0779 cv
266.149 48.0779 265.946 48.0989 265.729 48.1409 cv
265.512 48.1829 265.274 48.2459 265.015 48.3299 cv
265.015 47.7139 li
265.274 47.6439 265.519 47.5879 265.75 47.5529 cv
265.974 47.5179 266.191 47.4969 266.401 47.4969 cv
266.919 47.4969 267.332 47.6159 267.64 47.8539 cv
267.948 48.0919 268.102 48.4139 268.102 48.8199 cv
268.102 49.0999 268.018 49.3379 267.857 49.5339 cv
267.696 49.7299 267.465 49.8699 267.171 49.9399 cv
f
269.537 47.5879 mo
272.246 47.5879 li
272.246 48.1689 li
270.167 48.1689 li
270.167 49.4219 li
270.265 49.3869 270.37 49.3589 270.468 49.3449 cv
270.566 49.3309 270.671 49.3169 270.769 49.3169 cv
271.336 49.3169 271.784 49.4779 272.12 49.7859 cv
272.456 50.1009 272.624 50.5209 272.624 51.0529 cv
272.624 51.6059 272.449 52.0329 272.106 52.3339 cv
271.763 52.6349 271.28 52.7819 270.664 52.7819 cv
270.447 52.7819 270.23 52.7609 270.006 52.7329 cv
269.782 52.6979 269.558 52.6489 269.32 52.5719 cv
269.32 51.8789 li
269.523 51.9909 269.733 52.0749 269.957 52.1309 cv
270.174 52.1869 270.405 52.2079 270.65 52.2079 cv
271.042 52.2079 271.357 52.1099 271.588 51.8999 cv
271.812 51.6899 271.931 51.4099 271.931 51.0529 cv
271.931 50.7029 271.812 50.4229 271.588 50.2129 cv
271.357 50.0029 271.042 49.8979 270.65 49.8979 cv
270.468 49.8979 270.279 49.9189 270.097 49.9609 cv
269.915 50.0029 269.726 50.0659 269.537 50.1499 cv
269.537 47.5879 li
f
344.249 93.6523 mo
345.376 93.6523 li
345.376 89.7603 li
344.151 90.0053 li
344.151 89.3753 li
345.369 89.1303 li
346.062 89.1303 li
346.062 93.6523 li
347.189 93.6523 li
347.189 94.2334 li
344.249 94.2334 li
344.249 93.6523 li
f
350.675 91.4823 mo
351.004 91.5524 351.263 91.6994 351.445 91.9234 cv
351.627 92.1474 351.725 92.4274 351.725 92.7494 cv
351.725 93.2533 351.55 93.6454 351.207 93.9183 cv
350.857 94.1914 350.367 94.3243 349.73 94.3243 cv
349.513 94.3243 349.289 94.3033 349.065 94.2613 cv
348.841 94.2263 348.603 94.1633 348.365 94.0793 cv
348.365 93.4143 li
348.554 93.5264 348.764 93.6103 348.995 93.6664 cv
349.219 93.7223 349.457 93.7504 349.709 93.7504 cv
350.143 93.7504 350.472 93.6664 350.696 93.4983 cv
350.92 93.3303 351.039 93.0784 351.039 92.7494 cv
351.039 92.4553 350.934 92.2173 350.724 92.0493 cv
350.514 91.8814 350.22 91.7903 349.842 91.7903 cv
349.247 91.7903 li
349.247 91.2233 li
349.87 91.2233 li
350.206 91.2233 350.465 91.1603 350.647 91.0203 cv
350.829 90.8874 350.92 90.6913 350.92 90.4323 cv
350.92 90.1734 350.822 89.9704 350.64 89.8304 cv
350.451 89.6904 350.185 89.6203 349.842 89.6203 cv
349.653 89.6203 349.45 89.6413 349.233 89.6833 cv
349.016 89.7253 348.778 89.7884 348.519 89.8724 cv
348.519 89.2563 li
348.778 89.1863 349.023 89.1303 349.254 89.0953 cv
349.478 89.0604 349.695 89.0394 349.905 89.0394 cv
350.423 89.0394 350.836 89.1584 351.144 89.3963 cv
351.452 89.6343 351.606 89.9564 351.606 90.3623 cv
351.606 90.6424 351.522 90.8803 351.361 91.0763 cv
351.2 91.2724 350.969 91.4124 350.675 91.4823 cv
f
353.034 93.3654 mo
353.755 93.3654 li
353.755 94.2334 li
353.034 94.2334 li
353.034 93.3654 li
f
356.821 91.4053 mo
356.513 91.4053 356.268 91.5174 356.086 91.7273 cv
355.904 91.9373 355.813 92.2313 355.813 92.5953 cv
355.813 92.9663 355.904 93.2604 356.086 93.4703 cv
356.268 93.6803 356.513 93.7854 356.821 93.7854 cv
357.129 93.7854 357.374 93.6803 357.556 93.4703 cv
357.738 93.2604 357.829 92.9663 357.829 92.5953 cv
357.829 92.2313 357.738 91.9373 357.556 91.7273 cv
357.374 91.5174 357.129 91.4053 356.821 91.4053 cv
358.193 89.2424 mo
358.193 89.8724 li
358.018 89.7884 357.843 89.7253 357.668 89.6833 cv
357.486 89.6413 357.311 89.6203 357.143 89.6203 cv
356.681 89.6203 356.331 89.7743 356.093 90.0823 cv
355.855 90.3903 355.715 90.8593 355.687 91.4754 cv
355.82 91.2793 355.988 91.1253 356.191 91.0203 cv
356.394 90.9153 356.618 90.8593 356.863 90.8593 cv
357.374 90.8593 357.78 91.0203 358.074 91.3283 cv
358.368 91.6364 358.522 92.0634 358.522 92.5953 cv
358.522 93.1204 358.361 93.5403 358.053 93.8553 cv
357.745 94.1703 357.332 94.3243 356.821 94.3243 cv
356.233 94.3243 355.778 94.1003 355.47 93.6523 cv
355.155 93.2044 355.001 92.5463 355.001 91.6853 cv
355.001 90.8803 355.19 90.2364 355.575 89.7603 cv
355.953 89.2844 356.471 89.0394 357.115 89.0394 cv
357.283 89.0394 357.458 89.0604 357.64 89.0883 cv
357.815 89.1234 357.997 89.1723 358.193 89.2424 cv
f
359.537 89.1303 mo
362.82 89.1303 li
362.82 89.4244 li
360.965 94.2334 li
360.244 94.2334 li
361.987 89.7114 li
359.537 89.7114 li
359.537 89.1303 li
f
93.9662 77.6864 mo
95.0932 77.6864 li
95.0932 73.7944 li
93.8682 74.0394 li
93.8682 73.4094 li
95.0862 73.1644 li
95.7792 73.1644 li
95.7792 77.6864 li
96.9062 77.6864 li
96.9062 78.2674 li
93.9662 78.2674 li
93.9662 77.6864 li
.883665 .769162 0 0 cmyk
f
100.196 73.7664 mo
98.4532 76.4894 li
100.196 76.4894 li
100.196 73.7664 li
100.014 73.1644 mo
100.882 73.1644 li
100.882 76.4894 li
101.61 76.4894 li
101.61 77.0634 li
100.882 77.0634 li
100.882 78.2674 li
100.196 78.2674 li
100.196 77.0634 li
97.8932 77.0634 li
97.8932 76.3984 li
100.014 73.1644 li
f
102.751 77.3994 mo
103.472 77.3994 li
103.472 78.2674 li
102.751 78.2674 li
102.751 77.3994 li
f
104.802 73.1644 mo
108.085 73.1644 li
108.085 73.4584 li
106.23 78.2674 li
105.509 78.2674 li
107.252 73.7454 li
104.802 73.7454 li
104.802 73.1644 li
f
181.921 93.0323 mo
183.048 93.0323 li
183.048 89.1403 li
181.823 89.3853 li
181.823 88.7553 li
183.041 88.5103 li
183.734 88.5103 li
183.734 93.0323 li
184.861 93.0323 li
184.861 93.6133 li
181.921 93.6133 li
181.921 93.0323 li
f
188.347 90.8623 mo
188.676 90.9323 188.935 91.0793 189.117 91.3033 cv
189.299 91.5273 189.397 91.8073 189.397 92.1293 cv
189.397 92.6333 189.222 93.0253 188.879 93.2983 cv
188.529 93.5713 188.039 93.7043 187.402 93.7043 cv
187.185 93.7043 186.961 93.6833 186.737 93.6413 cv
186.513 93.6063 186.275 93.5433 186.037 93.4593 cv
186.037 92.7943 li
186.226 92.9063 186.436 92.9903 186.667 93.0463 cv
186.891 93.1023 187.129 93.1303 187.381 93.1303 cv
187.815 93.1303 188.144 93.0463 188.368 92.8783 cv
188.592 92.7103 188.711 92.4583 188.711 92.1293 cv
188.711 91.8353 188.606 91.5973 188.396 91.4293 cv
188.186 91.2613 187.892 91.1703 187.514 91.1703 cv
186.919 91.1703 li
186.919 90.6033 li
187.542 90.6033 li
187.878 90.6033 188.137 90.5403 188.319 90.4003 cv
188.501 90.2673 188.592 90.0713 188.592 89.8123 cv
188.592 89.5533 188.494 89.3503 188.312 89.2103 cv
188.123 89.0703 187.857 89.0003 187.514 89.0003 cv
187.325 89.0003 187.122 89.0213 186.905 89.0633 cv
186.688 89.1053 186.45 89.1683 186.191 89.2523 cv
186.191 88.6363 li
186.45 88.5663 186.695 88.5103 186.926 88.4753 cv
187.15 88.4403 187.367 88.4193 187.577 88.4193 cv
188.095 88.4193 188.508 88.5383 188.816 88.7763 cv
189.124 89.0143 189.278 89.3363 189.278 89.7423 cv
189.278 90.0223 189.194 90.2603 189.033 90.4563 cv
188.872 90.6523 188.641 90.7923 188.347 90.8623 cv
f
190.706 92.7453 mo
191.427 92.7453 li
191.427 93.6133 li
190.706 93.6133 li
190.706 92.7453 li
f
192.757 88.5103 mo
196.04 88.5103 li
196.04 88.8043 li
194.185 93.6133 li
193.464 93.6133 li
195.207 89.0913 li
192.757 89.0913 li
192.757 88.5103 li
f
197.503 93.0323 mo
198.63 93.0323 li
198.63 89.1403 li
197.405 89.3853 li
197.405 88.7553 li
198.623 88.5103 li
199.316 88.5103 li
199.316 93.0323 li
200.443 93.0323 li
200.443 93.6133 li
197.503 93.6133 li
197.503 93.0323 li
f
272.103 75.5163 mo
273.23 75.5163 li
273.23 71.6243 li
272.005 71.8693 li
272.005 71.2393 li
273.223 70.9943 li
273.916 70.9943 li
273.916 75.5163 li
275.043 75.5163 li
275.043 76.0973 li
272.103 76.0973 li
272.103 75.5163 li
f
278.333 71.5963 mo
276.59 74.3193 li
278.333 74.3193 li
278.333 71.5963 li
278.151 70.9943 mo
279.019 70.9943 li
279.019 74.3193 li
279.747 74.3193 li
279.747 74.8933 li
279.019 74.8933 li
279.019 76.0973 li
278.333 76.0973 li
278.333 74.8933 li
276.03 74.8933 li
276.03 74.2283 li
278.151 70.9943 li
f
280.888 75.2293 mo
281.609 75.2293 li
281.609 76.0973 li
280.888 76.0973 li
280.888 75.2293 li
f
284.591 73.6753 mo
284.262 73.6753 284.003 73.7663 283.814 73.9413 cv
283.625 74.1163 283.534 74.3543 283.534 74.6623 cv
283.534 74.9703 283.625 75.2153 283.814 75.3903 cv
284.003 75.5653 284.262 75.6493 284.591 75.6493 cv
284.913 75.6493 285.172 75.5653 285.361 75.3833 cv
285.55 75.2083 285.648 74.9703 285.648 74.6623 cv
285.648 74.3543 285.55 74.1163 285.368 73.9413 cv
285.179 73.7663 284.92 73.6753 284.591 73.6753 cv
283.898 73.3813 mo
283.604 73.3113 283.373 73.1713 283.205 72.9683 cv
283.037 72.7653 282.96 72.5203 282.96 72.2263 cv
282.96 71.8203 283.1 71.4983 283.394 71.2603 cv
283.681 71.0223 284.08 70.9033 284.591 70.9033 cv
285.095 70.9033 285.494 71.0223 285.788 71.2603 cv
286.075 71.4983 286.222 71.8203 286.222 72.2263 cv
286.222 72.5203 286.138 72.7653 285.97 72.9683 cv
285.802 73.1713 285.578 73.3113 285.284 73.3813 cv
285.613 73.4583 285.872 73.6123 286.061 73.8363 cv
286.243 74.0603 286.341 74.3403 286.341 74.6623 cv
286.341 75.1593 286.187 75.5373 285.886 75.7963 cv
285.578 76.0623 285.151 76.1883 284.591 76.1883 cv
284.024 76.1883 283.59 76.0623 283.289 75.7963 cv
282.988 75.5373 282.841 75.1593 282.841 74.6623 cv
282.841 74.3403 282.932 74.0603 283.121 73.8363 cv
283.303 73.6123 283.562 73.4583 283.898 73.3813 cv
283.646 72.2893 mo
283.646 72.5553 283.723 72.7653 283.891 72.9123 cv
284.059 73.0593 284.29 73.1293 284.591 73.1293 cv
284.885 73.1293 285.116 73.0593 285.284 72.9123 cv
285.452 72.7653 285.536 72.5553 285.536 72.2893 cv
285.536 72.0233 285.452 71.8203 285.284 71.6733 cv
285.116 71.5263 284.885 71.4493 284.591 71.4493 cv
284.29 71.4493 284.059 71.5263 283.891 71.6733 cv
283.723 71.8203 283.646 72.0233 283.646 72.2893 cv
f
289.463 71.5963 mo
287.72 74.3193 li
289.463 74.3193 li
289.463 71.5963 li
289.281 70.9943 mo
290.149 70.9943 li
290.149 74.3193 li
290.877 74.3193 li
290.877 74.8933 li
290.149 74.8933 li
290.149 76.0973 li
289.463 76.0973 li
289.463 74.8933 li
287.16 74.8933 li
287.16 74.2283 li
289.281 70.9943 li
f
362.285 139.38 mo
363.412 139.38 li
363.412 135.488 li
362.187 135.733 li
362.187 135.103 li
363.405 134.858 li
364.098 134.858 li
364.098 139.38 li
365.225 139.38 li
365.225 139.961 li
362.285 139.961 li
362.285 139.38 li
f
368.095 135.313 mo
367.738 135.313 367.472 135.488 367.29 135.838 cv
367.108 136.188 367.024 136.713 367.024 137.413 cv
367.024 138.113 367.108 138.638 367.29 138.988 cv
367.472 139.338 367.738 139.513 368.095 139.513 cv
368.452 139.513 368.718 139.338 368.9 138.988 cv
369.075 138.638 369.166 138.113 369.166 137.413 cv
369.166 136.713 369.075 136.188 368.9 135.838 cv
368.718 135.488 368.452 135.313 368.095 135.313 cv
368.095 134.767 mo
368.662 134.767 369.096 134.998 369.404 135.446 cv
369.705 135.901 369.859 136.559 369.859 137.413 cv
369.859 138.274 369.705 138.932 369.404 139.38 cv
369.096 139.828 368.662 140.052 368.095 140.052 cv
367.521 140.052 367.08 139.828 366.779 139.38 cv
366.478 138.932 366.331 138.274 366.331 137.413 cv
366.331 136.559 366.478 135.901 366.779 135.446 cv
367.08 134.998 367.521 134.767 368.095 134.767 cv
f
371.07 139.093 mo
371.791 139.093 li
371.791 139.961 li
371.07 139.961 li
371.07 139.093 li
f
373.121 134.858 mo
376.404 134.858 li
376.404 135.152 li
374.549 139.961 li
373.828 139.961 li
375.571 135.439 li
373.121 135.439 li
373.121 134.858 li
f
378.343 139.38 mo
380.751 139.38 li
380.751 139.961 li
377.51 139.961 li
377.51 139.38 li
377.769 139.114 378.126 138.75 378.581 138.288 cv
379.029 137.833 379.316 137.539 379.435 137.406 cv
379.659 137.161 379.813 136.951 379.897 136.776 cv
379.981 136.608 380.03 136.433 380.03 136.265 cv
380.03 135.999 379.932 135.775 379.743 135.607 cv
379.554 135.439 379.309 135.348 379.001 135.348 cv
378.784 135.348 378.553 135.39 378.315 135.46 cv
378.077 135.537 377.818 135.649 377.545 135.803 cv
377.545 135.103 li
377.825 134.991 378.084 134.907 378.322 134.851 cv
378.56 134.795 378.784 134.767 378.987 134.767 cv
379.512 134.767 379.932 134.9 380.247 135.166 cv
380.562 135.432 380.723 135.782 380.723 136.223 cv
380.723 136.433 380.681 136.636 380.604 136.818 cv
380.527 137.007 380.387 137.231 380.177 137.483 cv
380.121 137.553 379.939 137.742 379.631 138.057 cv
379.323 138.372 378.896 138.813 378.343 139.38 cv
f
118.923 301.483 mo
118.566 301.483 118.3 301.658 118.118 302.008 cv
117.936 302.358 117.852 302.883 117.852 303.583 cv
117.852 304.283 117.936 304.808 118.118 305.158 cv
118.3 305.508 118.566 305.683 118.923 305.683 cv
119.28 305.683 119.546 305.508 119.728 305.158 cv
119.903 304.808 119.994 304.283 119.994 303.583 cv
119.994 302.883 119.903 302.358 119.728 302.008 cv
119.546 301.658 119.28 301.483 118.923 301.483 cv
118.923 300.937 mo
119.49 300.937 119.924 301.168 120.232 301.616 cv
120.533 302.071 120.687 302.729 120.687 303.583 cv
120.687 304.444 120.533 305.102 120.232 305.55 cv
119.924 305.998 119.49 306.222 118.923 306.222 cv
118.349 306.222 117.908 305.998 117.607 305.55 cv
117.306 305.102 117.159 304.444 117.159 303.583 cv
117.159 302.729 117.306 302.071 117.607 301.616 cv
117.908 301.168 118.349 300.937 118.923 300.937 cv
.873533 .244297 1 .131685 cmyk
f
199.958 129.459 mo
201.085 129.459 li
201.085 125.567 li
199.86 125.812 li
199.86 125.182 li
201.078 124.937 li
201.771 124.937 li
201.771 129.459 li
202.898 129.459 li
202.898 130.04 li
199.958 130.04 li
199.958 129.459 li
f
204.41 129.459 mo
205.537 129.459 li
205.537 125.567 li
204.312 125.812 li
204.312 125.182 li
205.53 124.937 li
206.223 124.937 li
206.223 129.459 li
207.35 129.459 li
207.35 130.04 li
204.41 130.04 li
204.41 129.459 li
f
208.743 129.172 mo
209.464 129.172 li
209.464 130.04 li
208.743 130.04 li
208.743 129.172 li
f
213.062 127.289 mo
213.391 127.359 213.65 127.506 213.832 127.73 cv
214.014 127.954 214.112 128.234 214.112 128.556 cv
214.112 129.06 213.937 129.452 213.594 129.725 cv
213.244 129.998 212.754 130.131 212.117 130.131 cv
211.9 130.131 211.676 130.11 211.452 130.068 cv
211.228 130.033 210.99 129.97 210.752 129.886 cv
210.752 129.221 li
210.941 129.333 211.151 129.417 211.382 129.473 cv
211.606 129.529 211.844 129.557 212.096 129.557 cv
212.53 129.557 212.859 129.473 213.083 129.305 cv
213.307 129.137 213.426 128.885 213.426 128.556 cv
213.426 128.262 213.321 128.024 213.111 127.856 cv
212.901 127.688 212.607 127.597 212.229 127.597 cv
211.634 127.597 li
211.634 127.03 li
212.257 127.03 li
212.593 127.03 212.852 126.967 213.034 126.827 cv
213.216 126.694 213.307 126.498 213.307 126.239 cv
213.307 125.98 213.209 125.777 213.027 125.637 cv
212.838 125.497 212.572 125.427 212.229 125.427 cv
212.04 125.427 211.837 125.448 211.62 125.49 cv
211.403 125.532 211.165 125.595 210.906 125.679 cv
210.906 125.063 li
211.165 124.993 211.41 124.937 211.641 124.902 cv
211.865 124.867 212.082 124.846 212.292 124.846 cv
212.81 124.846 213.223 124.965 213.531 125.203 cv
213.839 125.441 213.993 125.763 213.993 126.169 cv
213.993 126.449 213.909 126.687 213.748 126.883 cv
213.587 127.079 213.356 127.219 213.062 127.289 cv
f
216.982 127.212 mo
216.674 127.212 216.429 127.324 216.247 127.534 cv
216.065 127.744 215.974 128.038 215.974 128.402 cv
215.974 128.773 216.065 129.067 216.247 129.277 cv
216.429 129.487 216.674 129.592 216.982 129.592 cv
217.29 129.592 217.535 129.487 217.717 129.277 cv
217.899 129.067 217.99 128.773 217.99 128.402 cv
217.99 128.038 217.899 127.744 217.717 127.534 cv
217.535 127.324 217.29 127.212 216.982 127.212 cv
218.354 125.049 mo
218.354 125.679 li
218.179 125.595 218.004 125.532 217.829 125.49 cv
217.647 125.448 217.472 125.427 217.304 125.427 cv
216.842 125.427 216.492 125.581 216.254 125.889 cv
216.016 126.197 215.876 126.666 215.848 127.282 cv
215.981 127.086 216.149 126.932 216.352 126.827 cv
216.555 126.722 216.779 126.666 217.024 126.666 cv
217.535 126.666 217.941 126.827 218.235 127.135 cv
218.529 127.443 218.683 127.87 218.683 128.402 cv
218.683 128.927 218.522 129.347 218.214 129.662 cv
217.906 129.977 217.493 130.131 216.982 130.131 cv
216.394 130.131 215.939 129.907 215.631 129.459 cv
215.316 129.011 215.162 128.353 215.162 127.492 cv
215.162 126.687 215.351 126.043 215.736 125.567 cv
216.114 125.091 216.632 124.846 217.276 124.846 cv
217.444 124.846 217.619 124.867 217.801 124.895 cv
217.976 124.93 218.158 124.979 218.354 125.049 cv
f
290.14 114.424 mo
291.267 114.424 li
291.267 110.532 li
290.042 110.777 li
290.042 110.147 li
291.26 109.902 li
291.953 109.902 li
291.953 114.424 li
293.08 114.424 li
293.08 115.005 li
290.14 115.005 li
290.14 114.424 li
f
295.068 114.424 mo
297.476 114.424 li
297.476 115.005 li
294.235 115.005 li
294.235 114.424 li
294.494 114.158 294.851 113.794 295.306 113.332 cv
295.754 112.877 296.041 112.583 296.16 112.45 cv
296.384 112.205 296.538 111.995 296.622 111.82 cv
296.706 111.652 296.755 111.477 296.755 111.309 cv
296.755 111.043 296.657 110.819 296.468 110.651 cv
296.279 110.483 296.034 110.392 295.726 110.392 cv
295.509 110.392 295.278 110.434 295.04 110.504 cv
294.802 110.581 294.543 110.693 294.27 110.847 cv
294.27 110.147 li
294.55 110.035 294.809 109.951 295.047 109.895 cv
295.285 109.839 295.509 109.811 295.712 109.811 cv
296.237 109.811 296.657 109.944 296.972 110.21 cv
297.287 110.476 297.448 110.826 297.448 111.267 cv
297.448 111.477 297.406 111.68 297.329 111.862 cv
297.252 112.051 297.112 112.275 296.902 112.527 cv
296.846 112.597 296.664 112.786 296.356 113.101 cv
296.048 113.416 295.621 113.857 295.068 114.424 cv
f
298.925 114.137 mo
299.646 114.137 li
299.646 115.005 li
298.925 115.005 li
298.925 114.137 li
f
303.244 112.254 mo
303.573 112.324 303.832 112.471 304.014 112.695 cv
304.196 112.919 304.294 113.199 304.294 113.521 cv
304.294 114.025 304.119 114.417 303.776 114.69 cv
303.426 114.963 302.936 115.096 302.299 115.096 cv
302.082 115.096 301.858 115.075 301.634 115.033 cv
301.41 114.998 301.172 114.935 300.934 114.851 cv
300.934 114.186 li
301.123 114.298 301.333 114.382 301.564 114.438 cv
301.788 114.494 302.026 114.522 302.278 114.522 cv
302.712 114.522 303.041 114.438 303.265 114.27 cv
303.489 114.102 303.608 113.85 303.608 113.521 cv
303.608 113.227 303.503 112.989 303.293 112.821 cv
303.083 112.653 302.789 112.562 302.411 112.562 cv
301.816 112.562 li
301.816 111.995 li
302.439 111.995 li
302.775 111.995 303.034 111.932 303.216 111.792 cv
303.398 111.659 303.489 111.463 303.489 111.204 cv
303.489 110.945 303.391 110.742 303.209 110.602 cv
303.02 110.462 302.754 110.392 302.411 110.392 cv
302.222 110.392 302.019 110.413 301.802 110.455 cv
301.585 110.497 301.347 110.56 301.088 110.644 cv
301.088 110.028 li
301.347 109.958 301.592 109.902 301.823 109.867 cv
302.047 109.832 302.264 109.811 302.474 109.811 cv
302.992 109.811 303.405 109.93 303.713 110.168 cv
304.021 110.406 304.175 110.728 304.175 111.134 cv
304.175 111.414 304.091 111.652 303.93 111.848 cv
303.769 112.044 303.538 112.184 303.244 112.254 cv
f
307.696 112.254 mo
308.025 112.324 308.284 112.471 308.466 112.695 cv
308.648 112.919 308.746 113.199 308.746 113.521 cv
308.746 114.025 308.571 114.417 308.228 114.69 cv
307.878 114.963 307.388 115.096 306.751 115.096 cv
306.534 115.096 306.31 115.075 306.086 115.033 cv
305.862 114.998 305.624 114.935 305.386 114.851 cv
305.386 114.186 li
305.575 114.298 305.785 114.382 306.016 114.438 cv
306.24 114.494 306.478 114.522 306.73 114.522 cv
307.164 114.522 307.493 114.438 307.717 114.27 cv
307.941 114.102 308.06 113.85 308.06 113.521 cv
308.06 113.227 307.955 112.989 307.745 112.821 cv
307.535 112.653 307.241 112.562 306.863 112.562 cv
306.268 112.562 li
306.268 111.995 li
306.891 111.995 li
307.227 111.995 307.486 111.932 307.668 111.792 cv
307.85 111.659 307.941 111.463 307.941 111.204 cv
307.941 110.945 307.843 110.742 307.661 110.602 cv
307.472 110.462 307.206 110.392 306.863 110.392 cv
306.674 110.392 306.471 110.413 306.254 110.455 cv
306.037 110.497 305.799 110.56 305.54 110.644 cv
305.54 110.028 li
305.799 109.958 306.044 109.902 306.275 109.867 cv
306.499 109.832 306.716 109.811 306.926 109.811 cv
307.444 109.811 307.857 109.93 308.165 110.168 cv
308.473 110.406 308.627 110.728 308.627 111.134 cv
308.627 111.414 308.543 111.652 308.382 111.848 cv
308.221 112.044 307.99 112.184 307.696 112.254 cv
f
380.321 149.766 mo
381.448 149.766 li
381.448 145.874 li
380.223 146.119 li
380.223 145.489 li
381.441 145.244 li
382.134 145.244 li
382.134 149.766 li
383.261 149.766 li
383.261 150.347 li
380.321 150.347 li
380.321 149.766 li
f
386.131 145.699 mo
385.774 145.699 385.508 145.874 385.326 146.224 cv
385.144 146.574 385.06 147.099 385.06 147.799 cv
385.06 148.499 385.144 149.024 385.326 149.374 cv
385.508 149.724 385.774 149.899 386.131 149.899 cv
386.488 149.899 386.754 149.724 386.936 149.374 cv
387.111 149.024 387.202 148.499 387.202 147.799 cv
387.202 147.099 387.111 146.574 386.936 146.224 cv
386.754 145.874 386.488 145.699 386.131 145.699 cv
386.131 145.153 mo
386.698 145.153 387.132 145.384 387.44 145.832 cv
387.741 146.287 387.895 146.945 387.895 147.799 cv
387.895 148.66 387.741 149.318 387.44 149.766 cv
387.132 150.214 386.698 150.438 386.131 150.438 cv
385.557 150.438 385.116 150.214 384.815 149.766 cv
384.514 149.318 384.367 148.66 384.367 147.799 cv
384.367 146.945 384.514 146.287 384.815 145.832 cv
385.116 145.384 385.557 145.153 386.131 145.153 cv
f
389.106 149.479 mo
389.827 149.479 li
389.827 150.347 li
389.106 150.347 li
389.106 149.479 li
f
392.809 145.699 mo
392.452 145.699 392.186 145.874 392.004 146.224 cv
391.822 146.574 391.738 147.099 391.738 147.799 cv
391.738 148.499 391.822 149.024 392.004 149.374 cv
392.186 149.724 392.452 149.899 392.809 149.899 cv
393.166 149.899 393.432 149.724 393.614 149.374 cv
393.789 149.024 393.88 148.499 393.88 147.799 cv
393.88 147.099 393.789 146.574 393.614 146.224 cv
393.432 145.874 393.166 145.699 392.809 145.699 cv
392.809 145.153 mo
393.376 145.153 393.81 145.384 394.118 145.832 cv
394.419 146.287 394.573 146.945 394.573 147.799 cv
394.573 148.66 394.419 149.318 394.118 149.766 cv
393.81 150.214 393.376 150.438 392.809 150.438 cv
392.235 150.438 391.794 150.214 391.493 149.766 cv
391.192 149.318 391.045 148.66 391.045 147.799 cv
391.045 146.945 391.192 146.287 391.493 145.832 cv
391.794 145.384 392.235 145.153 392.809 145.153 cv
f
395.791 145.244 mo
398.5 145.244 li
398.5 145.825 li
396.421 145.825 li
396.421 147.078 li
396.519 147.043 396.624 147.015 396.722 147.001 cv
396.82 146.987 396.925 146.973 397.023 146.973 cv
397.59 146.973 398.038 147.134 398.374 147.442 cv
398.71 147.757 398.878 148.177 398.878 148.709 cv
398.878 149.262 398.703 149.689 398.36 149.99 cv
398.017 150.291 397.534 150.438 396.918 150.438 cv
396.701 150.438 396.484 150.417 396.26 150.389 cv
396.036 150.354 395.812 150.305 395.574 150.228 cv
395.574 149.535 li
395.777 149.647 395.987 149.731 396.211 149.787 cv
396.428 149.843 396.659 149.864 396.904 149.864 cv
397.296 149.864 397.611 149.766 397.842 149.556 cv
398.066 149.346 398.185 149.066 398.185 148.709 cv
398.185 148.359 398.066 148.079 397.842 147.869 cv
397.611 147.659 397.296 147.554 396.904 147.554 cv
396.722 147.554 396.533 147.575 396.351 147.617 cv
396.169 147.659 395.98 147.722 395.791 147.806 cv
395.791 145.244 li
f
407.72 94.6439 mo
333.798 94.6439 li
333.208 94.6421 332.861 94.4998 332.652 94.2904 cv
332.442 94.0811 332.3 93.7338 332.298 93.1439 cv
332.298 48.472 li
332.3 47.8822 332.442 47.5347 332.652 47.3256 cv
332.861 47.1161 333.208 46.9738 333.798 46.972 cv
407.72 46.972 li
408.31 46.9738 408.657 47.1161 408.866 47.3256 cv
409.076 47.5347 409.218 47.8822 409.22 48.472 cv
409.22 93.1439 li
409.218 93.7338 409.076 94.0811 408.866 94.2904 cv
408.657 94.4998 408.31 94.6421 407.72 94.6439 cv
357.115 89.0394 mo
356.471 89.0394 355.953 89.2844 355.575 89.7603 cv
355.19 90.2364 355.001 90.8803 355.001 91.6853 cv
355.001 92.5463 355.155 93.2044 355.47 93.6523 cv
355.778 94.1003 356.233 94.3243 356.821 94.3243 cv
357.332 94.3243 357.745 94.1703 358.053 93.8553 cv
358.361 93.5403 358.522 93.1204 358.522 92.5953 cv
358.522 92.0634 358.368 91.6364 358.074 91.3283 cv
357.78 91.0203 357.374 90.8593 356.863 90.8593 cv
356.618 90.8593 356.394 90.9153 356.191 91.0203 cv
355.988 91.1253 355.82 91.2793 355.687 91.4754 cv
355.715 90.8593 355.855 90.3903 356.093 90.0823 cv
356.331 89.7743 356.681 89.6203 357.143 89.6203 cv
357.311 89.6203 357.486 89.6413 357.668 89.6833 cv
357.843 89.7253 358.018 89.7884 358.193 89.8724 cv
358.193 89.2424 li
357.997 89.1723 357.815 89.1234 357.64 89.0883 cv
357.458 89.0604 357.283 89.0394 357.115 89.0394 cv
348.365 93.4143 mo
348.365 94.0793 li
348.603 94.1633 348.841 94.2263 349.065 94.2613 cv
349.289 94.3033 349.513 94.3243 349.73 94.3243 cv
350.367 94.3243 350.857 94.1914 351.207 93.9183 cv
351.55 93.6454 351.725 93.2533 351.725 92.7494 cv
351.725 92.4274 351.627 92.1474 351.445 91.9234 cv
351.263 91.6994 351.004 91.5524 350.675 91.4823 cv
350.969 91.4124 351.2 91.2724 351.361 91.0763 cv
351.522 90.8803 351.606 90.6424 351.606 90.3623 cv
351.606 89.9564 351.452 89.6343 351.144 89.3963 cv
350.92 89.2231 350.64 89.1129 350.304 89.0658 cv
355.798 89.0658 li
355.798 82.0658 li
335.798 82.0658 li
335.798 89.0658 li
349.471 89.0658 li
349.399 89.074 349.327 89.0839 349.254 89.0953 cv
349.023 89.1303 348.778 89.1863 348.519 89.2563 cv
348.519 89.8724 li
348.778 89.7884 349.016 89.7253 349.233 89.6833 cv
349.45 89.6413 349.653 89.6203 349.842 89.6203 cv
350.185 89.6203 350.451 89.6904 350.64 89.8304 cv
350.822 89.9704 350.92 90.1734 350.92 90.4323 cv
350.92 90.6913 350.829 90.8874 350.647 91.0203 cv
350.465 91.1603 350.206 91.2233 349.87 91.2233 cv
349.247 91.2233 li
349.247 91.7903 li
349.842 91.7903 li
350.22 91.7903 350.514 91.8814 350.724 92.0493 cv
350.934 92.2173 351.039 92.4553 351.039 92.7494 cv
351.039 93.0784 350.92 93.3303 350.696 93.4983 cv
350.472 93.6664 350.143 93.7504 349.709 93.7504 cv
349.457 93.7504 349.219 93.7223 348.995 93.6664 cv
348.764 93.6103 348.554 93.5264 348.365 93.4143 cv
359.537 89.1303 mo
359.537 89.7114 li
361.987 89.7114 li
360.244 94.2334 li
360.965 94.2334 li
362.82 89.4244 li
362.82 89.1303 li
359.537 89.1303 li
353.034 93.3654 mo
353.034 94.2334 li
353.755 94.2334 li
353.755 93.3654 li
353.034 93.3654 li
344.249 93.6523 mo
344.249 94.2334 li
347.189 94.2334 li
347.189 93.6523 li
346.062 93.6523 li
346.062 89.1303 li
345.369 89.1303 li
344.151 89.3753 li
344.151 90.0053 li
345.376 89.7603 li
345.376 93.6523 li
344.249 93.6523 li
335.798 66.472 mo
335.798 73.4721 li
355.798 73.4721 li
355.798 66.472 li
335.798 66.472 li
335.798 51.3939 mo
335.798 58.3939 li
355.798 58.3939 li
355.798 51.3939 li
335.798 51.3939 li
0 0 0 0 cmyk
f
347.189 94.2334 mo
344.249 94.2334 li
344.249 93.6523 li
345.376 93.6523 li
345.376 89.7603 li
344.151 90.0053 li
344.151 89.3753 li
345.369 89.1303 li
346.062 89.1303 li
346.062 93.6523 li
347.189 93.6523 li
347.189 94.2334 li
0 .241001 .107607 0 cmyk
f
356.821 93.7854 mo
356.513 93.7854 356.268 93.6803 356.086 93.4703 cv
355.904 93.2604 355.813 92.9663 355.813 92.5953 cv
355.813 92.2313 355.904 91.9373 356.086 91.7273 cv
356.268 91.5174 356.513 91.4053 356.821 91.4053 cv
357.129 91.4053 357.374 91.5174 357.556 91.7273 cv
357.738 91.9373 357.829 92.2313 357.829 92.5953 cv
357.829 92.9663 357.738 93.2604 357.556 93.4703 cv
357.374 93.6803 357.129 93.7854 356.821 93.7854 cv
0 0 0 0 cmyk
f
349.73 94.3243 mo
349.513 94.3243 349.289 94.3033 349.065 94.2613 cv
348.841 94.2263 348.603 94.1633 348.365 94.0793 cv
348.365 93.4143 li
348.554 93.5264 348.764 93.6103 348.995 93.6664 cv
349.219 93.7223 349.457 93.7504 349.709 93.7504 cv
350.143 93.7504 350.472 93.6664 350.696 93.4983 cv
350.92 93.3303 351.039 93.0784 351.039 92.7494 cv
351.039 92.4553 350.934 92.2173 350.724 92.0493 cv
350.514 91.8814 350.22 91.7903 349.842 91.7903 cv
349.247 91.7903 li
349.247 91.2233 li
349.87 91.2233 li
350.206 91.2233 350.465 91.1603 350.647 91.0203 cv
350.829 90.8874 350.92 90.6913 350.92 90.4323 cv
350.92 90.1734 350.822 89.9704 350.64 89.8304 cv
350.451 89.6904 350.185 89.6203 349.842 89.6203 cv
349.653 89.6203 349.45 89.6413 349.233 89.6833 cv
349.016 89.7253 348.778 89.7884 348.519 89.8724 cv
348.519 89.2563 li
348.778 89.1863 349.023 89.1303 349.254 89.0953 cv
349.327 89.0839 349.399 89.074 349.471 89.0658 cv
350.304 89.0658 li
350.64 89.1129 350.92 89.2231 351.144 89.3963 cv
351.452 89.6343 351.606 89.9564 351.606 90.3623 cv
351.606 90.6424 351.522 90.8803 351.361 91.0763 cv
351.2 91.2724 350.969 91.4124 350.675 91.4823 cv
351.004 91.5524 351.263 91.6994 351.445 91.9234 cv
351.627 92.1474 351.725 92.4274 351.725 92.7494 cv
351.725 93.2533 351.55 93.6454 351.207 93.9183 cv
350.857 94.1914 350.367 94.3243 349.73 94.3243 cv
0 .241001 .107607 0 cmyk
f
353.755 94.2334 mo
353.034 94.2334 li
353.034 93.3654 li
353.755 93.3654 li
353.755 94.2334 li
f
356.821 94.3243 mo
356.233 94.3243 355.778 94.1003 355.47 93.6523 cv
355.155 93.2044 355.001 92.5463 355.001 91.6853 cv
355.001 90.8803 355.19 90.2364 355.575 89.7603 cv
355.953 89.2844 356.471 89.0394 357.115 89.0394 cv
357.283 89.0394 357.458 89.0604 357.64 89.0883 cv
357.815 89.1234 357.997 89.1723 358.193 89.2424 cv
358.193 89.8724 li
358.018 89.7884 357.843 89.7253 357.668 89.6833 cv
357.486 89.6413 357.311 89.6203 357.143 89.6203 cv
356.681 89.6203 356.331 89.7743 356.093 90.0823 cv
355.855 90.3903 355.715 90.8593 355.687 91.4754 cv
355.82 91.2793 355.988 91.1253 356.191 91.0203 cv
356.394 90.9153 356.618 90.8593 356.863 90.8593 cv
357.374 90.8593 357.78 91.0203 358.074 91.3283 cv
358.368 91.6364 358.522 92.0634 358.522 92.5953 cv
358.522 93.1204 358.361 93.5403 358.053 93.8553 cv
357.745 94.1703 357.332 94.3243 356.821 94.3243 cv
356.821 91.4053 mo
356.513 91.4053 356.268 91.5174 356.086 91.7273 cv
355.904 91.9373 355.813 92.2313 355.813 92.5953 cv
355.813 92.9663 355.904 93.2604 356.086 93.4703 cv
356.268 93.6803 356.513 93.7854 356.821 93.7854 cv
357.129 93.7854 357.374 93.6803 357.556 93.4703 cv
357.738 93.2604 357.829 92.9663 357.829 92.5953 cv
357.829 92.2313 357.738 91.9373 357.556 91.7273 cv
357.374 91.5174 357.129 91.4053 356.821 91.4053 cv
f
360.965 94.2334 mo
360.244 94.2334 li
361.987 89.7114 li
359.537 89.7114 li
359.537 89.1303 li
362.82 89.1303 li
362.82 89.4244 li
360.965 94.2334 li
f
407.731 95.6439 mo
407.727 95.6439 407.724 95.6439 407.72 95.6439 cv
333.798 95.6439 li
333.795 95.6439 333.791 95.6439 333.788 95.6439 cv
333.048 95.6439 332.4 95.4524 331.945 94.9975 cv
331.487 94.5399 331.296 93.8874 331.298 93.1439 cv
331.298 48.472 li
331.296 47.7286 331.487 47.0759 331.945 46.6185 cv
332.4 46.1633 333.049 45.972 333.788 45.972 cv
333.792 45.972 333.795 45.972 333.798 45.972 cv
407.72 45.972 li
407.723 45.972 407.727 45.972 407.73 45.972 cv
408.469 45.972 409.118 46.1633 409.574 46.6185 cv
410.031 47.0759 410.222 47.7286 410.22 48.472 cv
410.22 93.1439 li
410.222 93.8874 410.031 94.5399 409.574 94.9975 cv
409.118 95.4524 408.47 95.6439 407.731 95.6439 cv
333.798 94.6439 mo
407.72 94.6439 li
408.31 94.6421 408.657 94.4998 408.866 94.2904 cv
409.076 94.0811 409.218 93.7338 409.22 93.1439 cv
409.22 48.472 li
409.218 47.8822 409.076 47.5347 408.866 47.3256 cv
408.657 47.1161 408.31 46.9738 407.72 46.972 cv
333.798 46.972 li
333.208 46.9738 332.861 47.1161 332.652 47.3256 cv
332.442 47.5347 332.3 47.8822 332.298 48.472 cv
332.298 93.1439 li
332.3 93.7338 332.442 94.0811 332.652 94.2904 cv
332.861 94.4998 333.208 94.6421 333.798 94.6439 cv
333.798 94.6439 li
.15433 .116732 .12192 0 cmyk
f
355.798 58.3939 mo
335.798 58.3939 li
335.798 51.3939 li
355.798 51.3939 li
355.798 58.3939 li
0 .638514 .385901 0 cmyk
f
367.478 50.4008 mo
368.598 50.4008 li
369.948 57.6908 li
368.918 57.6908 li
368.618 55.8208 li
365.338 55.8208 li
364.308 57.6908 li
363.278 57.6908 li
367.478 50.4008 li
367.838 51.3708 mo
365.788 55.0008 li
368.468 55.0008 li
367.838 51.3708 li
1 /0 /CSD get_res sepcs
1 sep
f
373.481 56.5804 mo
373.81 56.6504 374.069 56.7974 374.251 57.0214 cv
374.433 57.2454 374.531 57.5254 374.531 57.8474 cv
374.531 58.3514 374.356 58.7434 374.013 59.0164 cv
373.663 59.2894 373.173 59.4224 372.536 59.4224 cv
372.319 59.4224 372.095 59.4014 371.871 59.3594 cv
371.647 59.3244 371.409 59.2614 371.171 59.1774 cv
371.171 58.5124 li
371.36 58.6244 371.57 58.7084 371.801 58.7644 cv
372.025 58.8204 372.263 58.8484 372.515 58.8484 cv
372.949 58.8484 373.278 58.7644 373.502 58.5964 cv
373.726 58.4284 373.845 58.1764 373.845 57.8474 cv
373.845 57.5534 373.74 57.3154 373.53 57.1474 cv
373.32 56.9794 373.026 56.8884 372.648 56.8884 cv
372.053 56.8884 li
372.053 56.3214 li
372.676 56.3214 li
373.012 56.3214 373.271 56.2584 373.453 56.1184 cv
373.635 55.9854 373.726 55.7894 373.726 55.5304 cv
373.726 55.2714 373.628 55.0684 373.446 54.9284 cv
373.257 54.7884 372.991 54.7184 372.648 54.7184 cv
372.459 54.7184 372.256 54.7394 372.039 54.7814 cv
371.822 54.8234 371.584 54.8864 371.325 54.9704 cv
371.325 54.3544 li
371.584 54.2844 371.829 54.2284 372.06 54.1934 cv
372.284 54.1584 372.501 54.1374 372.711 54.1374 cv
373.229 54.1374 373.642 54.2564 373.95 54.4944 cv
374.258 54.7324 374.412 55.0544 374.412 55.4604 cv
374.412 55.7404 374.328 55.9784 374.167 56.1744 cv
374.006 56.3704 373.775 56.5104 373.481 56.5804 cv
f
355.798 73.4721 mo
335.798 73.4721 li
335.798 66.472 li
355.798 66.472 li
355.798 73.4721 li
.578576 .527581 0 0 cmyk
f
365.768 66.5858 mo
365.768 72.2558 li
366.958 72.2558 li
367.958 72.2558 368.698 72.0358 369.168 71.5758 cv
369.628 71.1158 369.868 70.3958 369.868 69.4158 cv
369.868 68.4358 369.628 67.7258 369.168 67.2658 cv
368.698 66.8158 367.958 66.5858 366.958 66.5858 cv
365.768 66.5858 li
364.778 65.7758 mo
366.808 65.7758 li
368.218 65.7758 369.258 66.0758 369.918 66.6558 cv
370.578 67.2458 370.908 68.1658 370.908 69.4158 cv
370.908 70.6758 370.568 71.5958 369.908 72.1858 cv
369.248 72.7758 368.208 73.0658 366.808 73.0658 cv
364.778 73.0658 li
364.778 65.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
377.938 66.3358 mo
377.938 67.3758 li
377.598 67.0758 377.248 66.8458 376.868 66.6858 cv
376.488 66.5358 376.098 66.4558 375.678 66.4558 cv
374.838 66.4558 374.198 66.7158 373.758 67.2258 cv
373.318 67.7358 373.098 68.4658 373.098 69.4258 cv
373.098 70.3858 373.318 71.1258 373.758 71.6358 cv
374.198 72.1458 374.838 72.3958 375.678 72.3958 cv
376.098 72.3958 376.488 72.3258 376.868 72.1658 cv
377.248 72.0158 377.598 71.7858 377.938 71.4758 cv
377.938 72.5058 li
377.588 72.7458 377.218 72.9158 376.838 73.0258 cv
376.458 73.1358 376.048 73.1958 375.618 73.1958 cv
374.518 73.1958 373.648 72.8658 373.008 72.1958 cv
372.368 71.5258 372.058 70.6058 372.058 69.4258 cv
372.058 68.2558 372.368 67.3358 373.008 66.6558 cv
373.648 65.9858 374.518 65.6458 375.618 65.6458 cv
376.058 65.6458 376.468 65.7058 376.848 65.8158 cv
377.228 65.9358 377.598 66.1058 377.938 66.3358 cv
f
384.101 70.1058 mo
384.101 70.5458 li
379.971 70.5458 li
380.011 71.1658 380.191 71.6458 380.531 71.9658 cv
380.861 72.2858 381.321 72.4458 381.921 72.4458 cv
382.261 72.4458 382.601 72.4058 382.921 72.3258 cv
383.241 72.2458 383.571 72.1158 383.891 71.9358 cv
383.891 72.7858 li
383.571 72.9258 383.241 73.0358 382.901 73.0958 cv
382.561 73.1558 382.211 73.1958 381.871 73.1958 cv
380.991 73.1958 380.301 72.9458 379.791 72.4458 cv
379.281 71.9458 379.031 71.2558 379.031 70.3858 cv
379.031 69.4958 379.271 68.7858 379.751 68.2558 cv
380.231 67.7358 380.891 67.4658 381.711 67.4658 cv
382.451 67.4658 383.031 67.7058 383.461 68.1758 cv
383.881 68.6558 384.101 69.2958 384.101 70.1058 cv
383.201 69.8458 mo
383.191 69.3558 383.051 68.9658 382.791 68.6658 cv
382.521 68.3758 382.161 68.2258 381.721 68.2258 cv
381.221 68.2258 380.821 68.3758 380.521 68.6558 cv
380.221 68.9358 380.041 69.3358 380.001 69.8458 cv
383.201 69.8458 li
f
385.573 65.4658 mo
386.473 65.4658 li
386.473 73.0658 li
385.573 73.0658 li
385.573 65.4658 li
f
388.351 65.4658 mo
389.251 65.4658 li
389.251 73.0658 li
388.351 73.0658 li
388.351 65.4658 li
f
391.153 74.1254 mo
392.28 74.1254 li
392.28 70.2334 li
391.055 70.4784 li
391.055 69.8484 li
392.273 69.6034 li
392.966 69.6034 li
392.966 74.1254 li
394.093 74.1254 li
394.093 74.7064 li
391.153 74.7064 li
391.153 74.1254 li
f
395.558 73.8384 mo
396.279 73.8384 li
396.279 74.4264 li
395.719 75.5114 li
395.278 75.5114 li
395.558 74.4264 li
395.558 73.8384 li
f
401.17 71.9554 mo
401.499 72.0254 401.758 72.1724 401.94 72.3964 cv
402.122 72.6204 402.22 72.9004 402.22 73.2224 cv
402.22 73.7264 402.045 74.1184 401.702 74.3914 cv
401.352 74.6644 400.862 74.7974 400.225 74.7974 cv
400.008 74.7974 399.784 74.7764 399.56 74.7344 cv
399.336 74.6994 399.098 74.6364 398.86 74.5524 cv
398.86 73.8874 li
399.049 73.9994 399.259 74.0834 399.49 74.1394 cv
399.714 74.1954 399.952 74.2234 400.204 74.2234 cv
400.638 74.2234 400.967 74.1394 401.191 73.9714 cv
401.415 73.8034 401.534 73.5514 401.534 73.2224 cv
401.534 72.9284 401.429 72.6904 401.219 72.5224 cv
401.009 72.3544 400.715 72.2634 400.337 72.2634 cv
399.742 72.2634 li
399.742 71.6964 li
400.365 71.6964 li
400.701 71.6964 400.96 71.6334 401.142 71.4934 cv
401.324 71.3604 401.415 71.1644 401.415 70.9054 cv
401.415 70.6464 401.317 70.4434 401.135 70.3034 cv
400.946 70.1634 400.68 70.0934 400.337 70.0934 cv
400.148 70.0934 399.945 70.1144 399.728 70.1564 cv
399.511 70.1984 399.273 70.2614 399.014 70.3454 cv
399.014 69.7294 li
399.273 69.6594 399.518 69.6034 399.749 69.5684 cv
399.973 69.5334 400.19 69.5124 400.4 69.5124 cv
400.918 69.5124 401.331 69.6314 401.639 69.8694 cv
401.947 70.1074 402.101 70.4294 402.101 70.8354 cv
402.101 71.1154 402.017 71.3534 401.856 71.5494 cv
401.695 71.7454 401.464 71.8854 401.17 71.9554 cv
f
355.798 89.0658 mo
350.304 89.0658 li
350.179 89.0482 350.046 89.0394 349.905 89.0394 cv
349.763 89.0394 349.619 89.0489 349.471 89.0658 cv
335.798 89.0658 li
335.798 82.0658 li
355.798 82.0658 li
355.798 89.0658 li
.532036 .0339361 .660609 0 cmyk
f
350.304 89.0658 mo
349.471 89.0658 li
349.619 89.0489 349.763 89.0394 349.905 89.0394 cv
350.046 89.0394 350.179 89.0482 350.304 89.0658 cv
.548028 .183871 .75671 .0154726 cmyk
f
364.778 81.7758 mo
368.968 81.7758 li
368.968 82.6058 li
365.768 82.6058 li
365.768 84.7558 li
368.658 84.7558 li
368.658 85.5858 li
365.768 85.5858 li
365.768 89.0658 li
364.778 89.0658 li
364.778 81.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
372.978 86.3158 mo
372.248 86.3158 371.748 86.4058 371.468 86.5658 cv
371.188 86.7358 371.048 87.0158 371.048 87.4158 cv
371.048 87.7358 371.148 87.9958 371.358 88.1758 cv
371.568 88.3658 371.858 88.4558 372.218 88.4558 cv
372.718 88.4558 373.118 88.2858 373.418 87.9258 cv
373.718 87.5758 373.868 87.1058 373.868 86.5158 cv
373.868 86.3158 li
372.978 86.3158 li
374.768 85.9458 mo
374.768 89.0658 li
373.868 89.0658 li
373.868 88.2358 li
373.658 88.5758 373.398 88.8158 373.098 88.9658 cv
372.798 89.1158 372.418 89.1958 371.978 89.1958 cv
371.418 89.1958 370.968 89.0458 370.638 88.7358 cv
370.308 88.4258 370.148 88.0058 370.148 87.4758 cv
370.148 86.8658 370.348 86.4058 370.768 86.0858 cv
371.178 85.7758 371.788 85.6158 372.608 85.6158 cv
373.868 85.6158 li
373.868 85.5258 li
373.868 85.1158 373.728 84.7958 373.458 84.5658 cv
373.188 84.3458 372.808 84.2258 372.318 84.2258 cv
371.998 84.2258 371.698 84.2658 371.398 84.3458 cv
371.098 84.4258 370.818 84.5358 370.548 84.6758 cv
370.548 83.8458 li
370.868 83.7258 371.188 83.6258 371.498 83.5658 cv
371.808 83.5058 372.108 83.4658 372.408 83.4658 cv
373.198 83.4658 373.788 83.6758 374.178 84.0858 cv
374.568 84.4958 374.768 85.1158 374.768 85.9458 cv
f
377.508 82.0458 mo
377.508 83.5958 li
379.358 83.5958 li
379.358 84.2958 li
377.508 84.2958 li
377.508 87.2658 li
377.508 87.7158 377.568 88.0058 377.688 88.1258 cv
377.808 88.2558 378.058 88.3158 378.438 88.3158 cv
379.358 88.3158 li
379.358 89.0658 li
378.438 89.0658 li
377.738 89.0658 377.258 88.9358 376.998 88.6758 cv
376.738 88.4158 376.608 87.9458 376.608 87.2658 cv
376.608 84.2958 li
375.948 84.2958 li
375.948 83.5958 li
376.608 83.5958 li
376.608 82.0458 li
377.508 82.0458 li
f
380.088 85.9258 mo
382.718 85.9258 li
382.718 86.7258 li
380.088 86.7258 li
380.088 85.9258 li
f
383.188 81.7758 mo
389.348 81.7758 li
389.348 82.6058 li
386.758 82.6058 li
386.758 89.0658 li
385.768 89.0658 li
385.768 82.6058 li
383.188 82.6058 li
383.188 81.7758 li
f
393.428 84.4358 mo
393.328 84.3758 393.218 84.3358 393.098 84.3058 cv
392.978 84.2858 392.848 84.2658 392.708 84.2658 cv
392.198 84.2658 391.808 84.4358 391.538 84.7658 cv
391.258 85.0958 391.128 85.5658 391.128 86.1858 cv
391.128 89.0658 li
390.228 89.0658 li
390.228 83.5958 li
391.128 83.5958 li
391.128 84.4458 li
391.308 84.1158 391.558 83.8658 391.858 83.7058 cv
392.158 83.5458 392.528 83.4658 392.968 83.4658 cv
393.178 83.4758 li
393.248 83.4858 393.328 83.4958 393.428 83.5158 cv
393.428 84.4358 li
f
399.048 86.1058 mo
399.048 86.5458 li
394.918 86.5458 li
394.958 87.1658 395.138 87.6458 395.478 87.9658 cv
395.808 88.2858 396.268 88.4458 396.868 88.4458 cv
397.208 88.4458 397.548 88.4058 397.868 88.3258 cv
398.188 88.2458 398.518 88.1158 398.838 87.9358 cv
398.838 88.7858 li
398.518 88.9258 398.188 89.0358 397.848 89.0958 cv
397.508 89.1558 397.158 89.1958 396.818 89.1958 cv
395.938 89.1958 395.248 88.9458 394.738 88.4458 cv
394.228 87.9458 393.978 87.2558 393.978 86.3858 cv
393.978 85.4958 394.218 84.7858 394.698 84.2558 cv
395.178 83.7358 395.838 83.4658 396.658 83.4658 cv
397.398 83.4658 397.978 83.7058 398.408 84.1758 cv
398.828 84.6558 399.048 85.2958 399.048 86.1058 cv
398.148 85.8458 mo
398.138 85.3558 397.998 84.9658 397.738 84.6658 cv
397.468 84.3758 397.108 84.2258 396.668 84.2258 cv
396.168 84.2258 395.768 84.3758 395.468 84.6558 cv
395.168 84.9358 394.988 85.3358 394.948 85.8458 cv
398.148 85.8458 li
f
405.198 86.1058 mo
405.198 86.5458 li
401.068 86.5458 li
401.108 87.1658 401.288 87.6458 401.628 87.9658 cv
401.958 88.2858 402.418 88.4458 403.018 88.4458 cv
403.358 88.4458 403.698 88.4058 404.018 88.3258 cv
404.338 88.2458 404.668 88.1158 404.988 87.9358 cv
404.988 88.7858 li
404.668 88.9258 404.338 89.0358 403.998 89.0958 cv
403.658 89.1558 403.308 89.1958 402.968 89.1958 cv
402.088 89.1958 401.398 88.9458 400.888 88.4458 cv
400.378 87.9458 400.128 87.2558 400.128 86.3858 cv
400.128 85.4958 400.368 84.7858 400.848 84.2558 cv
401.328 83.7358 401.988 83.4658 402.808 83.4658 cv
403.548 83.4658 404.128 83.7058 404.558 84.1758 cv
404.978 84.6558 405.198 85.2958 405.198 86.1058 cv
404.298 85.8458 mo
404.288 85.3558 404.148 84.9658 403.888 84.6658 cv
403.618 84.3758 403.258 84.2258 402.818 84.2258 cv
402.318 84.2258 401.918 84.3758 401.618 84.6558 cv
401.318 84.9358 401.138 85.3358 401.098 85.8458 cv
404.298 85.8458 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
