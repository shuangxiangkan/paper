%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: broadcastTime.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2019/12/2, 20:49:51
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-12-02T20:48:41+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
gsave
0 345.6 mo
461 345.6 li
461 -.399999 li
0 -.399999 li
0 345.6 li
clp
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.584 mo
414.72 307.584 li
414.72 41.472 li
57.6 41.472 li
57.6 307.584 li
f
73.8327 307.584 mo
73.8327 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.8327 307.584 mo
73.8327 311.084 li
@
60.5024 321.348 mo
62.1124 321.348 li
62.1124 315.788 li
60.3624 316.138 li
60.3624 315.238 li
62.1024 314.888 li
63.0924 314.888 li
63.0924 321.348 li
64.7024 321.348 li
64.7024 322.178 li
60.5024 322.178 li
60.5024 321.348 li
f
70.6324 315.158 mo
70.6324 316.708 li
72.4824 316.708 li
72.4824 317.408 li
70.6324 317.408 li
70.6324 320.378 li
70.6324 320.828 70.6924 321.118 70.8124 321.238 cv
70.9324 321.368 71.1824 321.428 71.5624 321.428 cv
72.4824 321.428 li
72.4824 322.178 li
71.5624 322.178 li
70.8624 322.178 70.3824 322.048 70.1224 321.788 cv
69.8624 321.528 69.7324 321.058 69.7324 320.378 cv
69.7324 317.408 li
69.0724 317.408 li
69.0724 316.708 li
69.7324 316.708 li
69.7324 315.158 li
70.6324 315.158 li
f
75.7823 317.338 mo
75.3023 317.338 74.9223 317.528 74.6423 317.908 cv
74.3623 318.288 74.2223 318.798 74.2223 319.448 cv
74.2223 320.108 74.3523 320.618 74.6323 320.998 cv
74.9123 321.378 75.2923 321.558 75.7823 321.558 cv
76.2623 321.558 76.6423 321.378 76.9223 320.998 cv
77.2023 320.618 77.3423 320.108 77.3423 319.448 cv
77.3423 318.808 77.2023 318.288 76.9223 317.908 cv
76.6423 317.528 76.2623 317.338 75.7823 317.338 cv
75.7823 316.578 mo
76.5623 316.578 77.1723 316.838 77.6223 317.338 cv
78.0623 317.848 78.2923 318.548 78.2923 319.448 cv
78.2923 320.348 78.0623 321.048 77.6223 321.548 cv
77.1723 322.058 76.5623 322.308 75.7823 322.308 cv
74.9923 322.308 74.3723 322.058 73.9323 321.548 cv
73.4923 321.048 73.2723 320.348 73.2723 319.448 cv
73.2723 318.548 73.4923 317.848 73.9323 317.338 cv
74.3723 316.838 74.9923 316.578 75.7823 316.578 cv
f
83.2623 321.348 mo
84.8723 321.348 li
84.8723 315.788 li
83.1223 316.138 li
83.1223 315.238 li
84.8623 314.888 li
85.8523 314.888 li
85.8523 321.348 li
87.4623 321.348 li
87.4623 322.178 li
83.2623 322.178 li
83.2623 321.348 li
f
138.764 307.584 mo
138.764 311.084 li
f
138.764 307.584 mo
138.764 311.084 li
@
125.433 321.348 mo
127.043 321.348 li
127.043 315.788 li
125.293 316.138 li
125.293 315.238 li
127.033 314.888 li
128.023 314.888 li
128.023 321.348 li
129.633 321.348 li
129.633 322.178 li
125.433 322.178 li
125.433 321.348 li
f
135.563 315.158 mo
135.563 316.708 li
137.413 316.708 li
137.413 317.408 li
135.563 317.408 li
135.563 320.378 li
135.563 320.828 135.623 321.118 135.743 321.238 cv
135.863 321.368 136.113 321.428 136.493 321.428 cv
137.413 321.428 li
137.413 322.178 li
136.493 322.178 li
135.793 322.178 135.313 322.048 135.053 321.788 cv
134.793 321.528 134.663 321.058 134.663 320.378 cv
134.663 317.408 li
134.003 317.408 li
134.003 316.708 li
134.663 316.708 li
134.663 315.158 li
135.563 315.158 li
f
140.713 317.338 mo
140.233 317.338 139.853 317.528 139.573 317.908 cv
139.293 318.288 139.153 318.798 139.153 319.448 cv
139.153 320.108 139.283 320.618 139.563 320.998 cv
139.843 321.378 140.223 321.558 140.713 321.558 cv
141.193 321.558 141.573 321.378 141.853 320.998 cv
142.133 320.618 142.273 320.108 142.273 319.448 cv
142.273 318.808 142.133 318.288 141.853 317.908 cv
141.573 317.528 141.193 317.338 140.713 317.338 cv
140.713 316.578 mo
141.493 316.578 142.103 316.838 142.553 317.338 cv
142.993 317.848 143.223 318.548 143.223 319.448 cv
143.223 320.348 142.993 321.048 142.553 321.548 cv
142.103 322.058 141.493 322.308 140.713 322.308 cv
139.923 322.308 139.303 322.058 138.863 321.548 cv
138.423 321.048 138.203 320.348 138.203 319.448 cv
138.203 318.548 138.423 317.848 138.863 317.338 cv
139.303 316.838 139.923 316.578 140.713 316.578 cv
f
148.873 321.348 mo
152.313 321.348 li
152.313 322.178 li
147.683 322.178 li
147.683 321.348 li
148.053 320.968 148.563 320.448 149.213 319.788 cv
149.853 319.138 150.263 318.718 150.433 318.528 cv
150.753 318.178 150.973 317.878 151.093 317.628 cv
151.213 317.388 151.283 317.138 151.283 316.898 cv
151.283 316.518 151.143 316.198 150.873 315.958 cv
150.603 315.718 150.253 315.588 149.813 315.588 cv
149.503 315.588 149.173 315.648 148.833 315.748 cv
148.493 315.858 148.123 316.018 147.733 316.238 cv
147.733 315.238 li
148.133 315.078 148.503 314.958 148.843 314.878 cv
149.183 314.798 149.503 314.758 149.793 314.758 cv
150.543 314.758 151.143 314.948 151.593 315.328 cv
152.043 315.708 152.273 316.208 152.273 316.838 cv
152.273 317.138 152.213 317.428 152.103 317.688 cv
151.993 317.958 151.793 318.278 151.493 318.638 cv
151.413 318.738 151.153 319.008 150.713 319.458 cv
150.273 319.908 149.663 320.538 148.873 321.348 cv
f
203.695 307.584 mo
203.695 311.084 li
f
203.695 307.584 mo
203.695 311.084 li
@
190.364 321.348 mo
191.974 321.348 li
191.974 315.788 li
190.224 316.138 li
190.224 315.238 li
191.964 314.888 li
192.954 314.888 li
192.954 321.348 li
194.564 321.348 li
194.564 322.178 li
190.364 322.178 li
190.364 321.348 li
f
200.494 315.158 mo
200.494 316.708 li
202.344 316.708 li
202.344 317.408 li
200.494 317.408 li
200.494 320.378 li
200.494 320.828 200.554 321.118 200.674 321.238 cv
200.794 321.368 201.044 321.428 201.424 321.428 cv
202.344 321.428 li
202.344 322.178 li
201.424 322.178 li
200.724 322.178 200.244 322.048 199.984 321.788 cv
199.724 321.528 199.594 321.058 199.594 320.378 cv
199.594 317.408 li
198.934 317.408 li
198.934 316.708 li
199.594 316.708 li
199.594 315.158 li
200.494 315.158 li
f
205.644 317.338 mo
205.164 317.338 204.784 317.528 204.504 317.908 cv
204.224 318.288 204.084 318.798 204.084 319.448 cv
204.084 320.108 204.214 320.618 204.494 320.998 cv
204.774 321.378 205.154 321.558 205.644 321.558 cv
206.124 321.558 206.504 321.378 206.784 320.998 cv
207.064 320.618 207.204 320.108 207.204 319.448 cv
207.204 318.808 207.064 318.288 206.784 317.908 cv
206.504 317.528 206.124 317.338 205.644 317.338 cv
205.644 316.578 mo
206.424 316.578 207.034 316.838 207.484 317.338 cv
207.924 317.848 208.154 318.548 208.154 319.448 cv
208.154 320.348 207.924 321.048 207.484 321.548 cv
207.034 322.058 206.424 322.308 205.644 322.308 cv
204.854 322.308 204.234 322.058 203.794 321.548 cv
203.354 321.048 203.134 320.348 203.134 319.448 cv
203.134 318.548 203.354 317.848 203.794 317.338 cv
204.234 316.838 204.854 316.578 205.644 316.578 cv
f
215.664 315.748 mo
213.174 319.638 li
215.664 319.638 li
215.664 315.748 li
215.404 314.888 mo
216.644 314.888 li
216.644 319.638 li
217.684 319.638 li
217.684 320.458 li
216.644 320.458 li
216.644 322.178 li
215.664 322.178 li
215.664 320.458 li
212.374 320.458 li
212.374 319.508 li
215.404 314.888 li
f
268.625 307.584 mo
268.625 311.084 li
f
268.625 307.584 mo
268.625 311.084 li
@
255.295 321.348 mo
256.905 321.348 li
256.905 315.788 li
255.155 316.138 li
255.155 315.238 li
256.895 314.888 li
257.885 314.888 li
257.885 321.348 li
259.495 321.348 li
259.495 322.178 li
255.295 322.178 li
255.295 321.348 li
f
265.425 315.158 mo
265.425 316.708 li
267.275 316.708 li
267.275 317.408 li
265.425 317.408 li
265.425 320.378 li
265.425 320.828 265.485 321.118 265.605 321.238 cv
265.725 321.368 265.975 321.428 266.355 321.428 cv
267.275 321.428 li
267.275 322.178 li
266.355 322.178 li
265.655 322.178 265.175 322.048 264.915 321.788 cv
264.655 321.528 264.525 321.058 264.525 320.378 cv
264.525 317.408 li
263.865 317.408 li
263.865 316.708 li
264.525 316.708 li
264.525 315.158 li
265.425 315.158 li
f
270.575 317.338 mo
270.095 317.338 269.715 317.528 269.435 317.908 cv
269.155 318.288 269.015 318.798 269.015 319.448 cv
269.015 320.108 269.145 320.618 269.425 320.998 cv
269.705 321.378 270.085 321.558 270.575 321.558 cv
271.055 321.558 271.435 321.378 271.715 320.998 cv
271.995 320.618 272.135 320.108 272.135 319.448 cv
272.135 318.808 271.995 318.288 271.715 317.908 cv
271.435 317.528 271.055 317.338 270.575 317.338 cv
270.575 316.578 mo
271.355 316.578 271.965 316.838 272.415 317.338 cv
272.855 317.848 273.085 318.548 273.085 319.448 cv
273.085 320.348 272.855 321.048 272.415 321.548 cv
271.965 322.058 271.355 322.308 270.575 322.308 cv
269.785 322.308 269.165 322.058 268.725 321.548 cv
268.285 321.048 268.065 320.348 268.065 319.448 cv
268.065 318.548 268.285 317.848 268.725 317.338 cv
269.165 316.838 269.785 316.578 270.575 316.578 cv
f
279.995 318.718 mo
279.525 318.718 279.155 318.848 278.885 319.098 cv
278.615 319.348 278.485 319.688 278.485 320.128 cv
278.485 320.568 278.615 320.918 278.885 321.168 cv
279.155 321.418 279.525 321.538 279.995 321.538 cv
280.455 321.538 280.825 321.418 281.095 321.158 cv
281.365 320.908 281.505 320.568 281.505 320.128 cv
281.505 319.688 281.365 319.348 281.105 319.098 cv
280.835 318.848 280.465 318.718 279.995 318.718 cv
279.005 318.298 mo
278.585 318.198 278.255 317.998 278.015 317.708 cv
277.775 317.418 277.665 317.068 277.665 316.648 cv
277.665 316.068 277.865 315.608 278.285 315.268 cv
278.695 314.928 279.265 314.758 279.995 314.758 cv
280.715 314.758 281.285 314.928 281.705 315.268 cv
282.115 315.608 282.325 316.068 282.325 316.648 cv
282.325 317.068 282.205 317.418 281.965 317.708 cv
281.725 317.998 281.405 318.198 280.985 318.298 cv
281.455 318.408 281.825 318.628 282.095 318.948 cv
282.355 319.268 282.495 319.668 282.495 320.128 cv
282.495 320.838 282.275 321.378 281.845 321.748 cv
281.405 322.128 280.795 322.308 279.995 322.308 cv
279.185 322.308 278.565 322.128 278.135 321.748 cv
277.705 321.378 277.495 320.838 277.495 320.128 cv
277.495 319.668 277.625 319.268 277.895 318.948 cv
278.155 318.628 278.525 318.408 279.005 318.298 cv
278.645 316.738 mo
278.645 317.118 278.755 317.418 278.995 317.628 cv
279.235 317.838 279.565 317.938 279.995 317.938 cv
280.415 317.938 280.745 317.838 280.985 317.628 cv
281.225 317.418 281.345 317.118 281.345 316.738 cv
281.345 316.358 281.225 316.068 280.985 315.858 cv
280.745 315.648 280.415 315.538 279.995 315.538 cv
279.565 315.538 279.235 315.648 278.995 315.858 cv
278.755 316.068 278.645 316.358 278.645 316.738 cv
f
333.556 307.584 mo
333.556 311.084 li
f
333.556 307.584 mo
333.556 311.084 li
@
317.046 321.348 mo
318.656 321.348 li
318.656 315.788 li
316.906 316.138 li
316.906 315.238 li
318.646 314.888 li
319.636 314.888 li
319.636 321.348 li
321.246 321.348 li
321.246 322.178 li
317.046 322.178 li
317.046 321.348 li
f
327.176 315.158 mo
327.176 316.708 li
329.026 316.708 li
329.026 317.408 li
327.176 317.408 li
327.176 320.378 li
327.176 320.828 327.236 321.118 327.356 321.238 cv
327.476 321.368 327.726 321.428 328.106 321.428 cv
329.026 321.428 li
329.026 322.178 li
328.106 322.178 li
327.406 322.178 326.926 322.048 326.666 321.788 cv
326.406 321.528 326.276 321.058 326.276 320.378 cv
326.276 317.408 li
325.616 317.408 li
325.616 316.708 li
326.276 316.708 li
326.276 315.158 li
327.176 315.158 li
f
332.326 317.338 mo
331.846 317.338 331.466 317.528 331.186 317.908 cv
330.906 318.288 330.766 318.798 330.766 319.448 cv
330.766 320.108 330.896 320.618 331.176 320.998 cv
331.456 321.378 331.836 321.558 332.326 321.558 cv
332.806 321.558 333.186 321.378 333.466 320.998 cv
333.746 320.618 333.886 320.108 333.886 319.448 cv
333.886 318.808 333.746 318.288 333.466 317.908 cv
333.186 317.528 332.806 317.338 332.326 317.338 cv
332.326 316.578 mo
333.106 316.578 333.716 316.838 334.166 317.338 cv
334.606 317.848 334.836 318.548 334.836 319.448 cv
334.836 320.348 334.606 321.048 334.166 321.548 cv
333.716 322.058 333.106 322.308 332.326 322.308 cv
331.536 322.308 330.916 322.058 330.476 321.548 cv
330.036 321.048 329.816 320.348 329.816 319.448 cv
329.816 318.548 330.036 317.848 330.476 317.338 cv
330.916 316.838 331.536 316.578 332.326 316.578 cv
f
339.806 321.348 mo
341.416 321.348 li
341.416 315.788 li
339.666 316.138 li
339.666 315.238 li
341.406 314.888 li
342.396 314.888 li
342.396 321.348 li
344.006 321.348 li
344.006 322.178 li
339.806 322.178 li
339.806 321.348 li
f
346.166 321.348 mo
347.776 321.348 li
347.776 315.788 li
346.026 316.138 li
346.026 315.238 li
347.766 314.888 li
348.756 314.888 li
348.756 321.348 li
350.366 321.348 li
350.366 322.178 li
346.166 322.178 li
346.166 321.348 li
f
398.487 307.584 mo
398.487 311.084 li
f
398.487 307.584 mo
398.487 311.084 li
@
378.798 321.348 mo
380.408 321.348 li
380.408 315.788 li
378.658 316.138 li
378.658 315.238 li
380.398 314.888 li
381.388 314.888 li
381.388 321.348 li
382.998 321.348 li
382.998 322.178 li
378.798 322.178 li
378.798 321.348 li
f
385.158 321.348 mo
386.768 321.348 li
386.768 315.788 li
385.018 316.138 li
385.018 315.238 li
386.758 314.888 li
387.748 314.888 li
387.748 321.348 li
389.358 321.348 li
389.358 322.178 li
385.158 322.178 li
385.158 321.348 li
f
395.288 315.158 mo
395.288 316.708 li
397.138 316.708 li
397.138 317.408 li
395.288 317.408 li
395.288 320.378 li
395.288 320.828 395.348 321.118 395.468 321.238 cv
395.588 321.368 395.838 321.428 396.218 321.428 cv
397.138 321.428 li
397.138 322.178 li
396.218 322.178 li
395.518 322.178 395.038 322.048 394.778 321.788 cv
394.518 321.528 394.388 321.058 394.388 320.378 cv
394.388 317.408 li
393.728 317.408 li
393.728 316.708 li
394.388 316.708 li
394.388 315.158 li
395.288 315.158 li
f
400.438 317.338 mo
399.958 317.338 399.578 317.528 399.298 317.908 cv
399.018 318.288 398.878 318.798 398.878 319.448 cv
398.878 320.108 399.008 320.618 399.288 320.998 cv
399.568 321.378 399.948 321.558 400.438 321.558 cv
400.918 321.558 401.298 321.378 401.578 320.998 cv
401.858 320.618 401.998 320.108 401.998 319.448 cv
401.998 318.808 401.858 318.288 401.578 317.908 cv
401.298 317.528 400.918 317.338 400.438 317.338 cv
400.438 316.578 mo
401.218 316.578 401.828 316.838 402.278 317.338 cv
402.718 317.848 402.948 318.548 402.948 319.448 cv
402.948 320.348 402.718 321.048 402.278 321.548 cv
401.828 322.058 401.218 322.308 400.438 322.308 cv
399.648 322.308 399.028 322.058 398.588 321.548 cv
398.148 321.048 397.928 320.348 397.928 319.448 cv
397.928 318.548 398.148 317.848 398.588 317.338 cv
399.028 316.838 399.648 316.578 400.438 316.578 cv
f
407.917 321.348 mo
409.527 321.348 li
409.527 315.788 li
407.777 316.138 li
407.777 315.238 li
409.517 314.888 li
410.507 314.888 li
410.507 321.348 li
412.117 321.348 li
412.117 322.178 li
407.917 322.178 li
407.917 321.348 li
f
414.277 321.348 mo
415.887 321.348 li
415.887 315.788 li
414.137 316.138 li
414.137 315.238 li
415.877 314.888 li
416.867 314.888 li
416.867 321.348 li
418.477 321.348 li
418.477 322.178 li
414.277 322.178 li
414.277 321.348 li
f
109.888 329.37 mo
109.888 335.04 li
111.078 335.04 li
112.078 335.04 112.818 334.82 113.288 334.36 cv
113.748 333.9 113.988 333.18 113.988 332.2 cv
113.988 331.22 113.748 330.51 113.288 330.05 cv
112.818 329.6 112.078 329.37 111.078 329.37 cv
109.888 329.37 li
108.898 328.56 mo
110.928 328.56 li
112.338 328.56 113.378 328.86 114.038 329.44 cv
114.698 330.03 115.028 330.95 115.028 332.2 cv
115.028 333.46 114.688 334.38 114.028 334.97 cv
113.368 335.56 112.328 335.85 110.928 335.85 cv
108.898 335.85 li
108.898 328.56 li
f
116.558 330.38 mo
117.458 330.38 li
117.458 335.85 li
116.558 335.85 li
116.558 330.38 li
116.558 328.25 mo
117.458 328.25 li
117.458 329.39 li
116.558 329.39 li
116.558 328.25 li
f
122.108 328.25 mo
122.108 329 li
121.248 329 li
120.928 329 120.698 329.07 120.578 329.2 cv
120.448 329.33 120.388 329.56 120.388 329.9 cv
120.388 330.38 li
121.868 330.38 li
121.868 331.08 li
120.388 331.08 li
120.388 335.85 li
119.488 335.85 li
119.488 331.08 li
118.628 331.08 li
118.628 330.38 li
119.488 330.38 li
119.488 330 li
119.488 329.4 119.628 328.95 119.908 328.67 cv
120.188 328.39 120.638 328.25 121.258 328.25 cv
122.108 328.25 li
f
125.628 328.25 mo
125.628 329 li
124.768 329 li
124.448 329 124.218 329.07 124.098 329.2 cv
123.968 329.33 123.908 329.56 123.908 329.9 cv
123.908 330.38 li
125.388 330.38 li
125.388 331.08 li
123.908 331.08 li
123.908 335.85 li
123.008 335.85 li
123.008 331.08 li
122.148 331.08 li
122.148 330.38 li
123.008 330.38 li
123.008 330 li
123.008 329.4 123.148 328.95 123.428 328.67 cv
123.708 328.39 124.158 328.25 124.778 328.25 cv
125.628 328.25 li
f
131.058 332.89 mo
131.058 333.33 li
126.928 333.33 li
126.968 333.95 127.148 334.43 127.488 334.75 cv
127.818 335.07 128.278 335.23 128.878 335.23 cv
129.218 335.23 129.558 335.19 129.878 335.11 cv
130.198 335.03 130.528 334.9 130.848 334.72 cv
130.848 335.57 li
130.528 335.71 130.198 335.82 129.858 335.88 cv
129.518 335.94 129.168 335.98 128.828 335.98 cv
127.948 335.98 127.258 335.73 126.748 335.23 cv
126.238 334.73 125.988 334.04 125.988 333.17 cv
125.988 332.28 126.228 331.57 126.708 331.04 cv
127.188 330.52 127.848 330.25 128.668 330.25 cv
129.408 330.25 129.988 330.49 130.418 330.96 cv
130.838 331.44 131.058 332.08 131.058 332.89 cv
130.158 332.63 mo
130.148 332.14 130.008 331.75 129.748 331.45 cv
129.478 331.16 129.118 331.01 128.678 331.01 cv
128.178 331.01 127.778 331.16 127.478 331.44 cv
127.178 331.72 126.998 332.12 126.958 332.63 cv
130.158 332.63 li
f
135.698 331.22 mo
135.598 331.16 135.488 331.12 135.368 331.09 cv
135.248 331.07 135.118 331.05 134.978 331.05 cv
134.468 331.05 134.078 331.22 133.808 331.55 cv
133.528 331.88 133.398 332.35 133.398 332.97 cv
133.398 335.85 li
132.498 335.85 li
132.498 330.38 li
133.398 330.38 li
133.398 331.23 li
133.578 330.9 133.828 330.65 134.128 330.49 cv
134.428 330.33 134.798 330.25 135.238 330.25 cv
135.448 330.26 li
135.518 330.27 135.598 330.28 135.698 330.3 cv
135.698 331.22 li
f
141.318 332.89 mo
141.318 333.33 li
137.188 333.33 li
137.228 333.95 137.408 334.43 137.748 334.75 cv
138.078 335.07 138.538 335.23 139.138 335.23 cv
139.478 335.23 139.818 335.19 140.138 335.11 cv
140.458 335.03 140.788 334.9 141.108 334.72 cv
141.108 335.57 li
140.788 335.71 140.458 335.82 140.118 335.88 cv
139.778 335.94 139.428 335.98 139.088 335.98 cv
138.208 335.98 137.518 335.73 137.008 335.23 cv
136.498 334.73 136.248 334.04 136.248 333.17 cv
136.248 332.28 136.488 331.57 136.968 331.04 cv
137.448 330.52 138.108 330.25 138.928 330.25 cv
139.668 330.25 140.248 330.49 140.678 330.96 cv
141.098 331.44 141.318 332.08 141.318 332.89 cv
140.418 332.63 mo
140.408 332.14 140.268 331.75 140.008 331.45 cv
139.738 331.16 139.378 331.01 138.938 331.01 cv
138.438 331.01 138.038 331.16 137.738 331.44 cv
137.438 331.72 137.258 332.12 137.218 332.63 cv
140.418 332.63 li
f
147.338 332.55 mo
147.338 335.85 li
146.438 335.85 li
146.438 332.58 li
146.438 332.06 146.328 331.68 146.128 331.42 cv
145.928 331.16 145.628 331.03 145.228 331.03 cv
144.738 331.03 144.358 331.19 144.078 331.5 cv
143.798 331.81 143.658 332.23 143.658 332.76 cv
143.658 335.85 li
142.758 335.85 li
142.758 330.38 li
143.658 330.38 li
143.658 331.23 li
143.868 330.91 144.118 330.66 144.418 330.5 cv
144.708 330.34 145.048 330.25 145.428 330.25 cv
146.048 330.25 146.528 330.45 146.848 330.84 cv
147.168 331.23 147.338 331.8 147.338 332.55 cv
f
150.018 328.83 mo
150.018 330.38 li
151.868 330.38 li
151.868 331.08 li
150.018 331.08 li
150.018 334.05 li
150.018 334.5 150.078 334.79 150.198 334.91 cv
150.318 335.04 150.568 335.1 150.948 335.1 cv
151.868 335.1 li
151.868 335.85 li
150.948 335.85 li
150.248 335.85 149.768 335.72 149.508 335.46 cv
149.248 335.2 149.118 334.73 149.118 334.05 cv
149.118 331.08 li
148.458 331.08 li
148.458 330.38 li
149.118 330.38 li
149.118 328.83 li
150.018 328.83 li
f
155.268 328.56 mo
161.428 328.56 li
161.428 329.39 li
158.838 329.39 li
158.838 335.85 li
157.848 335.85 li
157.848 329.39 li
155.268 329.39 li
155.268 328.56 li
f
164.618 336.35 mo
164.358 336.99 164.108 337.42 163.868 337.62 cv
163.628 337.82 163.308 337.92 162.908 337.92 cv
162.188 337.92 li
162.188 337.17 li
162.718 337.17 li
162.958 337.17 163.148 337.11 163.288 336.99 cv
163.428 336.87 163.578 336.6 163.748 336.16 cv
163.908 335.76 li
161.698 330.38 li
162.648 330.38 li
164.358 334.66 li
166.068 330.38 li
167.018 330.38 li
164.618 336.35 li
f
169.128 335.03 mo
169.128 337.92 li
168.228 337.92 li
168.228 330.38 li
169.128 330.38 li
169.128 331.21 li
169.308 330.89 169.548 330.65 169.838 330.49 cv
170.128 330.33 170.478 330.25 170.878 330.25 cv
171.538 330.25 172.078 330.52 172.498 331.04 cv
172.908 331.57 173.118 332.26 173.118 333.12 cv
173.118 333.98 172.908 334.68 172.498 335.2 cv
172.078 335.72 171.538 335.98 170.878 335.98 cv
170.478 335.98 170.128 335.9 169.838 335.75 cv
169.548 335.6 169.308 335.36 169.128 335.03 cv
172.188 333.12 mo
172.188 332.46 172.048 331.95 171.778 331.57 cv
171.498 331.19 171.128 331 170.658 331 cv
170.178 331 169.808 331.19 169.538 331.57 cv
169.258 331.95 169.128 332.46 169.128 333.12 cv
169.128 333.78 169.258 334.3 169.538 334.68 cv
169.808 335.06 170.178 335.24 170.658 335.24 cv
171.128 335.24 171.498 335.06 171.778 334.68 cv
172.048 334.3 172.188 333.78 172.188 333.12 cv
f
179.288 332.89 mo
179.288 333.33 li
175.158 333.33 li
175.198 333.95 175.378 334.43 175.718 334.75 cv
176.048 335.07 176.508 335.23 177.108 335.23 cv
177.448 335.23 177.788 335.19 178.108 335.11 cv
178.428 335.03 178.758 334.9 179.078 334.72 cv
179.078 335.57 li
178.758 335.71 178.428 335.82 178.088 335.88 cv
177.748 335.94 177.398 335.98 177.058 335.98 cv
176.178 335.98 175.488 335.73 174.978 335.23 cv
174.468 334.73 174.218 334.04 174.218 333.17 cv
174.218 332.28 174.458 331.57 174.938 331.04 cv
175.418 330.52 176.078 330.25 176.898 330.25 cv
177.638 330.25 178.218 330.49 178.648 330.96 cv
179.068 331.44 179.288 332.08 179.288 332.89 cv
178.388 332.63 mo
178.378 332.14 178.238 331.75 177.978 331.45 cv
177.708 331.16 177.348 331.01 176.908 331.01 cv
176.408 331.01 176.008 331.16 175.708 331.44 cv
175.408 331.72 175.228 332.12 175.188 332.63 cv
178.388 332.63 li
f
184.248 330.54 mo
184.248 331.39 li
183.988 331.27 183.728 331.17 183.458 331.1 cv
183.178 331.04 182.898 331 182.608 331 cv
182.158 331 181.818 331.07 181.598 331.21 cv
181.378 331.35 181.268 331.55 181.268 331.82 cv
181.268 332.03 181.348 332.19 181.508 332.31 cv
181.668 332.43 181.988 332.55 182.468 332.65 cv
182.778 332.72 li
183.418 332.86 183.868 333.06 184.138 333.3 cv
184.398 333.55 184.538 333.9 184.538 334.34 cv
184.538 334.85 184.338 335.25 183.938 335.54 cv
183.538 335.84 182.978 335.98 182.278 335.98 cv
181.978 335.98 181.678 335.95 181.358 335.9 cv
181.038 335.85 180.708 335.77 180.358 335.65 cv
180.358 334.72 li
180.688 334.9 181.018 335.03 181.338 335.11 cv
181.658 335.2 181.978 335.24 182.298 335.24 cv
182.718 335.24 183.048 335.17 183.278 335.03 cv
183.498 334.89 183.618 334.68 183.618 334.41 cv
183.618 334.17 183.528 333.98 183.368 333.85 cv
183.208 333.72 182.848 333.59 182.288 333.47 cv
181.978 333.4 li
181.418 333.28 181.008 333.1 180.768 332.86 cv
180.518 332.62 180.398 332.29 180.398 331.86 cv
180.398 331.35 180.578 330.95 180.938 330.67 cv
181.298 330.39 181.818 330.25 182.498 330.25 cv
182.828 330.25 183.138 330.28 183.438 330.33 cv
183.728 330.38 183.998 330.45 184.248 330.54 cv
f
191.268 331.01 mo
190.788 331.01 190.408 331.2 190.128 331.58 cv
189.848 331.96 189.708 332.47 189.708 333.12 cv
189.708 333.78 189.838 334.29 190.118 334.67 cv
190.398 335.05 190.778 335.23 191.268 335.23 cv
191.748 335.23 192.128 335.05 192.408 334.67 cv
192.688 334.29 192.828 333.78 192.828 333.12 cv
192.828 332.48 192.688 331.96 192.408 331.58 cv
192.128 331.2 191.748 331.01 191.268 331.01 cv
191.268 330.25 mo
192.048 330.25 192.658 330.51 193.108 331.01 cv
193.548 331.52 193.778 332.22 193.778 333.12 cv
193.778 334.02 193.548 334.72 193.108 335.22 cv
192.658 335.73 192.048 335.98 191.268 335.98 cv
190.478 335.98 189.858 335.73 189.418 335.22 cv
188.978 334.72 188.758 334.02 188.758 333.12 cv
188.758 332.22 188.978 331.52 189.418 331.01 cv
189.858 330.51 190.478 330.25 191.268 330.25 cv
f
198.038 328.25 mo
198.038 329 li
197.178 329 li
196.858 329 196.628 329.07 196.508 329.2 cv
196.378 329.33 196.318 329.56 196.318 329.9 cv
196.318 330.38 li
197.798 330.38 li
197.798 331.08 li
196.318 331.08 li
196.318 335.85 li
195.418 335.85 li
195.418 331.08 li
194.558 331.08 li
194.558 330.38 li
195.418 330.38 li
195.418 330 li
195.418 329.4 195.558 328.95 195.838 328.67 cv
196.118 328.39 196.568 328.25 197.188 328.25 cv
198.038 328.25 li
f
202.998 329.37 mo
202.998 335.04 li
204.188 335.04 li
205.188 335.04 205.928 334.82 206.398 334.36 cv
206.858 333.9 207.098 333.18 207.098 332.2 cv
207.098 331.22 206.858 330.51 206.398 330.05 cv
205.928 329.6 205.188 329.37 204.188 329.37 cv
202.998 329.37 li
202.008 328.56 mo
204.038 328.56 li
205.448 328.56 206.488 328.86 207.148 329.44 cv
207.808 330.03 208.138 330.95 208.138 332.2 cv
208.138 333.46 207.798 334.38 207.138 334.97 cv
206.478 335.56 205.438 335.85 204.038 335.85 cv
202.008 335.85 li
202.008 328.56 li
f
212.158 333.1 mo
211.428 333.1 210.928 333.19 210.648 333.35 cv
210.368 333.52 210.228 333.8 210.228 334.2 cv
210.228 334.52 210.328 334.78 210.538 334.96 cv
210.748 335.15 211.038 335.24 211.398 335.24 cv
211.898 335.24 212.298 335.07 212.598 334.71 cv
212.898 334.36 213.048 333.89 213.048 333.3 cv
213.048 333.1 li
212.158 333.1 li
213.948 332.73 mo
213.948 335.85 li
213.048 335.85 li
213.048 335.02 li
212.838 335.36 212.578 335.6 212.278 335.75 cv
211.978 335.9 211.598 335.98 211.158 335.98 cv
210.598 335.98 210.148 335.83 209.818 335.52 cv
209.488 335.21 209.328 334.79 209.328 334.26 cv
209.328 333.65 209.528 333.19 209.948 332.87 cv
210.358 332.56 210.968 332.4 211.788 332.4 cv
213.048 332.4 li
213.048 332.31 li
213.048 331.9 212.908 331.58 212.638 331.35 cv
212.368 331.13 211.988 331.01 211.498 331.01 cv
211.178 331.01 210.878 331.05 210.578 331.13 cv
210.278 331.21 209.998 331.32 209.728 331.46 cv
209.728 330.63 li
210.048 330.51 210.368 330.41 210.678 330.35 cv
210.988 330.29 211.288 330.25 211.588 330.25 cv
212.378 330.25 212.968 330.46 213.358 330.87 cv
213.748 331.28 213.948 331.9 213.948 332.73 cv
f
216.688 328.83 mo
216.688 330.38 li
218.538 330.38 li
218.538 331.08 li
216.688 331.08 li
216.688 334.05 li
216.688 334.5 216.748 334.79 216.868 334.91 cv
216.988 335.04 217.238 335.1 217.618 335.1 cv
218.538 335.1 li
218.538 335.85 li
217.618 335.85 li
216.918 335.85 216.438 335.72 216.178 335.46 cv
215.918 335.2 215.788 334.73 215.788 334.05 cv
215.788 331.08 li
215.128 331.08 li
215.128 330.38 li
215.788 330.38 li
215.788 328.83 li
216.688 328.83 li
f
222.208 333.1 mo
221.478 333.1 220.978 333.19 220.698 333.35 cv
220.418 333.52 220.278 333.8 220.278 334.2 cv
220.278 334.52 220.378 334.78 220.588 334.96 cv
220.798 335.15 221.088 335.24 221.448 335.24 cv
221.948 335.24 222.348 335.07 222.648 334.71 cv
222.948 334.36 223.098 333.89 223.098 333.3 cv
223.098 333.1 li
222.208 333.1 li
223.998 332.73 mo
223.998 335.85 li
223.098 335.85 li
223.098 335.02 li
222.888 335.36 222.628 335.6 222.328 335.75 cv
222.028 335.9 221.648 335.98 221.208 335.98 cv
220.648 335.98 220.198 335.83 219.868 335.52 cv
219.538 335.21 219.378 334.79 219.378 334.26 cv
219.378 333.65 219.578 333.19 219.998 332.87 cv
220.408 332.56 221.018 332.4 221.838 332.4 cv
223.098 332.4 li
223.098 332.31 li
223.098 331.9 222.958 331.58 222.688 331.35 cv
222.418 331.13 222.038 331.01 221.548 331.01 cv
221.228 331.01 220.928 331.05 220.628 331.13 cv
220.328 331.21 220.048 331.32 219.778 331.46 cv
219.778 330.63 li
220.098 330.51 220.418 330.41 220.728 330.35 cv
221.038 330.29 221.338 330.25 221.638 330.25 cv
222.428 330.25 223.018 330.46 223.408 330.87 cv
223.798 331.28 223.998 331.9 223.998 332.73 cv
f
234.528 329.12 mo
234.528 330.16 li
234.188 329.86 233.838 329.63 233.458 329.47 cv
233.078 329.32 232.688 329.24 232.268 329.24 cv
231.428 329.24 230.788 329.5 230.348 330.01 cv
229.908 330.52 229.688 331.25 229.688 332.21 cv
229.688 333.17 229.908 333.91 230.348 334.42 cv
230.788 334.93 231.428 335.18 232.268 335.18 cv
232.688 335.18 233.078 335.11 233.458 334.95 cv
233.838 334.8 234.188 334.57 234.528 334.26 cv
234.528 335.29 li
234.178 335.53 233.808 335.7 233.428 335.81 cv
233.048 335.92 232.638 335.98 232.208 335.98 cv
231.108 335.98 230.238 335.65 229.598 334.98 cv
228.958 334.31 228.648 333.39 228.648 332.21 cv
228.648 331.04 228.958 330.12 229.598 329.44 cv
230.238 328.77 231.108 328.43 232.208 328.43 cv
232.648 328.43 233.058 328.49 233.438 328.6 cv
233.818 328.72 234.188 328.89 234.528 329.12 cv
f
238.128 331.01 mo
237.648 331.01 237.268 331.2 236.988 331.58 cv
236.708 331.96 236.568 332.47 236.568 333.12 cv
236.568 333.78 236.698 334.29 236.978 334.67 cv
237.258 335.05 237.638 335.23 238.128 335.23 cv
238.608 335.23 238.988 335.05 239.268 334.67 cv
239.548 334.29 239.688 333.78 239.688 333.12 cv
239.688 332.48 239.548 331.96 239.268 331.58 cv
238.988 331.2 238.608 331.01 238.128 331.01 cv
238.128 330.25 mo
238.908 330.25 239.518 330.51 239.968 331.01 cv
240.408 331.52 240.638 332.22 240.638 333.12 cv
240.638 334.02 240.408 334.72 239.968 335.22 cv
239.518 335.73 238.908 335.98 238.128 335.98 cv
237.338 335.98 236.718 335.73 236.278 335.22 cv
235.838 334.72 235.618 334.02 235.618 333.12 cv
235.618 332.22 235.838 331.52 236.278 331.01 cv
236.718 330.51 237.338 330.25 238.128 330.25 cv
f
246.388 331.43 mo
246.608 331.03 246.878 330.74 247.188 330.54 cv
247.498 330.35 247.868 330.25 248.298 330.25 cv
248.858 330.25 249.298 330.45 249.608 330.85 cv
249.918 331.25 250.078 331.82 250.078 332.55 cv
250.078 335.85 li
249.178 335.85 li
249.178 332.58 li
249.178 332.06 249.078 331.67 248.898 331.41 cv
248.708 331.16 248.428 331.03 248.048 331.03 cv
247.578 331.03 247.208 331.19 246.938 331.5 cv
246.668 331.81 246.538 332.23 246.538 332.76 cv
246.538 335.85 li
245.638 335.85 li
245.638 332.58 li
245.638 332.06 245.538 331.67 245.358 331.41 cv
245.168 331.16 244.878 331.03 244.498 331.03 cv
244.038 331.03 243.668 331.19 243.398 331.5 cv
243.128 331.81 242.998 332.23 242.998 332.76 cv
242.998 335.85 li
242.098 335.85 li
242.098 330.38 li
242.998 330.38 li
242.998 331.23 li
243.198 330.9 243.448 330.65 243.738 330.49 cv
244.018 330.33 244.358 330.25 244.758 330.25 cv
245.158 330.25 245.488 330.35 245.768 330.55 cv
246.048 330.75 246.248 331.05 246.388 331.43 cv
f
256.128 331.43 mo
256.348 331.03 256.618 330.74 256.928 330.54 cv
257.238 330.35 257.608 330.25 258.038 330.25 cv
258.598 330.25 259.038 330.45 259.348 330.85 cv
259.658 331.25 259.818 331.82 259.818 332.55 cv
259.818 335.85 li
258.918 335.85 li
258.918 332.58 li
258.918 332.06 258.818 331.67 258.638 331.41 cv
258.448 331.16 258.168 331.03 257.788 331.03 cv
257.318 331.03 256.948 331.19 256.678 331.5 cv
256.408 331.81 256.278 332.23 256.278 332.76 cv
256.278 335.85 li
255.378 335.85 li
255.378 332.58 li
255.378 332.06 255.278 331.67 255.098 331.41 cv
254.908 331.16 254.618 331.03 254.238 331.03 cv
253.778 331.03 253.408 331.19 253.138 331.5 cv
252.868 331.81 252.738 332.23 252.738 332.76 cv
252.738 335.85 li
251.838 335.85 li
251.838 330.38 li
252.738 330.38 li
252.738 331.23 li
252.938 330.9 253.188 330.65 253.478 330.49 cv
253.758 330.33 254.098 330.25 254.498 330.25 cv
254.898 330.25 255.228 330.35 255.508 330.55 cv
255.788 330.75 255.988 331.05 256.128 331.43 cv
f
261.518 333.69 mo
261.518 330.38 li
262.418 330.38 li
262.418 333.66 li
262.418 334.18 262.518 334.56 262.718 334.82 cv
262.918 335.08 263.218 335.21 263.628 335.21 cv
264.108 335.21 264.498 335.06 264.778 334.75 cv
265.058 334.44 265.198 334.02 265.198 333.48 cv
265.198 330.38 li
266.098 330.38 li
266.098 335.85 li
265.198 335.85 li
265.198 335.01 li
264.978 335.35 264.718 335.59 264.438 335.75 cv
264.148 335.9 263.818 335.98 263.438 335.98 cv
262.808 335.98 262.328 335.79 262.008 335.4 cv
261.678 335.02 261.518 334.45 261.518 333.69 cv
263.778 330.25 mo
263.778 330.25 li
f
272.498 332.55 mo
272.498 335.85 li
271.598 335.85 li
271.598 332.58 li
271.598 332.06 271.488 331.68 271.288 331.42 cv
271.088 331.16 270.788 331.03 270.388 331.03 cv
269.898 331.03 269.518 331.19 269.238 331.5 cv
268.958 331.81 268.818 332.23 268.818 332.76 cv
268.818 335.85 li
267.918 335.85 li
267.918 330.38 li
268.818 330.38 li
268.818 331.23 li
269.028 330.91 269.278 330.66 269.578 330.5 cv
269.868 330.34 270.208 330.25 270.588 330.25 cv
271.208 330.25 271.688 330.45 272.008 330.84 cv
272.328 331.23 272.498 331.8 272.498 332.55 cv
f
274.288 330.38 mo
275.188 330.38 li
275.188 335.85 li
274.288 335.85 li
274.288 330.38 li
274.288 328.25 mo
275.188 328.25 li
275.188 329.39 li
274.288 329.39 li
274.288 328.25 li
f
281.008 330.59 mo
281.008 331.43 li
280.748 331.29 280.498 331.19 280.238 331.12 cv
279.978 331.05 279.728 331.01 279.468 331.01 cv
278.888 331.01 278.428 331.2 278.108 331.57 cv
277.788 331.94 277.628 332.46 277.628 333.12 cv
277.628 333.79 277.788 334.31 278.108 334.68 cv
278.428 335.05 278.888 335.23 279.468 335.23 cv
279.728 335.23 279.978 335.2 280.238 335.13 cv
280.498 335.06 280.748 334.95 281.008 334.81 cv
281.008 335.64 li
280.748 335.76 280.488 335.85 280.228 335.9 cv
279.958 335.95 279.668 335.98 279.368 335.98 cv
278.548 335.98 277.888 335.73 277.408 335.21 cv
276.918 334.7 276.678 334 276.678 333.12 cv
276.678 332.23 276.918 331.53 277.408 331.02 cv
277.898 330.51 278.568 330.25 279.428 330.25 cv
279.708 330.25 279.978 330.28 280.238 330.34 cv
280.498 330.4 280.758 330.48 281.008 330.59 cv
f
285.058 333.1 mo
284.328 333.1 283.828 333.19 283.548 333.35 cv
283.268 333.52 283.128 333.8 283.128 334.2 cv
283.128 334.52 283.228 334.78 283.438 334.96 cv
283.648 335.15 283.938 335.24 284.298 335.24 cv
284.798 335.24 285.198 335.07 285.498 334.71 cv
285.798 334.36 285.948 333.89 285.948 333.3 cv
285.948 333.1 li
285.058 333.1 li
286.848 332.73 mo
286.848 335.85 li
285.948 335.85 li
285.948 335.02 li
285.738 335.36 285.478 335.6 285.178 335.75 cv
284.878 335.9 284.498 335.98 284.058 335.98 cv
283.498 335.98 283.048 335.83 282.718 335.52 cv
282.388 335.21 282.228 334.79 282.228 334.26 cv
282.228 333.65 282.428 333.19 282.848 332.87 cv
283.258 332.56 283.868 332.4 284.688 332.4 cv
285.948 332.4 li
285.948 332.31 li
285.948 331.9 285.808 331.58 285.538 331.35 cv
285.268 331.13 284.888 331.01 284.398 331.01 cv
284.078 331.01 283.778 331.05 283.478 331.13 cv
283.178 331.21 282.898 331.32 282.628 331.46 cv
282.628 330.63 li
282.948 330.51 283.268 330.41 283.578 330.35 cv
283.888 330.29 284.188 330.25 284.488 330.25 cv
285.278 330.25 285.868 330.46 286.258 330.87 cv
286.648 331.28 286.848 331.9 286.848 332.73 cv
f
289.588 328.83 mo
289.588 330.38 li
291.438 330.38 li
291.438 331.08 li
289.588 331.08 li
289.588 334.05 li
289.588 334.5 289.648 334.79 289.768 334.91 cv
289.888 335.04 290.138 335.1 290.518 335.1 cv
291.438 335.1 li
291.438 335.85 li
290.518 335.85 li
289.818 335.85 289.338 335.72 289.078 335.46 cv
288.818 335.2 288.688 334.73 288.688 334.05 cv
288.688 331.08 li
288.028 331.08 li
288.028 330.38 li
288.688 330.38 li
288.688 328.83 li
289.588 328.83 li
f
292.618 330.38 mo
293.518 330.38 li
293.518 335.85 li
292.618 335.85 li
292.618 330.38 li
292.618 328.25 mo
293.518 328.25 li
293.518 329.39 li
292.618 329.39 li
292.618 328.25 li
f
297.518 331.01 mo
297.038 331.01 296.658 331.2 296.378 331.58 cv
296.098 331.96 295.958 332.47 295.958 333.12 cv
295.958 333.78 296.088 334.29 296.368 334.67 cv
296.648 335.05 297.028 335.23 297.518 335.23 cv
297.998 335.23 298.378 335.05 298.658 334.67 cv
298.938 334.29 299.078 333.78 299.078 333.12 cv
299.078 332.48 298.938 331.96 298.658 331.58 cv
298.378 331.2 297.998 331.01 297.518 331.01 cv
297.518 330.25 mo
298.298 330.25 298.908 330.51 299.358 331.01 cv
299.798 331.52 300.028 332.22 300.028 333.12 cv
300.028 334.02 299.798 334.72 299.358 335.22 cv
298.908 335.73 298.298 335.98 297.518 335.98 cv
296.728 335.98 296.108 335.73 295.668 335.22 cv
295.228 334.72 295.008 334.02 295.008 333.12 cv
295.008 332.22 295.228 331.52 295.668 331.01 cv
296.108 330.51 296.728 330.25 297.518 330.25 cv
f
306.068 332.55 mo
306.068 335.85 li
305.168 335.85 li
305.168 332.58 li
305.168 332.06 305.058 331.68 304.858 331.42 cv
304.658 331.16 304.358 331.03 303.958 331.03 cv
303.468 331.03 303.088 331.19 302.808 331.5 cv
302.528 331.81 302.388 332.23 302.388 332.76 cv
302.388 335.85 li
301.488 335.85 li
301.488 330.38 li
302.388 330.38 li
302.388 331.23 li
302.598 330.91 302.848 330.66 303.148 330.5 cv
303.438 330.34 303.778 330.25 304.158 330.25 cv
304.778 330.25 305.258 330.45 305.578 330.84 cv
305.898 331.23 306.068 331.8 306.068 332.55 cv
f
313.518 329.53 mo
312.178 333.16 li
314.858 333.16 li
313.518 329.53 li
312.958 328.56 mo
314.078 328.56 li
316.858 335.85 li
315.828 335.85 li
315.168 333.98 li
311.878 333.98 li
311.218 335.85 li
310.178 335.85 li
312.958 328.56 li
f
317.878 328.25 mo
318.778 328.25 li
318.778 335.85 li
317.878 335.85 li
317.878 328.25 li
f
324.258 333.05 mo
324.258 332.41 324.118 331.9 323.858 331.54 cv
323.588 331.18 323.208 331 322.728 331 cv
322.248 331 321.868 331.18 321.598 331.54 cv
321.328 331.9 321.198 332.41 321.198 333.05 cv
321.198 333.7 321.328 334.2 321.598 334.56 cv
321.868 334.92 322.248 335.1 322.728 335.1 cv
323.208 335.1 323.588 334.92 323.858 334.56 cv
324.118 334.2 324.258 333.7 324.258 333.05 cv
325.158 335.17 mo
325.158 336.09 324.948 336.78 324.538 337.24 cv
324.118 337.69 323.488 337.92 322.638 337.92 cv
322.318 337.92 322.028 337.89 321.748 337.85 cv
321.468 337.8 321.188 337.73 320.928 337.63 cv
320.928 336.76 li
321.188 336.9 321.448 337 321.708 337.07 cv
321.968 337.14 322.228 337.18 322.498 337.18 cv
323.078 337.18 323.518 337.02 323.818 336.72 cv
324.108 336.41 324.258 335.95 324.258 335.33 cv
324.258 334.89 li
324.068 335.21 323.828 335.45 323.538 335.61 cv
323.248 335.77 322.908 335.85 322.508 335.85 cv
321.828 335.85 321.288 335.6 320.878 335.09 cv
320.468 334.58 320.268 333.9 320.268 333.05 cv
320.268 332.21 320.468 331.53 320.878 331.02 cv
321.288 330.51 321.828 330.25 322.508 330.25 cv
322.908 330.25 323.248 330.33 323.538 330.49 cv
323.828 330.65 324.068 330.89 324.258 331.21 cv
324.258 330.38 li
325.158 330.38 li
325.158 335.17 li
f
329.128 331.01 mo
328.648 331.01 328.268 331.2 327.988 331.58 cv
327.708 331.96 327.568 332.47 327.568 333.12 cv
327.568 333.78 327.698 334.29 327.978 334.67 cv
328.258 335.05 328.638 335.23 329.128 335.23 cv
329.608 335.23 329.988 335.05 330.268 334.67 cv
330.548 334.29 330.688 333.78 330.688 333.12 cv
330.688 332.48 330.548 331.96 330.268 331.58 cv
329.988 331.2 329.608 331.01 329.128 331.01 cv
329.128 330.25 mo
329.908 330.25 330.518 330.51 330.968 331.01 cv
331.408 331.52 331.638 332.22 331.638 333.12 cv
331.638 334.02 331.408 334.72 330.968 335.22 cv
330.518 335.73 329.908 335.98 329.128 335.98 cv
328.338 335.98 327.718 335.73 327.278 335.22 cv
326.838 334.72 326.618 334.02 326.618 333.12 cv
326.618 332.22 326.838 331.52 327.278 331.01 cv
327.718 330.51 328.338 330.25 329.128 330.25 cv
f
336.298 331.22 mo
336.198 331.16 336.088 331.12 335.968 331.09 cv
335.848 331.07 335.718 331.05 335.578 331.05 cv
335.068 331.05 334.678 331.22 334.408 331.55 cv
334.128 331.88 333.998 332.35 333.998 332.97 cv
333.998 335.85 li
333.098 335.85 li
333.098 330.38 li
333.998 330.38 li
333.998 331.23 li
334.178 330.9 334.428 330.65 334.728 330.49 cv
335.028 330.33 335.398 330.25 335.838 330.25 cv
336.048 330.26 li
336.118 330.27 336.198 330.28 336.298 330.3 cv
336.298 331.22 li
f
337.238 330.38 mo
338.138 330.38 li
338.138 335.85 li
337.238 335.85 li
337.238 330.38 li
337.238 328.25 mo
338.138 328.25 li
338.138 329.39 li
337.238 329.39 li
337.238 328.25 li
f
340.908 328.83 mo
340.908 330.38 li
342.758 330.38 li
342.758 331.08 li
340.908 331.08 li
340.908 334.05 li
340.908 334.5 340.968 334.79 341.088 334.91 cv
341.208 335.04 341.458 335.1 341.838 335.1 cv
342.758 335.1 li
342.758 335.85 li
341.838 335.85 li
341.138 335.85 340.658 335.72 340.398 335.46 cv
340.138 335.2 340.008 334.73 340.008 334.05 cv
340.008 331.08 li
339.348 331.08 li
339.348 330.38 li
340.008 330.38 li
340.008 328.83 li
340.908 328.83 li
f
348.488 332.55 mo
348.488 335.85 li
347.588 335.85 li
347.588 332.58 li
347.588 332.06 347.478 331.68 347.278 331.42 cv
347.078 331.16 346.778 331.03 346.378 331.03 cv
345.888 331.03 345.508 331.19 345.228 331.5 cv
344.948 331.81 344.808 332.23 344.808 332.76 cv
344.808 335.85 li
343.908 335.85 li
343.908 328.25 li
344.808 328.25 li
344.808 331.23 li
345.018 330.91 345.268 330.66 345.568 330.5 cv
345.858 330.34 346.198 330.25 346.578 330.25 cv
347.198 330.25 347.678 330.45 347.998 330.84 cv
348.318 331.23 348.488 331.8 348.488 332.55 cv
f
354.538 331.43 mo
354.758 331.03 355.028 330.74 355.338 330.54 cv
355.648 330.35 356.018 330.25 356.448 330.25 cv
357.008 330.25 357.448 330.45 357.758 330.85 cv
358.068 331.25 358.228 331.82 358.228 332.55 cv
358.228 335.85 li
357.328 335.85 li
357.328 332.58 li
357.328 332.06 357.228 331.67 357.048 331.41 cv
356.858 331.16 356.578 331.03 356.198 331.03 cv
355.728 331.03 355.358 331.19 355.088 331.5 cv
354.818 331.81 354.688 332.23 354.688 332.76 cv
354.688 335.85 li
353.788 335.85 li
353.788 332.58 li
353.788 332.06 353.688 331.67 353.508 331.41 cv
353.318 331.16 353.028 331.03 352.648 331.03 cv
352.188 331.03 351.818 331.19 351.548 331.5 cv
351.278 331.81 351.148 332.23 351.148 332.76 cv
351.148 335.85 li
350.248 335.85 li
350.248 330.38 li
351.148 330.38 li
351.148 331.23 li
351.348 330.9 351.598 330.65 351.888 330.49 cv
352.168 330.33 352.508 330.25 352.908 330.25 cv
353.308 330.25 353.638 330.35 353.918 330.55 cv
354.198 330.75 354.398 331.05 354.538 331.43 cv
f
363.508 330.54 mo
363.508 331.39 li
363.248 331.27 362.988 331.17 362.718 331.1 cv
362.438 331.04 362.158 331 361.868 331 cv
361.418 331 361.078 331.07 360.858 331.21 cv
360.638 331.35 360.528 331.55 360.528 331.82 cv
360.528 332.03 360.608 332.19 360.768 332.31 cv
360.928 332.43 361.248 332.55 361.728 332.65 cv
362.038 332.72 li
362.678 332.86 363.128 333.06 363.398 333.3 cv
363.658 333.55 363.798 333.9 363.798 334.34 cv
363.798 334.85 363.598 335.25 363.198 335.54 cv
362.798 335.84 362.238 335.98 361.538 335.98 cv
361.238 335.98 360.938 335.95 360.618 335.9 cv
360.298 335.85 359.968 335.77 359.618 335.65 cv
359.618 334.72 li
359.948 334.9 360.278 335.03 360.598 335.11 cv
360.918 335.2 361.238 335.24 361.558 335.24 cv
361.978 335.24 362.308 335.17 362.538 335.03 cv
362.758 334.89 362.878 334.68 362.878 334.41 cv
362.878 334.17 362.788 333.98 362.628 333.85 cv
362.468 333.72 362.108 333.59 361.548 333.47 cv
361.238 333.4 li
360.678 333.28 360.268 333.1 360.028 332.86 cv
359.778 332.62 359.658 332.29 359.658 331.86 cv
359.658 331.35 359.838 330.95 360.198 330.67 cv
360.558 330.39 361.078 330.25 361.758 330.25 cv
362.088 330.25 362.398 330.28 362.698 330.33 cv
362.988 330.38 363.258 330.45 363.508 330.54 cv
f
57.6 285.049 mo
54.1 285.049 li
f
57.6 285.049 mo
54.1 285.049 li
@
32.6019 281.556 mo
36.4719 281.556 li
36.4719 282.386 li
33.5019 282.386 li
33.5019 284.176 li
33.6419 284.126 33.7919 284.086 33.9319 284.066 cv
34.0719 284.046 34.2219 284.026 34.3619 284.026 cv
35.1719 284.026 35.8119 284.256 36.2919 284.696 cv
36.7719 285.146 37.0119 285.746 37.0119 286.506 cv
37.0119 287.296 36.7619 287.906 36.2719 288.336 cv
35.7819 288.766 35.0919 288.976 34.2119 288.976 cv
33.9019 288.976 33.5919 288.946 33.2719 288.906 cv
32.9519 288.856 32.6319 288.786 32.2919 288.676 cv
32.2919 287.686 li
32.5819 287.846 32.8819 287.966 33.2019 288.046 cv
33.5119 288.126 33.8419 288.156 34.1919 288.156 cv
34.7519 288.156 35.2019 288.016 35.5319 287.716 cv
35.8519 287.416 36.0219 287.016 36.0219 286.506 cv
36.0219 286.006 35.8519 285.606 35.5319 285.306 cv
35.2019 285.006 34.7519 284.856 34.1919 284.856 cv
33.9319 284.856 33.6619 284.886 33.4019 284.946 cv
33.1419 285.006 32.8719 285.096 32.6019 285.216 cv
32.6019 281.556 li
f
41.0619 282.206 mo
40.5519 282.206 40.1719 282.456 39.9119 282.956 cv
39.6519 283.456 39.5319 284.206 39.5319 285.206 cv
39.5319 286.206 39.6519 286.956 39.9119 287.456 cv
40.1719 287.956 40.5519 288.206 41.0619 288.206 cv
41.5719 288.206 41.9519 287.956 42.2119 287.456 cv
42.4619 286.956 42.5919 286.206 42.5919 285.206 cv
42.5919 284.206 42.4619 283.456 42.2119 282.956 cv
41.9519 282.456 41.5719 282.206 41.0619 282.206 cv
41.0619 281.426 mo
41.8719 281.426 42.4919 281.756 42.9319 282.396 cv
43.3619 283.046 43.5819 283.986 43.5819 285.206 cv
43.5819 286.436 43.3619 287.376 42.9319 288.016 cv
42.4919 288.656 41.8719 288.976 41.0619 288.976 cv
40.2419 288.976 39.6119 288.656 39.1819 288.016 cv
38.7519 287.376 38.5419 286.436 38.5419 285.206 cv
38.5419 283.986 38.7519 283.046 39.1819 282.396 cv
39.6119 281.756 40.2419 281.426 41.0619 281.426 cv
f
47.4219 282.206 mo
46.9119 282.206 46.5319 282.456 46.2719 282.956 cv
46.0119 283.456 45.8919 284.206 45.8919 285.206 cv
45.8919 286.206 46.0119 286.956 46.2719 287.456 cv
46.5319 287.956 46.9119 288.206 47.4219 288.206 cv
47.9319 288.206 48.3119 287.956 48.5719 287.456 cv
48.8219 286.956 48.9519 286.206 48.9519 285.206 cv
48.9519 284.206 48.8219 283.456 48.5719 282.956 cv
48.3119 282.456 47.9319 282.206 47.4219 282.206 cv
47.4219 281.426 mo
48.2319 281.426 48.8519 281.756 49.2919 282.396 cv
49.7219 283.046 49.9419 283.986 49.9419 285.206 cv
49.9419 286.436 49.7219 287.376 49.2919 288.016 cv
48.8519 288.656 48.2319 288.976 47.4219 288.976 cv
46.6019 288.976 45.9719 288.656 45.5419 288.016 cv
45.1119 287.376 44.9019 286.436 44.9019 285.206 cv
44.9019 283.986 45.1119 283.046 45.5419 282.396 cv
45.9719 281.756 46.6019 281.426 47.4219 281.426 cv
f
57.6 254.703 mo
54.1 254.703 li
f
57.6 254.703 mo
54.1 254.703 li
@
26.4025 257.67 mo
28.0125 257.67 li
28.0125 252.11 li
26.2625 252.46 li
26.2625 251.56 li
28.0025 251.21 li
28.9925 251.21 li
28.9925 257.67 li
30.6025 257.67 li
30.6025 258.5 li
26.4025 258.5 li
26.4025 257.67 li
f
34.7025 251.86 mo
34.1925 251.86 33.8125 252.11 33.5525 252.61 cv
33.2925 253.11 33.1725 253.86 33.1725 254.86 cv
33.1725 255.86 33.2925 256.61 33.5525 257.11 cv
33.8125 257.61 34.1925 257.86 34.7025 257.86 cv
35.2125 257.86 35.5925 257.61 35.8525 257.11 cv
36.1025 256.61 36.2325 255.86 36.2325 254.86 cv
36.2325 253.86 36.1025 253.11 35.8525 252.61 cv
35.5925 252.11 35.2125 251.86 34.7025 251.86 cv
34.7025 251.08 mo
35.5125 251.08 36.1325 251.41 36.5725 252.05 cv
37.0025 252.7 37.2225 253.64 37.2225 254.86 cv
37.2225 256.09 37.0025 257.03 36.5725 257.67 cv
36.1325 258.31 35.5125 258.63 34.7025 258.63 cv
33.8825 258.63 33.2525 258.31 32.8225 257.67 cv
32.3925 257.03 32.1825 256.09 32.1825 254.86 cv
32.1825 253.64 32.3925 252.7 32.8225 252.05 cv
33.2525 251.41 33.8825 251.08 34.7025 251.08 cv
f
41.0625 251.86 mo
40.5525 251.86 40.1725 252.11 39.9125 252.61 cv
39.6525 253.11 39.5325 253.86 39.5325 254.86 cv
39.5325 255.86 39.6525 256.61 39.9125 257.11 cv
40.1725 257.61 40.5525 257.86 41.0625 257.86 cv
41.5725 257.86 41.9525 257.61 42.2125 257.11 cv
42.4625 256.61 42.5925 255.86 42.5925 254.86 cv
42.5925 253.86 42.4625 253.11 42.2125 252.61 cv
41.9525 252.11 41.5725 251.86 41.0625 251.86 cv
41.0625 251.08 mo
41.8725 251.08 42.4925 251.41 42.9325 252.05 cv
43.3625 252.7 43.5825 253.64 43.5825 254.86 cv
43.5825 256.09 43.3625 257.03 42.9325 257.67 cv
42.4925 258.31 41.8725 258.63 41.0625 258.63 cv
40.2425 258.63 39.6125 258.31 39.1825 257.67 cv
38.7525 257.03 38.5425 256.09 38.5425 254.86 cv
38.5425 253.64 38.7525 252.7 39.1825 252.05 cv
39.6125 251.41 40.2425 251.08 41.0625 251.08 cv
f
47.4225 251.86 mo
46.9125 251.86 46.5325 252.11 46.2725 252.61 cv
46.0125 253.11 45.8925 253.86 45.8925 254.86 cv
45.8925 255.86 46.0125 256.61 46.2725 257.11 cv
46.5325 257.61 46.9125 257.86 47.4225 257.86 cv
47.9325 257.86 48.3125 257.61 48.5725 257.11 cv
48.8225 256.61 48.9525 255.86 48.9525 254.86 cv
48.9525 253.86 48.8225 253.11 48.5725 252.61 cv
48.3125 252.11 47.9325 251.86 47.4225 251.86 cv
47.4225 251.08 mo
48.2325 251.08 48.8525 251.41 49.2925 252.05 cv
49.7225 252.7 49.9425 253.64 49.9425 254.86 cv
49.9425 256.09 49.7225 257.03 49.2925 257.67 cv
48.8525 258.31 48.2325 258.63 47.4225 258.63 cv
46.6025 258.63 45.9725 258.31 45.5425 257.67 cv
45.1125 257.03 44.9025 256.09 44.9025 254.86 cv
44.9025 253.64 45.1125 252.7 45.5425 252.05 cv
45.9725 251.41 46.6025 251.08 47.4225 251.08 cv
f
57.6 224.356 mo
54.1 224.356 li
f
57.6 224.356 mo
54.1 224.356 li
@
26.4025 227.323 mo
28.0125 227.323 li
28.0125 221.763 li
26.2625 222.113 li
26.2625 221.213 li
28.0025 220.863 li
28.9925 220.863 li
28.9925 227.323 li
30.6025 227.323 li
30.6025 228.153 li
26.4025 228.153 li
26.4025 227.323 li
f
32.6025 220.863 mo
36.4725 220.863 li
36.4725 221.693 li
33.5025 221.693 li
33.5025 223.483 li
33.6425 223.433 33.7925 223.393 33.9325 223.373 cv
34.0725 223.353 34.2225 223.333 34.3625 223.333 cv
35.1725 223.333 35.8125 223.563 36.2925 224.003 cv
36.7725 224.453 37.0125 225.053 37.0125 225.813 cv
37.0125 226.603 36.7625 227.213 36.2725 227.643 cv
35.7825 228.073 35.0925 228.283 34.2125 228.283 cv
33.9025 228.283 33.5925 228.253 33.2725 228.213 cv
32.9525 228.163 32.6325 228.093 32.2925 227.983 cv
32.2925 226.993 li
32.5825 227.153 32.8825 227.273 33.2025 227.353 cv
33.5125 227.433 33.8425 227.463 34.1925 227.463 cv
34.7525 227.463 35.2025 227.323 35.5325 227.023 cv
35.8525 226.723 36.0225 226.323 36.0225 225.813 cv
36.0225 225.313 35.8525 224.913 35.5325 224.613 cv
35.2025 224.313 34.7525 224.163 34.1925 224.163 cv
33.9325 224.163 33.6625 224.193 33.4025 224.253 cv
33.1425 224.313 32.8725 224.403 32.6025 224.523 cv
32.6025 220.863 li
f
41.0625 221.513 mo
40.5525 221.513 40.1725 221.763 39.9125 222.263 cv
39.6525 222.763 39.5325 223.513 39.5325 224.513 cv
39.5325 225.513 39.6525 226.263 39.9125 226.763 cv
40.1725 227.263 40.5525 227.513 41.0625 227.513 cv
41.5725 227.513 41.9525 227.263 42.2125 226.763 cv
42.4625 226.263 42.5925 225.513 42.5925 224.513 cv
42.5925 223.513 42.4625 222.763 42.2125 222.263 cv
41.9525 221.763 41.5725 221.513 41.0625 221.513 cv
41.0625 220.733 mo
41.8725 220.733 42.4925 221.063 42.9325 221.703 cv
43.3625 222.353 43.5825 223.293 43.5825 224.513 cv
43.5825 225.743 43.3625 226.683 42.9325 227.323 cv
42.4925 227.963 41.8725 228.283 41.0625 228.283 cv
40.2425 228.283 39.6125 227.963 39.1825 227.323 cv
38.7525 226.683 38.5425 225.743 38.5425 224.513 cv
38.5425 223.293 38.7525 222.353 39.1825 221.703 cv
39.6125 221.063 40.2425 220.733 41.0625 220.733 cv
f
47.4225 221.513 mo
46.9125 221.513 46.5325 221.763 46.2725 222.263 cv
46.0125 222.763 45.8925 223.513 45.8925 224.513 cv
45.8925 225.513 46.0125 226.263 46.2725 226.763 cv
46.5325 227.263 46.9125 227.513 47.4225 227.513 cv
47.9325 227.513 48.3125 227.263 48.5725 226.763 cv
48.8225 226.263 48.9525 225.513 48.9525 224.513 cv
48.9525 223.513 48.8225 222.763 48.5725 222.263 cv
48.3125 221.763 47.9325 221.513 47.4225 221.513 cv
47.4225 220.733 mo
48.2325 220.733 48.8525 221.063 49.2925 221.703 cv
49.7225 222.353 49.9425 223.293 49.9425 224.513 cv
49.9425 225.743 49.7225 226.683 49.2925 227.323 cv
48.8525 227.963 48.2325 228.283 47.4225 228.283 cv
46.6025 228.283 45.9725 227.963 45.5425 227.323 cv
45.1125 226.683 44.9025 225.743 44.9025 224.513 cv
44.9025 223.293 45.1125 222.353 45.5425 221.703 cv
45.9725 221.063 46.6025 220.733 47.4225 220.733 cv
f
57.6 194.01 mo
54.1 194.01 li
f
57.6 194.01 mo
54.1 194.01 li
@
27.0825 196.977 mo
30.5225 196.977 li
30.5225 197.807 li
25.8925 197.807 li
25.8925 196.977 li
26.2625 196.597 26.7725 196.077 27.4225 195.417 cv
28.0625 194.767 28.4725 194.347 28.6425 194.157 cv
28.9625 193.807 29.1825 193.507 29.3025 193.257 cv
29.4225 193.017 29.4925 192.767 29.4925 192.527 cv
29.4925 192.147 29.3525 191.827 29.0825 191.587 cv
28.8125 191.347 28.4625 191.217 28.0225 191.217 cv
27.7125 191.217 27.3825 191.277 27.0425 191.377 cv
26.7025 191.487 26.3325 191.647 25.9425 191.867 cv
25.9425 190.867 li
26.3425 190.707 26.7125 190.587 27.0525 190.507 cv
27.3925 190.427 27.7125 190.387 28.0025 190.387 cv
28.7525 190.387 29.3525 190.577 29.8025 190.957 cv
30.2525 191.337 30.4825 191.837 30.4825 192.467 cv
30.4825 192.767 30.4225 193.057 30.3125 193.317 cv
30.2025 193.587 30.0025 193.907 29.7025 194.267 cv
29.6225 194.367 29.3625 194.637 28.9225 195.087 cv
28.4825 195.537 27.8725 196.167 27.0825 196.977 cv
f
34.7025 191.167 mo
34.1925 191.167 33.8125 191.417 33.5525 191.917 cv
33.2925 192.417 33.1725 193.167 33.1725 194.167 cv
33.1725 195.167 33.2925 195.917 33.5525 196.417 cv
33.8125 196.917 34.1925 197.167 34.7025 197.167 cv
35.2125 197.167 35.5925 196.917 35.8525 196.417 cv
36.1025 195.917 36.2325 195.167 36.2325 194.167 cv
36.2325 193.167 36.1025 192.417 35.8525 191.917 cv
35.5925 191.417 35.2125 191.167 34.7025 191.167 cv
34.7025 190.387 mo
35.5125 190.387 36.1325 190.717 36.5725 191.357 cv
37.0025 192.007 37.2225 192.947 37.2225 194.167 cv
37.2225 195.397 37.0025 196.337 36.5725 196.977 cv
36.1325 197.617 35.5125 197.937 34.7025 197.937 cv
33.8825 197.937 33.2525 197.617 32.8225 196.977 cv
32.3925 196.337 32.1825 195.397 32.1825 194.167 cv
32.1825 192.947 32.3925 192.007 32.8225 191.357 cv
33.2525 190.717 33.8825 190.387 34.7025 190.387 cv
f
41.0625 191.167 mo
40.5525 191.167 40.1725 191.417 39.9125 191.917 cv
39.6525 192.417 39.5325 193.167 39.5325 194.167 cv
39.5325 195.167 39.6525 195.917 39.9125 196.417 cv
40.1725 196.917 40.5525 197.167 41.0625 197.167 cv
41.5725 197.167 41.9525 196.917 42.2125 196.417 cv
42.4625 195.917 42.5925 195.167 42.5925 194.167 cv
42.5925 193.167 42.4625 192.417 42.2125 191.917 cv
41.9525 191.417 41.5725 191.167 41.0625 191.167 cv
41.0625 190.387 mo
41.8725 190.387 42.4925 190.717 42.9325 191.357 cv
43.3625 192.007 43.5825 192.947 43.5825 194.167 cv
43.5825 195.397 43.3625 196.337 42.9325 196.977 cv
42.4925 197.617 41.8725 197.937 41.0625 197.937 cv
40.2425 197.937 39.6125 197.617 39.1825 196.977 cv
38.7525 196.337 38.5425 195.397 38.5425 194.167 cv
38.5425 192.947 38.7525 192.007 39.1825 191.357 cv
39.6125 190.717 40.2425 190.387 41.0625 190.387 cv
f
47.4225 191.167 mo
46.9125 191.167 46.5325 191.417 46.2725 191.917 cv
46.0125 192.417 45.8925 193.167 45.8925 194.167 cv
45.8925 195.167 46.0125 195.917 46.2725 196.417 cv
46.5325 196.917 46.9125 197.167 47.4225 197.167 cv
47.9325 197.167 48.3125 196.917 48.5725 196.417 cv
48.8225 195.917 48.9525 195.167 48.9525 194.167 cv
48.9525 193.167 48.8225 192.417 48.5725 191.917 cv
48.3125 191.417 47.9325 191.167 47.4225 191.167 cv
47.4225 190.387 mo
48.2325 190.387 48.8525 190.717 49.2925 191.357 cv
49.7225 192.007 49.9425 192.947 49.9425 194.167 cv
49.9425 195.397 49.7225 196.337 49.2925 196.977 cv
48.8525 197.617 48.2325 197.937 47.4225 197.937 cv
46.6025 197.937 45.9725 197.617 45.5425 196.977 cv
45.1125 196.337 44.9025 195.397 44.9025 194.167 cv
44.9025 192.947 45.1125 192.007 45.5425 191.357 cv
45.9725 190.717 46.6025 190.387 47.4225 190.387 cv
f
57.6 163.664 mo
54.1 163.664 li
f
57.6 163.664 mo
54.1 163.664 li
@
27.0825 166.631 mo
30.5225 166.631 li
30.5225 167.461 li
25.8925 167.461 li
25.8925 166.631 li
26.2625 166.251 26.7725 165.731 27.4225 165.071 cv
28.0625 164.421 28.4725 164.001 28.6425 163.811 cv
28.9625 163.461 29.1825 163.161 29.3025 162.911 cv
29.4225 162.671 29.4925 162.421 29.4925 162.181 cv
29.4925 161.801 29.3525 161.481 29.0825 161.241 cv
28.8125 161.001 28.4625 160.871 28.0225 160.871 cv
27.7125 160.871 27.3825 160.931 27.0425 161.031 cv
26.7025 161.141 26.3325 161.301 25.9425 161.521 cv
25.9425 160.521 li
26.3425 160.361 26.7125 160.241 27.0525 160.161 cv
27.3925 160.081 27.7125 160.041 28.0025 160.041 cv
28.7525 160.041 29.3525 160.231 29.8025 160.611 cv
30.2525 160.991 30.4825 161.491 30.4825 162.121 cv
30.4825 162.421 30.4225 162.711 30.3125 162.971 cv
30.2025 163.241 30.0025 163.561 29.7025 163.921 cv
29.6225 164.021 29.3625 164.291 28.9225 164.741 cv
28.4825 165.191 27.8725 165.821 27.0825 166.631 cv
f
32.6025 160.171 mo
36.4725 160.171 li
36.4725 161.001 li
33.5025 161.001 li
33.5025 162.791 li
33.6425 162.741 33.7925 162.701 33.9325 162.681 cv
34.0725 162.661 34.2225 162.641 34.3625 162.641 cv
35.1725 162.641 35.8125 162.871 36.2925 163.311 cv
36.7725 163.761 37.0125 164.361 37.0125 165.121 cv
37.0125 165.911 36.7625 166.521 36.2725 166.951 cv
35.7825 167.381 35.0925 167.591 34.2125 167.591 cv
33.9025 167.591 33.5925 167.561 33.2725 167.521 cv
32.9525 167.471 32.6325 167.401 32.2925 167.291 cv
32.2925 166.301 li
32.5825 166.461 32.8825 166.581 33.2025 166.661 cv
33.5125 166.741 33.8425 166.771 34.1925 166.771 cv
34.7525 166.771 35.2025 166.631 35.5325 166.331 cv
35.8525 166.031 36.0225 165.631 36.0225 165.121 cv
36.0225 164.621 35.8525 164.221 35.5325 163.921 cv
35.2025 163.621 34.7525 163.471 34.1925 163.471 cv
33.9325 163.471 33.6625 163.501 33.4025 163.561 cv
33.1425 163.621 32.8725 163.711 32.6025 163.831 cv
32.6025 160.171 li
f
41.0625 160.821 mo
40.5525 160.821 40.1725 161.071 39.9125 161.571 cv
39.6525 162.071 39.5325 162.821 39.5325 163.821 cv
39.5325 164.821 39.6525 165.571 39.9125 166.071 cv
40.1725 166.571 40.5525 166.821 41.0625 166.821 cv
41.5725 166.821 41.9525 166.571 42.2125 166.071 cv
42.4625 165.571 42.5925 164.821 42.5925 163.821 cv
42.5925 162.821 42.4625 162.071 42.2125 161.571 cv
41.9525 161.071 41.5725 160.821 41.0625 160.821 cv
41.0625 160.041 mo
41.8725 160.041 42.4925 160.371 42.9325 161.011 cv
43.3625 161.661 43.5825 162.601 43.5825 163.821 cv
43.5825 165.051 43.3625 165.991 42.9325 166.631 cv
42.4925 167.271 41.8725 167.591 41.0625 167.591 cv
40.2425 167.591 39.6125 167.271 39.1825 166.631 cv
38.7525 165.991 38.5425 165.051 38.5425 163.821 cv
38.5425 162.601 38.7525 161.661 39.1825 161.011 cv
39.6125 160.371 40.2425 160.041 41.0625 160.041 cv
f
47.4225 160.821 mo
46.9125 160.821 46.5325 161.071 46.2725 161.571 cv
46.0125 162.071 45.8925 162.821 45.8925 163.821 cv
45.8925 164.821 46.0125 165.571 46.2725 166.071 cv
46.5325 166.571 46.9125 166.821 47.4225 166.821 cv
47.9325 166.821 48.3125 166.571 48.5725 166.071 cv
48.8225 165.571 48.9525 164.821 48.9525 163.821 cv
48.9525 162.821 48.8225 162.071 48.5725 161.571 cv
48.3125 161.071 47.9325 160.821 47.4225 160.821 cv
47.4225 160.041 mo
48.2325 160.041 48.8525 160.371 49.2925 161.011 cv
49.7225 161.661 49.9425 162.601 49.9425 163.821 cv
49.9425 165.051 49.7225 165.991 49.2925 166.631 cv
48.8525 167.271 48.2325 167.591 47.4225 167.591 cv
46.6025 167.591 45.9725 167.271 45.5425 166.631 cv
45.1125 165.991 44.9025 165.051 44.9025 163.821 cv
44.9025 162.601 45.1125 161.661 45.5425 161.011 cv
45.9725 160.371 46.6025 160.041 47.4225 160.041 cv
f
57.6 133.318 mo
54.1 133.318 li
f
57.6 133.318 mo
54.1 133.318 li
@
29.2225 133.185 mo
29.6925 133.285 30.0625 133.495 30.3225 133.815 cv
30.5825 134.135 30.7225 134.535 30.7225 134.995 cv
30.7225 135.715 30.4725 136.275 29.9825 136.665 cv
29.4825 137.055 28.7825 137.245 27.8725 137.245 cv
27.5625 137.245 27.2425 137.215 26.9225 137.155 cv
26.6025 137.105 26.2625 137.015 25.9225 136.895 cv
25.9225 135.945 li
26.1925 136.105 26.4925 136.225 26.8225 136.305 cv
27.1425 136.385 27.4825 136.425 27.8425 136.425 cv
28.4625 136.425 28.9325 136.305 29.2525 136.065 cv
29.5725 135.825 29.7425 135.465 29.7425 134.995 cv
29.7425 134.575 29.5925 134.235 29.2925 133.995 cv
28.9925 133.755 28.5725 133.625 28.0325 133.625 cv
27.1825 133.625 li
27.1825 132.815 li
28.0725 132.815 li
28.5525 132.815 28.9225 132.725 29.1825 132.525 cv
29.4425 132.335 29.5725 132.055 29.5725 131.685 cv
29.5725 131.315 29.4325 131.025 29.1725 130.825 cv
28.9025 130.625 28.5225 130.525 28.0325 130.525 cv
27.7625 130.525 27.4725 130.555 27.1625 130.615 cv
26.8525 130.675 26.5125 130.765 26.1425 130.885 cv
26.1425 130.005 li
26.5125 129.905 26.8625 129.825 27.1925 129.775 cv
27.5125 129.725 27.8225 129.695 28.1225 129.695 cv
28.8625 129.695 29.4525 129.865 29.8925 130.205 cv
30.3325 130.545 30.5525 131.005 30.5525 131.585 cv
30.5525 131.985 30.4325 132.325 30.2025 132.605 cv
29.9725 132.885 29.6425 133.085 29.2225 133.185 cv
f
34.7025 130.475 mo
34.1925 130.475 33.8125 130.725 33.5525 131.225 cv
33.2925 131.725 33.1725 132.475 33.1725 133.475 cv
33.1725 134.475 33.2925 135.225 33.5525 135.725 cv
33.8125 136.225 34.1925 136.475 34.7025 136.475 cv
35.2125 136.475 35.5925 136.225 35.8525 135.725 cv
36.1025 135.225 36.2325 134.475 36.2325 133.475 cv
36.2325 132.475 36.1025 131.725 35.8525 131.225 cv
35.5925 130.725 35.2125 130.475 34.7025 130.475 cv
34.7025 129.695 mo
35.5125 129.695 36.1325 130.025 36.5725 130.665 cv
37.0025 131.315 37.2225 132.255 37.2225 133.475 cv
37.2225 134.705 37.0025 135.645 36.5725 136.285 cv
36.1325 136.925 35.5125 137.245 34.7025 137.245 cv
33.8825 137.245 33.2525 136.925 32.8225 136.285 cv
32.3925 135.645 32.1825 134.705 32.1825 133.475 cv
32.1825 132.255 32.3925 131.315 32.8225 130.665 cv
33.2525 130.025 33.8825 129.695 34.7025 129.695 cv
f
41.0625 130.475 mo
40.5525 130.475 40.1725 130.725 39.9125 131.225 cv
39.6525 131.725 39.5325 132.475 39.5325 133.475 cv
39.5325 134.475 39.6525 135.225 39.9125 135.725 cv
40.1725 136.225 40.5525 136.475 41.0625 136.475 cv
41.5725 136.475 41.9525 136.225 42.2125 135.725 cv
42.4625 135.225 42.5925 134.475 42.5925 133.475 cv
42.5925 132.475 42.4625 131.725 42.2125 131.225 cv
41.9525 130.725 41.5725 130.475 41.0625 130.475 cv
41.0625 129.695 mo
41.8725 129.695 42.4925 130.025 42.9325 130.665 cv
43.3625 131.315 43.5825 132.255 43.5825 133.475 cv
43.5825 134.705 43.3625 135.645 42.9325 136.285 cv
42.4925 136.925 41.8725 137.245 41.0625 137.245 cv
40.2425 137.245 39.6125 136.925 39.1825 136.285 cv
38.7525 135.645 38.5425 134.705 38.5425 133.475 cv
38.5425 132.255 38.7525 131.315 39.1825 130.665 cv
39.6125 130.025 40.2425 129.695 41.0625 129.695 cv
f
47.4225 130.475 mo
46.9125 130.475 46.5325 130.725 46.2725 131.225 cv
46.0125 131.725 45.8925 132.475 45.8925 133.475 cv
45.8925 134.475 46.0125 135.225 46.2725 135.725 cv
46.5325 136.225 46.9125 136.475 47.4225 136.475 cv
47.9325 136.475 48.3125 136.225 48.5725 135.725 cv
48.8225 135.225 48.9525 134.475 48.9525 133.475 cv
48.9525 132.475 48.8225 131.725 48.5725 131.225 cv
48.3125 130.725 47.9325 130.475 47.4225 130.475 cv
47.4225 129.695 mo
48.2325 129.695 48.8525 130.025 49.2925 130.665 cv
49.7225 131.315 49.9425 132.255 49.9425 133.475 cv
49.9425 134.705 49.7225 135.645 49.2925 136.285 cv
48.8525 136.925 48.2325 137.245 47.4225 137.245 cv
46.6025 137.245 45.9725 136.925 45.5425 136.285 cv
45.1125 135.645 44.9025 134.705 44.9025 133.475 cv
44.9025 132.255 45.1125 131.315 45.5425 130.665 cv
45.9725 130.025 46.6025 129.695 47.4225 129.695 cv
f
57.6 102.972 mo
54.1 102.972 li
f
57.6 102.972 mo
54.1 102.972 li
@
29.2225 102.839 mo
29.6925 102.939 30.0625 103.149 30.3225 103.469 cv
30.5825 103.789 30.7225 104.189 30.7225 104.649 cv
30.7225 105.369 30.4725 105.929 29.9825 106.319 cv
29.4825 106.709 28.7825 106.899 27.8725 106.899 cv
27.5625 106.899 27.2425 106.869 26.9225 106.809 cv
26.6025 106.759 26.2625 106.669 25.9225 106.549 cv
25.9225 105.599 li
26.1925 105.759 26.4925 105.879 26.8225 105.959 cv
27.1425 106.039 27.4825 106.079 27.8425 106.079 cv
28.4625 106.079 28.9325 105.959 29.2525 105.719 cv
29.5725 105.479 29.7425 105.119 29.7425 104.649 cv
29.7425 104.229 29.5925 103.889 29.2925 103.649 cv
28.9925 103.409 28.5725 103.279 28.0325 103.279 cv
27.1825 103.279 li
27.1825 102.469 li
28.0725 102.469 li
28.5525 102.469 28.9225 102.379 29.1825 102.179 cv
29.4425 101.989 29.5725 101.709 29.5725 101.339 cv
29.5725 100.969 29.4325 100.679 29.1725 100.479 cv
28.9025 100.279 28.5225 100.179 28.0325 100.179 cv
27.7625 100.179 27.4725 100.209 27.1625 100.269 cv
26.8525 100.329 26.5125 100.419 26.1425 100.539 cv
26.1425 99.6585 li
26.5125 99.5585 26.8625 99.4785 27.1925 99.4285 cv
27.5125 99.3785 27.8225 99.3485 28.1225 99.3485 cv
28.8625 99.3485 29.4525 99.5185 29.8925 99.8585 cv
30.3325 100.199 30.5525 100.659 30.5525 101.239 cv
30.5525 101.639 30.4325 101.979 30.2025 102.259 cv
29.9725 102.539 29.6425 102.739 29.2225 102.839 cv
f
32.6025 99.4785 mo
36.4725 99.4785 li
36.4725 100.309 li
33.5025 100.309 li
33.5025 102.099 li
33.6425 102.049 33.7925 102.009 33.9325 101.989 cv
34.0725 101.969 34.2225 101.949 34.3625 101.949 cv
35.1725 101.949 35.8125 102.179 36.2925 102.619 cv
36.7725 103.069 37.0125 103.669 37.0125 104.429 cv
37.0125 105.219 36.7625 105.829 36.2725 106.259 cv
35.7825 106.689 35.0925 106.899 34.2125 106.899 cv
33.9025 106.899 33.5925 106.869 33.2725 106.829 cv
32.9525 106.779 32.6325 106.709 32.2925 106.599 cv
32.2925 105.609 li
32.5825 105.769 32.8825 105.889 33.2025 105.969 cv
33.5125 106.049 33.8425 106.079 34.1925 106.079 cv
34.7525 106.079 35.2025 105.939 35.5325 105.639 cv
35.8525 105.339 36.0225 104.939 36.0225 104.429 cv
36.0225 103.929 35.8525 103.529 35.5325 103.229 cv
35.2025 102.929 34.7525 102.779 34.1925 102.779 cv
33.9325 102.779 33.6625 102.809 33.4025 102.869 cv
33.1425 102.929 32.8725 103.019 32.6025 103.139 cv
32.6025 99.4785 li
f
41.0625 100.129 mo
40.5525 100.129 40.1725 100.379 39.9125 100.879 cv
39.6525 101.379 39.5325 102.129 39.5325 103.129 cv
39.5325 104.129 39.6525 104.879 39.9125 105.379 cv
40.1725 105.879 40.5525 106.129 41.0625 106.129 cv
41.5725 106.129 41.9525 105.879 42.2125 105.379 cv
42.4625 104.879 42.5925 104.129 42.5925 103.129 cv
42.5925 102.129 42.4625 101.379 42.2125 100.879 cv
41.9525 100.379 41.5725 100.129 41.0625 100.129 cv
41.0625 99.3485 mo
41.8725 99.3485 42.4925 99.6785 42.9325 100.319 cv
43.3625 100.969 43.5825 101.909 43.5825 103.129 cv
43.5825 104.359 43.3625 105.299 42.9325 105.939 cv
42.4925 106.579 41.8725 106.899 41.0625 106.899 cv
40.2425 106.899 39.6125 106.579 39.1825 105.939 cv
38.7525 105.299 38.5425 104.359 38.5425 103.129 cv
38.5425 101.909 38.7525 100.969 39.1825 100.319 cv
39.6125 99.6785 40.2425 99.3485 41.0625 99.3485 cv
f
47.4225 100.129 mo
46.9125 100.129 46.5325 100.379 46.2725 100.879 cv
46.0125 101.379 45.8925 102.129 45.8925 103.129 cv
45.8925 104.129 46.0125 104.879 46.2725 105.379 cv
46.5325 105.879 46.9125 106.129 47.4225 106.129 cv
47.9325 106.129 48.3125 105.879 48.5725 105.379 cv
48.8225 104.879 48.9525 104.129 48.9525 103.129 cv
48.9525 102.129 48.8225 101.379 48.5725 100.879 cv
48.3125 100.379 47.9325 100.129 47.4225 100.129 cv
47.4225 99.3485 mo
48.2325 99.3485 48.8525 99.6785 49.2925 100.319 cv
49.7225 100.969 49.9425 101.909 49.9425 103.129 cv
49.9425 104.359 49.7225 105.299 49.2925 105.939 cv
48.8525 106.579 48.2325 106.899 47.4225 106.899 cv
46.6025 106.899 45.9725 106.579 45.5425 105.939 cv
45.1125 105.299 44.9025 104.359 44.9025 103.129 cv
44.9025 101.909 45.1125 100.969 45.5425 100.319 cv
45.9725 99.6785 46.6025 99.3485 47.4225 99.3485 cv
f
57.6 72.6254 mo
54.1 72.6254 li
f
57.6 72.6254 mo
54.1 72.6254 li
@
28.9425 69.9923 mo
26.4525 73.8823 li
28.9425 73.8823 li
28.9425 69.9923 li
28.6825 69.1323 mo
29.9225 69.1323 li
29.9225 73.8823 li
30.9625 73.8823 li
30.9625 74.7023 li
29.9225 74.7023 li
29.9225 76.4223 li
28.9425 76.4223 li
28.9425 74.7023 li
25.6525 74.7023 li
25.6525 73.7523 li
28.6825 69.1323 li
f
34.7025 69.7823 mo
34.1925 69.7823 33.8125 70.0323 33.5525 70.5323 cv
33.2925 71.0323 33.1725 71.7823 33.1725 72.7823 cv
33.1725 73.7823 33.2925 74.5323 33.5525 75.0323 cv
33.8125 75.5323 34.1925 75.7823 34.7025 75.7823 cv
35.2125 75.7823 35.5925 75.5323 35.8525 75.0323 cv
36.1025 74.5323 36.2325 73.7823 36.2325 72.7823 cv
36.2325 71.7823 36.1025 71.0323 35.8525 70.5323 cv
35.5925 70.0323 35.2125 69.7823 34.7025 69.7823 cv
34.7025 69.0023 mo
35.5125 69.0023 36.1325 69.3323 36.5725 69.9723 cv
37.0025 70.6223 37.2225 71.5623 37.2225 72.7823 cv
37.2225 74.0123 37.0025 74.9523 36.5725 75.5923 cv
36.1325 76.2323 35.5125 76.5523 34.7025 76.5523 cv
33.8825 76.5523 33.2525 76.2323 32.8225 75.5923 cv
32.3925 74.9523 32.1825 74.0123 32.1825 72.7823 cv
32.1825 71.5623 32.3925 70.6223 32.8225 69.9723 cv
33.2525 69.3323 33.8825 69.0023 34.7025 69.0023 cv
f
41.0625 69.7823 mo
40.5525 69.7823 40.1725 70.0323 39.9125 70.5323 cv
39.6525 71.0323 39.5325 71.7823 39.5325 72.7823 cv
39.5325 73.7823 39.6525 74.5323 39.9125 75.0323 cv
40.1725 75.5323 40.5525 75.7823 41.0625 75.7823 cv
41.5725 75.7823 41.9525 75.5323 42.2125 75.0323 cv
42.4625 74.5323 42.5925 73.7823 42.5925 72.7823 cv
42.5925 71.7823 42.4625 71.0323 42.2125 70.5323 cv
41.9525 70.0323 41.5725 69.7823 41.0625 69.7823 cv
41.0625 69.0023 mo
41.8725 69.0023 42.4925 69.3323 42.9325 69.9723 cv
43.3625 70.6223 43.5825 71.5623 43.5825 72.7823 cv
43.5825 74.0123 43.3625 74.9523 42.9325 75.5923 cv
42.4925 76.2323 41.8725 76.5523 41.0625 76.5523 cv
40.2425 76.5523 39.6125 76.2323 39.1825 75.5923 cv
38.7525 74.9523 38.5425 74.0123 38.5425 72.7823 cv
38.5425 71.5623 38.7525 70.6223 39.1825 69.9723 cv
39.6125 69.3323 40.2425 69.0023 41.0625 69.0023 cv
f
47.4225 69.7823 mo
46.9125 69.7823 46.5325 70.0323 46.2725 70.5323 cv
46.0125 71.0323 45.8925 71.7823 45.8925 72.7823 cv
45.8925 73.7823 46.0125 74.5323 46.2725 75.0323 cv
46.5325 75.5323 46.9125 75.7823 47.4225 75.7823 cv
47.9325 75.7823 48.3125 75.5323 48.5725 75.0323 cv
48.8225 74.5323 48.9525 73.7823 48.9525 72.7823 cv
48.9525 71.7823 48.8225 71.0323 48.5725 70.5323 cv
48.3125 70.0323 47.9325 69.7823 47.4225 69.7823 cv
47.4225 69.0023 mo
48.2325 69.0023 48.8525 69.3323 49.2925 69.9723 cv
49.7225 70.6223 49.9425 71.5623 49.9425 72.7823 cv
49.9425 74.0123 49.7225 74.9523 49.2925 75.5923 cv
48.8525 76.2323 48.2325 76.5523 47.4225 76.5523 cv
46.6025 76.5523 45.9725 76.2323 45.5425 75.5923 cv
45.1125 74.9523 44.9025 74.0123 44.9025 72.7823 cv
44.9025 71.5623 45.1125 70.6223 45.5425 69.9723 cv
45.9725 69.3323 46.6025 69.0023 47.4225 69.0023 cv
f
57.6 42.2792 mo
54.1 42.2792 li
f
57.6 42.2792 mo
54.1 42.2792 li
@
28.9425 39.6461 mo
26.4525 43.5361 li
28.9425 43.5361 li
28.9425 39.6461 li
28.6825 38.7861 mo
29.9225 38.7861 li
29.9225 43.5361 li
30.9625 43.5361 li
30.9625 44.3561 li
29.9225 44.3561 li
29.9225 46.0761 li
28.9425 46.0761 li
28.9425 44.3561 li
25.6525 44.3561 li
25.6525 43.4061 li
28.6825 38.7861 li
f
32.6025 38.7861 mo
36.4725 38.7861 li
36.4725 39.6161 li
33.5025 39.6161 li
33.5025 41.4061 li
33.6425 41.3561 33.7925 41.3161 33.9325 41.2961 cv
34.0725 41.2761 34.2225 41.2561 34.3625 41.2561 cv
35.1725 41.2561 35.8125 41.4861 36.2925 41.9261 cv
36.7725 42.3761 37.0125 42.9761 37.0125 43.7361 cv
37.0125 44.5261 36.7625 45.1361 36.2725 45.5661 cv
35.7825 45.9961 35.0925 46.2061 34.2125 46.2061 cv
33.9025 46.2061 33.5925 46.1761 33.2725 46.1361 cv
32.9525 46.0861 32.6325 46.0161 32.2925 45.9061 cv
32.2925 44.9161 li
32.5825 45.0761 32.8825 45.1961 33.2025 45.2761 cv
33.5125 45.3561 33.8425 45.3861 34.1925 45.3861 cv
34.7525 45.3861 35.2025 45.2461 35.5325 44.9461 cv
35.8525 44.6461 36.0225 44.2461 36.0225 43.7361 cv
36.0225 43.2361 35.8525 42.8361 35.5325 42.5361 cv
35.2025 42.2361 34.7525 42.0861 34.1925 42.0861 cv
33.9325 42.0861 33.6625 42.1161 33.4025 42.1761 cv
33.1425 42.2361 32.8725 42.3261 32.6025 42.4461 cv
32.6025 38.7861 li
f
41.0625 39.4361 mo
40.5525 39.4361 40.1725 39.6861 39.9125 40.1861 cv
39.6525 40.6861 39.5325 41.4361 39.5325 42.4361 cv
39.5325 43.4361 39.6525 44.1861 39.9125 44.6861 cv
40.1725 45.1861 40.5525 45.4361 41.0625 45.4361 cv
41.5725 45.4361 41.9525 45.1861 42.2125 44.6861 cv
42.4625 44.1861 42.5925 43.4361 42.5925 42.4361 cv
42.5925 41.4361 42.4625 40.6861 42.2125 40.1861 cv
41.9525 39.6861 41.5725 39.4361 41.0625 39.4361 cv
41.0625 38.6561 mo
41.8725 38.6561 42.4925 38.9861 42.9325 39.6261 cv
43.3625 40.2761 43.5825 41.2161 43.5825 42.4361 cv
43.5825 43.6661 43.3625 44.6061 42.9325 45.2461 cv
42.4925 45.8861 41.8725 46.2061 41.0625 46.2061 cv
40.2425 46.2061 39.6125 45.8861 39.1825 45.2461 cv
38.7525 44.6061 38.5425 43.6661 38.5425 42.4361 cv
38.5425 41.2161 38.7525 40.2761 39.1825 39.6261 cv
39.6125 38.9861 40.2425 38.6561 41.0625 38.6561 cv
f
47.4225 39.4361 mo
46.9125 39.4361 46.5325 39.6861 46.2725 40.1861 cv
46.0125 40.6861 45.8925 41.4361 45.8925 42.4361 cv
45.8925 43.4361 46.0125 44.1861 46.2725 44.6861 cv
46.5325 45.1861 46.9125 45.4361 47.4225 45.4361 cv
47.9325 45.4361 48.3125 45.1861 48.5725 44.6861 cv
48.8225 44.1861 48.9525 43.4361 48.9525 42.4361 cv
48.9525 41.4361 48.8225 40.6861 48.5725 40.1861 cv
48.3125 39.6861 47.9325 39.4361 47.4225 39.4361 cv
47.4225 38.6561 mo
48.2325 38.6561 48.8525 38.9861 49.2925 39.6261 cv
49.7225 40.2761 49.9425 41.2161 49.9425 42.4361 cv
49.9425 43.6661 49.7225 44.6061 49.2925 45.2461 cv
48.8525 45.8861 48.2325 46.2061 47.4225 46.2061 cv
46.6025 46.2061 45.9725 45.8861 45.5425 45.2461 cv
45.1125 44.6061 44.9025 43.6661 44.9025 42.4361 cv
44.9025 41.2161 45.1125 40.2761 45.5425 39.6261 cv
45.9725 38.9861 46.6025 38.6561 47.4225 38.6561 cv
f
11.7944 242.228 mo
11.7944 236.068 li
12.6244 236.068 li
12.6244 238.658 li
19.0844 238.658 li
19.0844 239.648 li
12.6244 239.648 li
12.6244 242.228 li
11.7944 242.228 li
f
14.2444 233.038 mo
14.2444 233.518 14.4344 233.898 14.8144 234.178 cv
15.1944 234.458 15.7044 234.598 16.3544 234.598 cv
17.0144 234.598 17.5244 234.468 17.9044 234.188 cv
18.2844 233.908 18.4644 233.528 18.4644 233.038 cv
18.4644 232.558 18.2844 232.178 17.9044 231.898 cv
17.5244 231.618 17.0144 231.478 16.3544 231.478 cv
15.7144 231.478 15.1944 231.618 14.8144 231.898 cv
14.4344 232.178 14.2444 232.558 14.2444 233.038 cv
13.4844 233.038 mo
13.4844 232.258 13.7444 231.648 14.2444 231.198 cv
14.7544 230.758 15.4544 230.528 16.3544 230.528 cv
17.2544 230.528 17.9544 230.758 18.4544 231.198 cv
18.9644 231.648 19.2144 232.258 19.2144 233.038 cv
19.2144 233.828 18.9644 234.448 18.4544 234.888 cv
17.9544 235.328 17.2544 235.548 16.3544 235.548 cv
15.4544 235.548 14.7544 235.328 14.2444 234.888 cv
13.7444 234.448 13.4844 233.828 13.4844 233.038 cv
f
12.0644 228.148 mo
13.6144 228.148 li
13.6144 226.298 li
14.3144 226.298 li
14.3144 228.148 li
17.2844 228.148 li
17.7344 228.148 18.0244 228.088 18.1444 227.968 cv
18.2744 227.848 18.3344 227.598 18.3344 227.218 cv
18.3344 226.298 li
19.0844 226.298 li
19.0844 227.218 li
19.0844 227.918 18.9544 228.398 18.6944 228.658 cv
18.4344 228.918 17.9644 229.048 17.2844 229.048 cv
14.3144 229.048 li
14.3144 229.708 li
13.6144 229.708 li
13.6144 229.048 li
12.0644 229.048 li
12.0644 228.148 li
f
16.3344 222.628 mo
16.3344 223.358 16.4244 223.858 16.5844 224.138 cv
16.7544 224.418 17.0344 224.558 17.4344 224.558 cv
17.7544 224.558 18.0144 224.458 18.1944 224.248 cv
18.3844 224.038 18.4744 223.748 18.4744 223.388 cv
18.4744 222.888 18.3044 222.488 17.9444 222.188 cv
17.5944 221.888 17.1244 221.738 16.5344 221.738 cv
16.3344 221.738 li
16.3344 222.628 li
15.9644 220.838 mo
19.0844 220.838 li
19.0844 221.738 li
18.2544 221.738 li
18.5944 221.948 18.8344 222.208 18.9844 222.508 cv
19.1344 222.808 19.2144 223.188 19.2144 223.628 cv
19.2144 224.188 19.0644 224.638 18.7544 224.968 cv
18.4444 225.298 18.0244 225.458 17.4944 225.458 cv
16.8844 225.458 16.4244 225.258 16.1044 224.838 cv
15.7944 224.428 15.6344 223.818 15.6344 222.998 cv
15.6344 221.738 li
15.5444 221.738 li
15.1344 221.738 14.8144 221.878 14.5844 222.148 cv
14.3644 222.418 14.2444 222.798 14.2444 223.288 cv
14.2444 223.608 14.2844 223.908 14.3644 224.208 cv
14.4444 224.508 14.5544 224.788 14.6944 225.058 cv
13.8644 225.058 li
13.7444 224.738 13.6444 224.418 13.5844 224.108 cv
13.5244 223.798 13.4844 223.498 13.4844 223.198 cv
13.4844 222.408 13.6944 221.818 14.1044 221.428 cv
14.5144 221.038 15.1344 220.838 15.9644 220.838 cv
f
11.4844 218.988 mo
11.4844 218.088 li
19.0844 218.088 li
19.0844 218.988 li
11.4844 218.988 li
f
11.7944 213.988 mo
11.7944 207.828 li
12.6244 207.828 li
12.6244 210.418 li
19.0844 210.418 li
19.0844 211.408 li
12.6244 211.408 li
12.6244 213.988 li
11.7944 213.988 li
f
14.4544 203.748 mo
14.3944 203.848 14.3544 203.958 14.3244 204.078 cv
14.3044 204.198 14.2844 204.328 14.2844 204.468 cv
14.2844 204.978 14.4544 205.368 14.7844 205.638 cv
15.1144 205.918 15.5844 206.048 16.2044 206.048 cv
19.0844 206.048 li
19.0844 206.948 li
13.6144 206.948 li
13.6144 206.048 li
14.4644 206.048 li
14.1344 205.868 13.8844 205.618 13.7244 205.318 cv
13.5644 205.018 13.4844 204.648 13.4844 204.208 cv
13.4944 203.998 li
13.5044 203.928 13.5144 203.848 13.5344 203.748 cv
14.4544 203.748 li
f
16.3344 200.318 mo
16.3344 201.048 16.4244 201.548 16.5844 201.828 cv
16.7544 202.108 17.0344 202.248 17.4344 202.248 cv
17.7544 202.248 18.0144 202.148 18.1944 201.938 cv
18.3844 201.728 18.4744 201.438 18.4744 201.078 cv
18.4744 200.578 18.3044 200.178 17.9444 199.878 cv
17.5944 199.578 17.1244 199.428 16.5344 199.428 cv
16.3344 199.428 li
16.3344 200.318 li
15.9644 198.528 mo
19.0844 198.528 li
19.0844 199.428 li
18.2544 199.428 li
18.5944 199.638 18.8344 199.898 18.9844 200.198 cv
19.1344 200.498 19.2144 200.878 19.2144 201.318 cv
19.2144 201.878 19.0644 202.328 18.7544 202.658 cv
18.4444 202.988 18.0244 203.148 17.4944 203.148 cv
16.8844 203.148 16.4244 202.948 16.1044 202.528 cv
15.7944 202.118 15.6344 201.508 15.6344 200.688 cv
15.6344 199.428 li
15.5444 199.428 li
15.1344 199.428 14.8144 199.568 14.5844 199.838 cv
14.3644 200.108 14.2444 200.488 14.2444 200.978 cv
14.2444 201.298 14.2844 201.598 14.3644 201.898 cv
14.4444 202.198 14.5544 202.478 14.6944 202.748 cv
13.8644 202.748 li
13.7444 202.428 13.6444 202.108 13.5844 201.798 cv
13.5244 201.488 13.4844 201.188 13.4844 200.888 cv
13.4844 200.098 13.6944 199.508 14.1044 199.118 cv
14.5144 198.728 15.1344 198.528 15.9644 198.528 cv
f
15.7844 192.128 mo
19.0844 192.128 li
19.0844 193.028 li
15.8144 193.028 li
15.2944 193.028 14.9144 193.138 14.6544 193.338 cv
14.3944 193.538 14.2644 193.838 14.2644 194.238 cv
14.2644 194.728 14.4244 195.108 14.7344 195.388 cv
15.0444 195.668 15.4644 195.808 15.9944 195.808 cv
19.0844 195.808 li
19.0844 196.708 li
13.6144 196.708 li
13.6144 195.808 li
14.4644 195.808 li
14.1444 195.598 13.8944 195.348 13.7344 195.048 cv
13.5744 194.758 13.4844 194.418 13.4844 194.038 cv
13.4844 193.418 13.6844 192.938 14.0744 192.618 cv
14.4644 192.298 15.0344 192.128 15.7844 192.128 cv
f
13.7744 186.848 mo
14.6244 186.848 li
14.5044 187.108 14.4044 187.368 14.3344 187.638 cv
14.2744 187.918 14.2344 188.198 14.2344 188.488 cv
14.2344 188.938 14.3044 189.278 14.4444 189.498 cv
14.5844 189.718 14.7844 189.828 15.0544 189.828 cv
15.2644 189.828 15.4244 189.748 15.5444 189.588 cv
15.6644 189.428 15.7844 189.108 15.8844 188.628 cv
15.9544 188.318 li
16.0944 187.678 16.2944 187.228 16.5344 186.958 cv
16.7844 186.698 17.1344 186.558 17.5744 186.558 cv
18.0844 186.558 18.4844 186.758 18.7744 187.158 cv
19.0744 187.558 19.2144 188.118 19.2144 188.818 cv
19.2144 189.118 19.1844 189.418 19.1344 189.738 cv
19.0844 190.058 19.0044 190.388 18.8844 190.738 cv
17.9544 190.738 li
18.1344 190.408 18.2644 190.078 18.3444 189.758 cv
18.4344 189.438 18.4744 189.118 18.4744 188.798 cv
18.4744 188.378 18.4044 188.048 18.2644 187.818 cv
18.1244 187.598 17.9144 187.478 17.6444 187.478 cv
17.4044 187.478 17.2144 187.568 17.0844 187.728 cv
16.9544 187.888 16.8244 188.248 16.7044 188.808 cv
16.6344 189.118 li
16.5144 189.678 16.3344 190.088 16.0944 190.328 cv
15.8544 190.578 15.5244 190.698 15.0944 190.698 cv
14.5844 190.698 14.1844 190.518 13.9044 190.158 cv
13.6244 189.798 13.4844 189.278 13.4844 188.598 cv
13.4844 188.268 13.5144 187.958 13.5644 187.658 cv
13.6144 187.368 13.6844 187.098 13.7744 186.848 cv
f
14.6644 180.868 mo
14.2644 180.648 13.9744 180.378 13.7744 180.068 cv
13.5844 179.758 13.4844 179.388 13.4844 178.958 cv
13.4844 178.398 13.6844 177.958 14.0844 177.648 cv
14.4844 177.338 15.0544 177.178 15.7844 177.178 cv
19.0844 177.178 li
19.0844 178.078 li
15.8144 178.078 li
15.2944 178.078 14.9044 178.178 14.6444 178.358 cv
14.3944 178.548 14.2644 178.828 14.2644 179.208 cv
14.2644 179.678 14.4244 180.048 14.7344 180.318 cv
15.0444 180.588 15.4644 180.718 15.9944 180.718 cv
19.0844 180.718 li
19.0844 181.618 li
15.8144 181.618 li
15.2944 181.618 14.9044 181.718 14.6444 181.898 cv
14.3944 182.088 14.2644 182.378 14.2644 182.758 cv
14.2644 183.218 14.4244 183.588 14.7344 183.858 cv
15.0444 184.128 15.4644 184.258 15.9944 184.258 cv
19.0844 184.258 li
19.0844 185.158 li
13.6144 185.158 li
13.6144 184.258 li
14.4644 184.258 li
14.1344 184.058 13.8844 183.808 13.7244 183.518 cv
13.5644 183.238 13.4844 182.898 13.4844 182.498 cv
13.4844 182.098 13.5844 181.768 13.7844 181.488 cv
13.9844 181.208 14.2844 181.008 14.6644 180.868 cv
f
13.6144 175.388 mo
13.6144 174.488 li
19.0844 174.488 li
19.0844 175.388 li
13.6144 175.388 li
11.4844 175.388 mo
11.4844 174.488 li
12.6244 174.488 li
12.6244 175.388 li
11.4844 175.388 li
f
13.7744 169.118 mo
14.6244 169.118 li
14.5044 169.378 14.4044 169.638 14.3344 169.908 cv
14.2744 170.188 14.2344 170.468 14.2344 170.758 cv
14.2344 171.208 14.3044 171.548 14.4444 171.768 cv
14.5844 171.988 14.7844 172.098 15.0544 172.098 cv
15.2644 172.098 15.4244 172.018 15.5444 171.858 cv
15.6644 171.698 15.7844 171.378 15.8844 170.898 cv
15.9544 170.588 li
16.0944 169.948 16.2944 169.498 16.5344 169.228 cv
16.7844 168.968 17.1344 168.828 17.5744 168.828 cv
18.0844 168.828 18.4844 169.028 18.7744 169.428 cv
19.0744 169.828 19.2144 170.388 19.2144 171.088 cv
19.2144 171.388 19.1844 171.688 19.1344 172.008 cv
19.0844 172.328 19.0044 172.658 18.8844 173.008 cv
17.9544 173.008 li
18.1344 172.678 18.2644 172.348 18.3444 172.028 cv
18.4344 171.708 18.4744 171.388 18.4744 171.068 cv
18.4744 170.648 18.4044 170.318 18.2644 170.088 cv
18.1244 169.868 17.9144 169.748 17.6444 169.748 cv
17.4044 169.748 17.2144 169.838 17.0844 169.998 cv
16.9544 170.158 16.8244 170.518 16.7044 171.078 cv
16.6344 171.388 li
16.5144 171.948 16.3344 172.358 16.0944 172.598 cv
15.8544 172.848 15.5244 172.968 15.0944 172.968 cv
14.5844 172.968 14.1844 172.788 13.9044 172.428 cv
13.6244 172.068 13.4844 171.548 13.4844 170.868 cv
13.4844 170.538 13.5144 170.228 13.5644 169.928 cv
13.6144 169.638 13.6844 169.368 13.7744 169.118 cv
f
13.7744 163.908 mo
14.6244 163.908 li
14.5044 164.168 14.4044 164.428 14.3344 164.698 cv
14.2744 164.978 14.2344 165.258 14.2344 165.548 cv
14.2344 165.998 14.3044 166.338 14.4444 166.558 cv
14.5844 166.778 14.7844 166.888 15.0544 166.888 cv
15.2644 166.888 15.4244 166.808 15.5444 166.648 cv
15.6644 166.488 15.7844 166.168 15.8844 165.688 cv
15.9544 165.378 li
16.0944 164.738 16.2944 164.288 16.5344 164.018 cv
16.7844 163.758 17.1344 163.618 17.5744 163.618 cv
18.0844 163.618 18.4844 163.818 18.7744 164.218 cv
19.0744 164.618 19.2144 165.178 19.2144 165.878 cv
19.2144 166.178 19.1844 166.478 19.1344 166.798 cv
19.0844 167.118 19.0044 167.448 18.8844 167.798 cv
17.9544 167.798 li
18.1344 167.468 18.2644 167.138 18.3444 166.818 cv
18.4344 166.498 18.4744 166.178 18.4744 165.858 cv
18.4744 165.438 18.4044 165.108 18.2644 164.878 cv
18.1244 164.658 17.9144 164.538 17.6444 164.538 cv
17.4044 164.538 17.2144 164.628 17.0844 164.788 cv
16.9544 164.948 16.8244 165.308 16.7044 165.868 cv
16.6344 166.178 li
16.5144 166.738 16.3344 167.148 16.0944 167.388 cv
15.8544 167.638 15.5244 167.758 15.0944 167.758 cv
14.5844 167.758 14.1844 167.578 13.9044 167.218 cv
13.6244 166.858 13.4844 166.338 13.4844 165.658 cv
13.4844 165.328 13.5144 165.018 13.5644 164.718 cv
13.6144 164.428 13.6844 164.158 13.7744 163.908 cv
f
13.6144 162.188 mo
13.6144 161.288 li
19.0844 161.288 li
19.0844 162.188 li
13.6144 162.188 li
11.4844 162.188 mo
11.4844 161.288 li
12.6244 161.288 li
12.6244 162.188 li
11.4844 162.188 li
f
14.2444 157.288 mo
14.2444 157.768 14.4344 158.148 14.8144 158.428 cv
15.1944 158.708 15.7044 158.848 16.3544 158.848 cv
17.0144 158.848 17.5244 158.718 17.9044 158.438 cv
18.2844 158.158 18.4644 157.778 18.4644 157.288 cv
18.4644 156.808 18.2844 156.428 17.9044 156.148 cv
17.5244 155.868 17.0144 155.728 16.3544 155.728 cv
15.7144 155.728 15.1944 155.868 14.8144 156.148 cv
14.4344 156.428 14.2444 156.808 14.2444 157.288 cv
13.4844 157.288 mo
13.4844 156.508 13.7444 155.898 14.2444 155.448 cv
14.7544 155.008 15.4544 154.778 16.3544 154.778 cv
17.2544 154.778 17.9544 155.008 18.4544 155.448 cv
18.9644 155.898 19.2144 156.508 19.2144 157.288 cv
19.2144 158.078 18.9644 158.698 18.4544 159.138 cv
17.9544 159.578 17.2544 159.798 16.3544 159.798 cv
15.4544 159.798 14.7544 159.578 14.2444 159.138 cv
13.7444 158.698 13.4844 158.078 13.4844 157.288 cv
f
15.7844 148.738 mo
19.0844 148.738 li
19.0844 149.638 li
15.8144 149.638 li
15.2944 149.638 14.9144 149.748 14.6544 149.948 cv
14.3944 150.148 14.2644 150.448 14.2644 150.848 cv
14.2644 151.338 14.4244 151.718 14.7344 151.998 cv
15.0444 152.278 15.4644 152.418 15.9944 152.418 cv
19.0844 152.418 li
19.0844 153.318 li
13.6144 153.318 li
13.6144 152.418 li
14.4644 152.418 li
14.1444 152.208 13.8944 151.958 13.7344 151.658 cv
13.5744 151.368 13.4844 151.028 13.4844 150.648 cv
13.4844 150.028 13.6844 149.548 14.0744 149.228 cv
14.4644 148.908 15.0344 148.738 15.7844 148.738 cv
f
11.7944 144.728 mo
11.7944 138.568 li
12.6244 138.568 li
12.6244 141.158 li
19.0844 141.158 li
19.0844 142.148 li
12.6244 142.148 li
12.6244 144.728 li
11.7944 144.728 li
f
13.6144 137.658 mo
13.6144 136.758 li
19.0844 136.758 li
19.0844 137.658 li
13.6144 137.658 li
11.4844 137.658 mo
11.4844 136.758 li
12.6244 136.758 li
12.6244 137.658 li
11.4844 137.658 li
f
14.6644 130.618 mo
14.2644 130.398 13.9744 130.128 13.7744 129.818 cv
13.5844 129.508 13.4844 129.138 13.4844 128.708 cv
13.4844 128.148 13.6844 127.708 14.0844 127.398 cv
14.4844 127.088 15.0544 126.928 15.7844 126.928 cv
19.0844 126.928 li
19.0844 127.828 li
15.8144 127.828 li
15.2944 127.828 14.9044 127.928 14.6444 128.108 cv
14.3944 128.298 14.2644 128.578 14.2644 128.958 cv
14.2644 129.428 14.4244 129.798 14.7344 130.068 cv
15.0444 130.338 15.4644 130.468 15.9944 130.468 cv
19.0844 130.468 li
19.0844 131.368 li
15.8144 131.368 li
15.2944 131.368 14.9044 131.468 14.6444 131.648 cv
14.3944 131.838 14.2644 132.128 14.2644 132.508 cv
14.2644 132.968 14.4244 133.338 14.7344 133.608 cv
15.0444 133.878 15.4644 134.008 15.9944 134.008 cv
19.0844 134.008 li
19.0844 134.908 li
13.6144 134.908 li
13.6144 134.008 li
14.4644 134.008 li
14.1344 133.808 13.8844 133.558 13.7244 133.268 cv
13.5644 132.988 13.4844 132.648 13.4844 132.248 cv
13.4844 131.848 13.5844 131.518 13.7844 131.238 cv
13.9844 130.958 14.2844 130.758 14.6644 130.618 cv
f
16.1244 120.458 mo
16.5644 120.458 li
16.5644 124.588 li
17.1844 124.548 17.6644 124.368 17.9844 124.028 cv
18.3044 123.698 18.4644 123.238 18.4644 122.638 cv
18.4644 122.298 18.4244 121.958 18.3444 121.638 cv
18.2644 121.318 18.1344 120.988 17.9544 120.668 cv
18.8044 120.668 li
18.9444 120.988 19.0544 121.318 19.1144 121.658 cv
19.1744 121.998 19.2144 122.348 19.2144 122.688 cv
19.2144 123.568 18.9644 124.258 18.4644 124.768 cv
17.9644 125.278 17.2744 125.528 16.4044 125.528 cv
15.5144 125.528 14.8044 125.288 14.2744 124.808 cv
13.7544 124.328 13.4844 123.668 13.4844 122.848 cv
13.4844 122.108 13.7244 121.528 14.1944 121.098 cv
14.6744 120.678 15.3144 120.458 16.1244 120.458 cv
15.8644 121.358 mo
15.3744 121.368 14.9844 121.508 14.6844 121.768 cv
14.3944 122.038 14.2444 122.398 14.2444 122.838 cv
14.2444 123.338 14.3944 123.738 14.6744 124.038 cv
14.9544 124.338 15.3544 124.518 15.8644 124.558 cv
15.8644 121.358 li
f
11.4944 116.828 mo
12.2544 117.268 12.9944 117.588 13.7244 117.798 cv
14.4544 118.018 15.1944 118.118 15.9444 118.118 cv
16.7044 118.118 17.4444 118.018 18.1744 117.798 cv
18.9144 117.588 19.6444 117.268 20.3944 116.828 cv
20.3944 117.608 li
19.6244 118.098 18.8844 118.468 18.1444 118.708 cv
17.4044 118.948 16.6744 119.068 15.9444 119.068 cv
15.2244 119.068 14.4944 118.948 13.7544 118.708 cv
13.0144 118.468 12.2644 118.108 11.4944 117.608 cv
11.4944 116.828 li
f
13.7744 111.598 mo
14.6244 111.598 li
14.5044 111.858 14.4044 112.118 14.3344 112.388 cv
14.2744 112.668 14.2344 112.948 14.2344 113.238 cv
14.2344 113.688 14.3044 114.028 14.4444 114.248 cv
14.5844 114.468 14.7844 114.578 15.0544 114.578 cv
15.2644 114.578 15.4244 114.498 15.5444 114.338 cv
15.6644 114.178 15.7844 113.858 15.8844 113.378 cv
15.9544 113.068 li
16.0944 112.428 16.2944 111.978 16.5344 111.708 cv
16.7844 111.448 17.1344 111.308 17.5744 111.308 cv
18.0844 111.308 18.4844 111.508 18.7744 111.908 cv
19.0744 112.308 19.2144 112.868 19.2144 113.568 cv
19.2144 113.868 19.1844 114.168 19.1344 114.488 cv
19.0844 114.808 19.0044 115.138 18.8844 115.488 cv
17.9544 115.488 li
18.1344 115.158 18.2644 114.828 18.3444 114.508 cv
18.4344 114.188 18.4744 113.868 18.4744 113.548 cv
18.4744 113.128 18.4044 112.798 18.2644 112.568 cv
18.1244 112.348 17.9144 112.228 17.6444 112.228 cv
17.4044 112.228 17.2144 112.318 17.0844 112.478 cv
16.9544 112.638 16.8244 112.998 16.7044 113.558 cv
16.6344 113.868 li
16.5144 114.428 16.3344 114.838 16.0944 115.078 cv
15.8544 115.328 15.5244 115.448 15.0944 115.448 cv
14.5844 115.448 14.1844 115.268 13.9044 114.908 cv
13.6244 114.548 13.4844 114.028 13.4844 113.348 cv
13.4844 113.018 13.5144 112.708 13.5644 112.408 cv
13.6144 112.118 13.6844 111.848 13.7744 111.598 cv
f
11.4944 110.018 mo
11.4944 109.238 li
12.2644 108.758 13.0144 108.388 13.7544 108.148 cv
14.4944 107.908 15.2244 107.778 15.9444 107.778 cv
16.6744 107.778 17.4044 107.908 18.1444 108.148 cv
18.8844 108.388 19.6244 108.758 20.3944 109.238 cv
20.3944 110.018 li
19.6444 109.588 18.9144 109.268 18.1744 109.048 cv
17.4444 108.838 16.7044 108.728 15.9444 108.728 cv
15.1944 108.728 14.4544 108.838 13.7244 109.048 cv
12.9944 109.268 12.2544 109.588 11.4944 110.018 cv
f
2 lw
[2 3.3 ] 0 dsh
73.8327 295.488 mo
138.764 293.607 li
203.695 288.69 li
268.625 287.659 li
333.556 279.526 li
398.487 267.63 li
/1 
[/DeviceCMYK] /CSA add_res
0 .993988 1 0 cmyk
@
gsave
70.3328 298.988 mo
77.3328 298.988 li
77.3328 291.988 li
70.3328 291.988 li
70.3328 298.988 li
clp
70.8327 298.488 mo
76.8327 298.488 li
76.8327 292.488 li
70.8327 292.488 li
cp
f
1 lw
0 lj
[] 0 dsh
70.8327 298.488 mo
76.8327 298.488 li
76.8327 292.488 li
70.8327 292.488 li
cp
@
grestore
gsave
135.264 297.107 mo
142.264 297.107 li
142.264 290.107 li
135.264 290.107 li
135.264 297.107 li
clp
135.764 296.607 mo
141.764 296.607 li
141.764 290.607 li
135.764 290.607 li
cp
f
1 lw
0 lj
[] 0 dsh
135.764 296.607 mo
141.764 296.607 li
141.764 290.607 li
135.764 290.607 li
cp
@
grestore
gsave
200.195 292.19 mo
207.195 292.19 li
207.195 285.19 li
200.195 285.19 li
200.195 292.19 li
clp
200.695 291.69 mo
206.695 291.69 li
206.695 285.69 li
200.695 285.69 li
cp
f
1 lw
0 lj
[] 0 dsh
200.695 291.69 mo
206.695 291.69 li
206.695 285.69 li
200.695 285.69 li
cp
@
grestore
gsave
265.126 291.159 mo
272.125 291.159 li
272.125 284.159 li
265.126 284.159 li
265.126 291.159 li
clp
265.625 290.659 mo
271.625 290.659 li
271.625 284.659 li
265.625 284.659 li
cp
f
1 lw
0 lj
[] 0 dsh
265.625 290.659 mo
271.625 290.659 li
271.625 284.659 li
265.625 284.659 li
cp
@
grestore
gsave
330.056 283.026 mo
337.056 283.026 li
337.056 276.026 li
330.056 276.026 li
330.056 283.026 li
clp
330.556 282.526 mo
336.556 282.526 li
336.556 276.526 li
330.556 276.526 li
cp
f
1 lw
0 lj
[] 0 dsh
330.556 282.526 mo
336.556 282.526 li
336.556 276.526 li
330.556 276.526 li
cp
@
grestore
gsave
394.987 271.13 mo
401.987 271.13 li
401.987 264.13 li
394.987 264.13 li
394.987 271.13 li
clp
395.487 270.63 mo
401.487 270.63 li
401.487 264.63 li
395.487 264.63 li
cp
f
1 lw
0 lj
[] 0 dsh
395.487 270.63 mo
401.487 270.63 li
401.487 264.63 li
395.487 264.63 li
cp
@
grestore
[7.4 3.2 ] 0 dsh
73.8327 295.063 mo
138.764 288.933 li
203.695 277.098 li
268.625 261.44 li
333.556 230.729 li
398.487 53.568 li
.873533 .244297 1 .131685 cmyk
@
gsave
70.3328 298.563 mo
77.3328 298.563 li
77.3328 291.563 li
70.3328 291.563 li
70.3328 298.563 li
clp
73.8327 298.063 mo
74.6283 298.063 75.3915 297.747 75.954 297.184 cv
76.5166 296.622 76.8327 295.859 76.8327 295.063 cv
76.8327 294.268 76.5166 293.504 75.954 292.942 cv
75.3915 292.379 74.6283 292.063 73.8327 292.063 cv
73.0371 292.063 72.274 292.379 71.7114 292.942 cv
71.1488 293.504 70.8327 294.268 70.8327 295.063 cv
70.8327 295.859 71.1488 296.622 71.7114 297.184 cv
72.274 297.747 73.0371 298.063 73.8327 298.063 cv
cp
f
1 lw
[] 0 dsh
73.8327 298.063 mo
74.6283 298.063 75.3915 297.747 75.954 297.184 cv
76.5166 296.622 76.8327 295.859 76.8327 295.063 cv
76.8327 294.268 76.5166 293.504 75.954 292.942 cv
75.3915 292.379 74.6283 292.063 73.8327 292.063 cv
73.0371 292.063 72.274 292.379 71.7114 292.942 cv
71.1488 293.504 70.8327 294.268 70.8327 295.063 cv
70.8327 295.859 71.1488 296.622 71.7114 297.184 cv
72.274 297.747 73.0371 298.063 73.8327 298.063 cv
cp
@
grestore
gsave
135.264 292.433 mo
142.264 292.433 li
142.264 285.433 li
135.264 285.433 li
135.264 292.433 li
clp
138.764 291.933 mo
139.559 291.933 140.322 291.617 140.885 291.055 cv
141.448 290.492 141.764 289.729 141.764 288.933 cv
141.764 288.138 141.448 287.374 140.885 286.812 cv
140.322 286.249 139.559 285.933 138.764 285.933 cv
137.968 285.933 137.205 286.249 136.642 286.812 cv
136.08 287.374 135.764 288.138 135.764 288.933 cv
135.764 289.729 136.08 290.492 136.642 291.055 cv
137.205 291.617 137.968 291.933 138.764 291.933 cv
cp
f
1 lw
[] 0 dsh
138.764 291.933 mo
139.559 291.933 140.322 291.617 140.885 291.055 cv
141.448 290.492 141.764 289.729 141.764 288.933 cv
141.764 288.138 141.448 287.374 140.885 286.812 cv
140.322 286.249 139.559 285.933 138.764 285.933 cv
137.968 285.933 137.205 286.249 136.642 286.812 cv
136.08 287.374 135.764 288.138 135.764 288.933 cv
135.764 289.729 136.08 290.492 136.642 291.055 cv
137.205 291.617 137.968 291.933 138.764 291.933 cv
cp
@
grestore
gsave
200.195 280.598 mo
207.195 280.598 li
207.195 273.598 li
200.195 273.598 li
200.195 280.598 li
clp
203.695 280.098 mo
204.49 280.098 205.253 279.782 205.816 279.22 cv
206.378 278.657 206.695 277.894 206.695 277.098 cv
206.695 276.303 206.378 275.539 205.816 274.977 cv
205.253 274.414 204.49 274.098 203.695 274.098 cv
202.899 274.098 202.136 274.414 201.573 274.977 cv
201.011 275.539 200.695 276.303 200.695 277.098 cv
200.695 277.894 201.011 278.657 201.573 279.22 cv
202.136 279.782 202.899 280.098 203.695 280.098 cv
cp
f
1 lw
[] 0 dsh
203.695 280.098 mo
204.49 280.098 205.253 279.782 205.816 279.22 cv
206.378 278.657 206.695 277.894 206.695 277.098 cv
206.695 276.303 206.378 275.539 205.816 274.977 cv
205.253 274.414 204.49 274.098 203.695 274.098 cv
202.899 274.098 202.136 274.414 201.573 274.977 cv
201.011 275.539 200.695 276.303 200.695 277.098 cv
200.695 277.894 201.011 278.657 201.573 279.22 cv
202.136 279.782 202.899 280.098 203.695 280.098 cv
cp
@
grestore
gsave
265.126 264.94 mo
272.125 264.94 li
272.125 257.939 li
265.126 257.939 li
265.126 264.94 li
clp
268.625 264.44 mo
269.421 264.44 270.184 264.123 270.747 263.561 cv
271.309 262.998 271.625 262.235 271.625 261.44 cv
271.625 260.644 271.309 259.881 270.747 259.318 cv
270.184 258.756 269.421 258.44 268.625 258.44 cv
267.83 258.44 267.067 258.756 266.504 259.318 cv
265.942 259.881 265.625 260.644 265.625 261.44 cv
265.625 262.235 265.942 262.998 266.504 263.561 cv
267.067 264.123 267.83 264.44 268.625 264.44 cv
cp
f
1 lw
[] 0 dsh
268.625 264.44 mo
269.421 264.44 270.184 264.123 270.747 263.561 cv
271.309 262.998 271.625 262.235 271.625 261.44 cv
271.625 260.644 271.309 259.881 270.747 259.318 cv
270.184 258.756 269.421 258.44 268.625 258.44 cv
267.83 258.44 267.067 258.756 266.504 259.318 cv
265.942 259.881 265.625 260.644 265.625 261.44 cv
265.625 262.235 265.942 262.998 266.504 263.561 cv
267.067 264.123 267.83 264.44 268.625 264.44 cv
cp
@
grestore
gsave
330.056 234.229 mo
337.056 234.229 li
337.056 227.229 li
330.056 227.229 li
330.056 234.229 li
clp
333.556 233.729 mo
334.352 233.729 335.115 233.413 335.678 232.851 cv
336.24 232.288 336.556 231.525 336.556 230.729 cv
336.556 229.934 336.24 229.17 335.678 228.608 cv
335.115 228.045 334.352 227.729 333.556 227.729 cv
332.761 227.729 331.998 228.045 331.435 228.608 cv
330.872 229.17 330.556 229.934 330.556 230.729 cv
330.556 231.525 330.872 232.288 331.435 232.851 cv
331.998 233.413 332.761 233.729 333.556 233.729 cv
cp
f
1 lw
[] 0 dsh
333.556 233.729 mo
334.352 233.729 335.115 233.413 335.678 232.851 cv
336.24 232.288 336.556 231.525 336.556 230.729 cv
336.556 229.934 336.24 229.17 335.678 228.608 cv
335.115 228.045 334.352 227.729 333.556 227.729 cv
332.761 227.729 331.998 228.045 331.435 228.608 cv
330.872 229.17 330.556 229.934 330.556 230.729 cv
330.556 231.525 330.872 232.288 331.435 232.851 cv
331.998 233.413 332.761 233.729 333.556 233.729 cv
cp
@
grestore
gsave
394.987 57.0681 mo
401.987 57.0681 li
401.987 50.068 li
394.987 50.068 li
394.987 57.0681 li
clp
398.487 56.568 mo
399.283 56.568 400.046 56.2519 400.609 55.6893 cv
401.171 55.1268 401.487 54.3636 401.487 53.568 cv
401.487 52.7724 401.171 52.0093 400.609 51.4467 cv
400.046 50.8841 399.283 50.568 398.487 50.568 cv
397.692 50.568 396.929 50.8841 396.366 51.4467 cv
395.803 52.0093 395.487 52.7724 395.487 53.568 cv
395.487 54.3636 395.803 55.1268 396.366 55.6893 cv
396.929 56.2519 397.692 56.568 398.487 56.568 cv
cp
f
1 lw
[] 0 dsh
398.487 56.568 mo
399.283 56.568 400.046 56.2519 400.609 55.6893 cv
401.171 55.1268 401.487 54.3636 401.487 53.568 cv
401.487 52.7724 401.171 52.0093 400.609 51.4467 cv
400.046 50.8841 399.283 50.568 398.487 50.568 cv
397.692 50.568 396.929 50.8841 396.366 51.4467 cv
395.803 52.0093 395.487 52.7724 395.487 53.568 cv
395.487 54.3636 395.803 55.1268 396.366 55.6893 cv
396.929 56.2519 397.692 56.568 398.487 56.568 cv
cp
@
grestore
2 lc
[] 0 dsh
73.8327 290.875 mo
138.764 290.268 li
203.695 281.225 li
268.625 262.835 li
333.556 249.908 li
398.487 88.5269 li
.883665 .769162 0 0 cmyk
@
gsave
70.3328 294.375 mo
77.3328 294.375 li
77.3328 287.375 li
70.3328 287.375 li
70.3328 294.375 li
clp
73.8327 293.875 mo
76.8327 287.875 li
70.8327 287.875 li
cp
f
1 lw
0 lc
0 lj
73.8327 293.875 mo
76.8327 287.875 li
70.8327 287.875 li
cp
@
grestore
gsave
135.264 293.768 mo
142.264 293.768 li
142.264 286.768 li
135.264 286.768 li
135.264 293.768 li
clp
138.764 293.268 mo
141.764 287.268 li
135.764 287.268 li
cp
f
1 lw
0 lc
0 lj
138.764 293.268 mo
141.764 287.268 li
135.764 287.268 li
cp
@
grestore
gsave
200.195 284.725 mo
207.195 284.725 li
207.195 277.725 li
200.195 277.725 li
200.195 284.725 li
clp
203.695 284.225 mo
206.695 278.225 li
200.695 278.225 li
cp
f
1 lw
0 lc
0 lj
203.695 284.225 mo
206.695 278.225 li
200.695 278.225 li
cp
@
grestore
gsave
265.126 266.335 mo
272.125 266.335 li
272.125 259.335 li
265.126 259.335 li
265.126 266.335 li
clp
268.625 265.835 mo
271.625 259.835 li
265.625 259.835 li
cp
f
1 lw
0 lc
0 lj
268.625 265.835 mo
271.625 259.835 li
265.625 259.835 li
cp
@
grestore
gsave
330.056 253.408 mo
337.056 253.408 li
337.056 246.408 li
330.056 246.408 li
330.056 253.408 li
clp
333.556 252.908 mo
336.556 246.908 li
330.556 246.908 li
cp
f
1 lw
0 lc
0 lj
333.556 252.908 mo
336.556 246.908 li
330.556 246.908 li
cp
@
grestore
gsave
394.987 92.0268 mo
401.987 92.0268 li
401.987 85.0268 li
394.987 85.0268 li
394.987 92.0268 li
clp
398.487 91.5268 mo
401.487 85.5268 li
395.487 85.5268 li
cp
f
1 lw
0 lc
0 lj
398.487 91.5268 mo
401.487 85.5268 li
395.487 85.5268 li
cp
@
grestore
.8 lw
0 lj
57.6 307.584 mo
57.6 41.472 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 307.584 mo
414.72 41.472 li
@
57.6 307.584 mo
414.72 307.584 li
@
57.6 41.472 mo
414.72 41.472 li
@
138.522 94.6439 mo
64.6 94.6439 li
64.0101 94.6421 63.6627 94.4998 63.4535 94.2904 cv
63.2441 94.0811 63.1018 93.7338 63.1 93.1439 cv
63.1 48.472 li
63.1018 47.8822 63.2441 47.5347 63.4535 47.3256 cv
63.6627 47.1161 64.0101 46.9738 64.6 46.972 cv
138.522 46.972 li
139.112 46.9738 139.459 47.1161 139.668 47.3256 cv
139.878 47.5347 140.02 47.8822 140.022 48.472 cv
140.022 93.1439 li
140.02 93.7338 139.878 94.0811 139.668 94.2904 cv
139.459 94.4998 139.112 94.6421 138.522 94.6439 cv
0 0 0 0 cmyk
f
138.533 95.6439 mo
138.529 95.6439 138.525 95.6439 138.522 95.6439 cv
64.6 95.6439 li
64.5964 95.6439 64.5928 95.6439 64.5893 95.6439 cv
63.8503 95.6439 63.2018 95.4524 62.7464 94.9975 cv
62.2893 94.5399 62.0982 93.8874 62.1 93.1439 cv
62.1 48.472 li
62.0982 47.7286 62.2893 47.0759 62.7464 46.6185 cv
63.2019 46.1633 63.8507 45.972 64.59 45.972 cv
64.5933 45.972 64.5966 45.972 64.6 45.972 cv
138.522 45.972 li
138.525 45.972 138.529 45.972 138.532 45.972 cv
139.271 45.972 139.92 46.1633 140.375 46.6185 cv
140.833 47.0759 141.024 47.7286 141.022 48.472 cv
141.022 93.1439 li
141.024 93.8874 140.833 94.5399 140.375 94.9975 cv
139.92 95.4524 139.272 95.6439 138.533 95.6439 cv
64.6 94.6439 mo
138.522 94.6439 li
139.112 94.6421 139.459 94.4998 139.668 94.2904 cv
139.878 94.0811 140.02 93.7338 140.022 93.1439 cv
140.022 48.472 li
140.02 47.8822 139.878 47.5347 139.668 47.3256 cv
139.459 47.1161 139.112 46.9738 138.522 46.972 cv
64.6 46.972 li
64.0101 46.9738 63.6627 47.1161 63.4535 47.3256 cv
63.2441 47.5347 63.1018 47.8822 63.1 48.472 cv
63.1 93.1439 li
63.1018 93.7338 63.2441 94.0811 63.4535 94.2904 cv
63.6627 94.4998 64.0101 94.6421 64.6 94.6439 cv
64.6 94.6439 li
.15433 .116732 .12192 0 cmyk
f
2 lw
0 lc
1 lj
[2 3.3 ] 0 dsh
66.6 54.8939 mo
86.6 54.8939 li
0 .993988 1 0 cmyk
@
73.6 57.8939 mo
79.6 57.8939 li
79.6 51.8939 li
73.6 51.8939 li
cp
f
1 lw
0 lj
[] 0 dsh
73.6 57.8939 mo
79.6 57.8939 li
79.6 51.8939 li
73.6 51.8939 li
cp
@
98.28 50.4008 mo
99.4 50.4008 li
100.75 57.6908 li
99.72 57.6908 li
99.42 55.8208 li
96.14 55.8208 li
95.11 57.6908 li
94.08 57.6908 li
98.28 50.4008 li
98.64 51.3708 mo
96.59 55.0008 li
99.27 55.0008 li
98.64 51.3708 li
1 /0 /CSD get_res sepcs
1 sep
f
104.283 56.5804 mo
104.612 56.6504 104.871 56.7974 105.053 57.0214 cv
105.235 57.2454 105.333 57.5254 105.333 57.8474 cv
105.333 58.3514 105.158 58.7434 104.815 59.0164 cv
104.465 59.2894 103.975 59.4224 103.338 59.4224 cv
103.121 59.4224 102.897 59.4014 102.673 59.3594 cv
102.449 59.3244 102.211 59.2614 101.973 59.1774 cv
101.973 58.5124 li
102.162 58.6244 102.372 58.7084 102.603 58.7644 cv
102.827 58.8204 103.065 58.8484 103.317 58.8484 cv
103.751 58.8484 104.08 58.7644 104.304 58.5964 cv
104.528 58.4284 104.647 58.1764 104.647 57.8474 cv
104.647 57.5534 104.542 57.3154 104.332 57.1474 cv
104.122 56.9794 103.828 56.8884 103.45 56.8884 cv
102.855 56.8884 li
102.855 56.3214 li
103.478 56.3214 li
103.814 56.3214 104.073 56.2584 104.255 56.1184 cv
104.437 55.9854 104.528 55.7894 104.528 55.5304 cv
104.528 55.2714 104.43 55.0684 104.248 54.9284 cv
104.059 54.7884 103.793 54.7184 103.45 54.7184 cv
103.261 54.7184 103.058 54.7394 102.841 54.7814 cv
102.624 54.8234 102.386 54.8864 102.127 54.9704 cv
102.127 54.3544 li
102.386 54.2844 102.631 54.2284 102.862 54.1934 cv
103.086 54.1584 103.303 54.1374 103.513 54.1374 cv
104.031 54.1374 104.444 54.2564 104.752 54.4944 cv
105.06 54.7324 105.214 55.0544 105.214 55.4604 cv
105.214 55.7404 105.13 55.9784 104.969 56.1744 cv
104.808 56.3704 104.577 56.5104 104.283 56.5804 cv
f
2 lw
1 lj
[7.4 3.2 ] 0 dsh
66.6 69.972 mo
86.6 69.972 li
.873533 .244297 1 .131685 cmyk
@
76.6 72.972 mo
77.3956 72.972 78.1587 72.6559 78.7213 72.0933 cv
79.2839 71.5307 79.6 70.7676 79.6 69.972 cv
79.6 69.1764 79.2839 68.4133 78.7213 67.8507 cv
78.1587 67.2881 77.3956 66.972 76.6 66.972 cv
75.8044 66.972 75.0413 67.2881 74.4787 67.8507 cv
73.9161 68.4133 73.6 69.1764 73.6 69.972 cv
73.6 70.7676 73.9161 71.5307 74.4787 72.0933 cv
75.0413 72.6559 75.8044 72.972 76.6 72.972 cv
cp
f
1 lw
[] 0 dsh
76.6 72.972 mo
77.3956 72.972 78.1587 72.6559 78.7213 72.0933 cv
79.2839 71.5307 79.6 70.7676 79.6 69.972 cv
79.6 69.1764 79.2839 68.4133 78.7213 67.8507 cv
78.1587 67.2881 77.3956 66.972 76.6 66.972 cv
75.8044 66.972 75.0413 67.2881 74.4787 67.8507 cv
73.9161 68.4133 73.6 69.1764 73.6 69.972 cv
73.6 70.7676 73.9161 71.5307 74.4787 72.0933 cv
75.0413 72.6559 75.8044 72.972 76.6 72.972 cv
cp
@
96.57 66.5858 mo
96.57 72.2558 li
97.76 72.2558 li
98.76 72.2558 99.5 72.0358 99.97 71.5758 cv
100.43 71.1158 100.67 70.3958 100.67 69.4158 cv
100.67 68.4358 100.43 67.7258 99.97 67.2658 cv
99.5 66.8158 98.76 66.5858 97.76 66.5858 cv
96.57 66.5858 li
95.58 65.7758 mo
97.61 65.7758 li
99.02 65.7758 100.06 66.0758 100.72 66.6558 cv
101.38 67.2458 101.71 68.1658 101.71 69.4158 cv
101.71 70.6758 101.37 71.5958 100.71 72.1858 cv
100.05 72.7758 99.01 73.0658 97.61 73.0658 cv
95.58 73.0658 li
95.58 65.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
108.74 66.3358 mo
108.74 67.3758 li
108.4 67.0758 108.05 66.8458 107.67 66.6858 cv
107.29 66.5358 106.9 66.4558 106.48 66.4558 cv
105.64 66.4558 105 66.7158 104.56 67.2258 cv
104.12 67.7358 103.9 68.4658 103.9 69.4258 cv
103.9 70.3858 104.12 71.1258 104.56 71.6358 cv
105 72.1458 105.64 72.3958 106.48 72.3958 cv
106.9 72.3958 107.29 72.3258 107.67 72.1658 cv
108.05 72.0158 108.4 71.7858 108.74 71.4758 cv
108.74 72.5058 li
108.39 72.7458 108.02 72.9158 107.64 73.0258 cv
107.26 73.1358 106.85 73.1958 106.42 73.1958 cv
105.32 73.1958 104.45 72.8658 103.81 72.1958 cv
103.17 71.5258 102.86 70.6058 102.86 69.4258 cv
102.86 68.2558 103.17 67.3358 103.81 66.6558 cv
104.45 65.9858 105.32 65.6458 106.42 65.6458 cv
106.86 65.6458 107.27 65.7058 107.65 65.8158 cv
108.03 65.9358 108.4 66.1058 108.74 66.3358 cv
f
114.903 70.1058 mo
114.903 70.5458 li
110.773 70.5458 li
110.813 71.1658 110.993 71.6458 111.333 71.9658 cv
111.663 72.2858 112.123 72.4458 112.723 72.4458 cv
113.063 72.4458 113.403 72.4058 113.723 72.3258 cv
114.043 72.2458 114.373 72.1158 114.693 71.9358 cv
114.693 72.7858 li
114.373 72.9258 114.043 73.0358 113.703 73.0958 cv
113.363 73.1558 113.013 73.1958 112.673 73.1958 cv
111.793 73.1958 111.103 72.9458 110.593 72.4458 cv
110.083 71.9458 109.833 71.2558 109.833 70.3858 cv
109.833 69.4958 110.073 68.7858 110.553 68.2558 cv
111.033 67.7358 111.693 67.4658 112.513 67.4658 cv
113.253 67.4658 113.833 67.7058 114.263 68.1758 cv
114.683 68.6558 114.903 69.2958 114.903 70.1058 cv
114.003 69.8458 mo
113.993 69.3558 113.853 68.9658 113.593 68.6658 cv
113.323 68.3758 112.963 68.2258 112.523 68.2258 cv
112.023 68.2258 111.623 68.3758 111.323 68.6558 cv
111.023 68.9358 110.843 69.3358 110.803 69.8458 cv
114.003 69.8458 li
f
116.375 65.4658 mo
117.275 65.4658 li
117.275 73.0658 li
116.375 73.0658 li
116.375 65.4658 li
f
119.153 65.4658 mo
120.053 65.4658 li
120.053 73.0658 li
119.153 73.0658 li
119.153 65.4658 li
f
121.955 74.1254 mo
123.082 74.1254 li
123.082 70.2334 li
121.857 70.4784 li
121.857 69.8484 li
123.075 69.6034 li
123.768 69.6034 li
123.768 74.1254 li
124.895 74.1254 li
124.895 74.7064 li
121.955 74.7064 li
121.955 74.1254 li
f
126.36 73.8384 mo
127.081 73.8384 li
127.081 74.4264 li
126.521 75.5114 li
126.08 75.5114 li
126.36 74.4264 li
126.36 73.8384 li
f
131.972 71.9554 mo
132.301 72.0254 132.56 72.1724 132.742 72.3964 cv
132.924 72.6204 133.022 72.9004 133.022 73.2224 cv
133.022 73.7264 132.847 74.1184 132.504 74.3914 cv
132.154 74.6644 131.664 74.7974 131.027 74.7974 cv
130.81 74.7974 130.586 74.7764 130.362 74.7344 cv
130.138 74.6994 129.9 74.6364 129.662 74.5524 cv
129.662 73.8874 li
129.851 73.9994 130.061 74.0834 130.292 74.1394 cv
130.516 74.1954 130.754 74.2234 131.006 74.2234 cv
131.44 74.2234 131.769 74.1394 131.993 73.9714 cv
132.217 73.8034 132.336 73.5514 132.336 73.2224 cv
132.336 72.9284 132.231 72.6904 132.021 72.5224 cv
131.811 72.3544 131.517 72.2634 131.139 72.2634 cv
130.544 72.2634 li
130.544 71.6964 li
131.167 71.6964 li
131.503 71.6964 131.762 71.6334 131.944 71.4934 cv
132.126 71.3604 132.217 71.1644 132.217 70.9054 cv
132.217 70.6464 132.119 70.4434 131.937 70.3034 cv
131.748 70.1634 131.482 70.0934 131.139 70.0934 cv
130.95 70.0934 130.747 70.1144 130.53 70.1564 cv
130.313 70.1984 130.075 70.2614 129.816 70.3454 cv
129.816 69.7294 li
130.075 69.6594 130.32 69.6034 130.551 69.5684 cv
130.775 69.5334 130.992 69.5124 131.202 69.5124 cv
131.72 69.5124 132.133 69.6314 132.441 69.8694 cv
132.749 70.1074 132.903 70.4294 132.903 70.8354 cv
132.903 71.1154 132.819 71.3534 132.658 71.5494 cv
132.497 71.7454 132.266 71.8854 131.972 71.9554 cv
f
2 lw
2 lc
66.6 85.5658 mo
86.6 85.5658 li
.883665 .769162 0 0 cmyk
@
76.6 88.5658 mo
79.6 82.5658 li
73.6 82.5658 li
cp
f
1 lw
0 lc
0 lj
76.6 88.5658 mo
79.6 82.5658 li
73.6 82.5658 li
cp
@
95.58 81.7758 mo
99.77 81.7758 li
99.77 82.6058 li
96.57 82.6058 li
96.57 84.7558 li
99.46 84.7558 li
99.46 85.5858 li
96.57 85.5858 li
96.57 89.0658 li
95.58 89.0658 li
95.58 81.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
103.78 86.3158 mo
103.05 86.3158 102.55 86.4058 102.27 86.5658 cv
101.99 86.7358 101.85 87.0158 101.85 87.4158 cv
101.85 87.7358 101.95 87.9958 102.16 88.1758 cv
102.37 88.3658 102.66 88.4558 103.02 88.4558 cv
103.52 88.4558 103.92 88.2858 104.22 87.9258 cv
104.52 87.5758 104.67 87.1058 104.67 86.5158 cv
104.67 86.3158 li
103.78 86.3158 li
105.57 85.9458 mo
105.57 89.0658 li
104.67 89.0658 li
104.67 88.2358 li
104.46 88.5758 104.2 88.8158 103.9 88.9658 cv
103.6 89.1158 103.22 89.1958 102.78 89.1958 cv
102.22 89.1958 101.77 89.0458 101.44 88.7358 cv
101.11 88.4258 100.95 88.0058 100.95 87.4758 cv
100.95 86.8658 101.15 86.4058 101.57 86.0858 cv
101.98 85.7758 102.59 85.6158 103.41 85.6158 cv
104.67 85.6158 li
104.67 85.5258 li
104.67 85.1158 104.53 84.7958 104.26 84.5658 cv
103.99 84.3458 103.61 84.2258 103.12 84.2258 cv
102.8 84.2258 102.5 84.2658 102.2 84.3458 cv
101.9 84.4258 101.62 84.5358 101.35 84.6758 cv
101.35 83.8458 li
101.67 83.7258 101.99 83.6258 102.3 83.5658 cv
102.61 83.5058 102.91 83.4658 103.21 83.4658 cv
104 83.4658 104.59 83.6758 104.98 84.0858 cv
105.37 84.4958 105.57 85.1158 105.57 85.9458 cv
f
108.31 82.0458 mo
108.31 83.5958 li
110.16 83.5958 li
110.16 84.2958 li
108.31 84.2958 li
108.31 87.2658 li
108.31 87.7158 108.37 88.0058 108.49 88.1258 cv
108.61 88.2558 108.86 88.3158 109.24 88.3158 cv
110.16 88.3158 li
110.16 89.0658 li
109.24 89.0658 li
108.54 89.0658 108.06 88.9358 107.8 88.6758 cv
107.54 88.4158 107.41 87.9458 107.41 87.2658 cv
107.41 84.2958 li
106.75 84.2958 li
106.75 83.5958 li
107.41 83.5958 li
107.41 82.0458 li
108.31 82.0458 li
f
110.89 85.9258 mo
113.52 85.9258 li
113.52 86.7258 li
110.89 86.7258 li
110.89 85.9258 li
f
113.99 81.7758 mo
120.15 81.7758 li
120.15 82.6058 li
117.56 82.6058 li
117.56 89.0658 li
116.57 89.0658 li
116.57 82.6058 li
113.99 82.6058 li
113.99 81.7758 li
f
124.23 84.4358 mo
124.13 84.3758 124.02 84.3358 123.9 84.3058 cv
123.78 84.2858 123.65 84.2658 123.51 84.2658 cv
123 84.2658 122.61 84.4358 122.34 84.7658 cv
122.06 85.0958 121.93 85.5658 121.93 86.1858 cv
121.93 89.0658 li
121.03 89.0658 li
121.03 83.5958 li
121.93 83.5958 li
121.93 84.4458 li
122.11 84.1158 122.36 83.8658 122.66 83.7058 cv
122.96 83.5458 123.33 83.4658 123.77 83.4658 cv
123.98 83.4758 li
124.05 83.4858 124.13 83.4958 124.23 83.5158 cv
124.23 84.4358 li
f
129.85 86.1058 mo
129.85 86.5458 li
125.72 86.5458 li
125.76 87.1658 125.94 87.6458 126.28 87.9658 cv
126.61 88.2858 127.07 88.4458 127.67 88.4458 cv
128.01 88.4458 128.35 88.4058 128.67 88.3258 cv
128.99 88.2458 129.32 88.1158 129.64 87.9358 cv
129.64 88.7858 li
129.32 88.9258 128.99 89.0358 128.65 89.0958 cv
128.31 89.1558 127.96 89.1958 127.62 89.1958 cv
126.74 89.1958 126.05 88.9458 125.54 88.4458 cv
125.03 87.9458 124.78 87.2558 124.78 86.3858 cv
124.78 85.4958 125.02 84.7858 125.5 84.2558 cv
125.98 83.7358 126.64 83.4658 127.46 83.4658 cv
128.2 83.4658 128.78 83.7058 129.21 84.1758 cv
129.63 84.6558 129.85 85.2958 129.85 86.1058 cv
128.95 85.8458 mo
128.94 85.3558 128.8 84.9658 128.54 84.6658 cv
128.27 84.3758 127.91 84.2258 127.47 84.2258 cv
126.97 84.2258 126.57 84.3758 126.27 84.6558 cv
125.97 84.9358 125.79 85.3358 125.75 85.8458 cv
128.95 85.8458 li
f
136 86.1058 mo
136 86.5458 li
131.87 86.5458 li
131.91 87.1658 132.09 87.6458 132.43 87.9658 cv
132.76 88.2858 133.22 88.4458 133.82 88.4458 cv
134.16 88.4458 134.5 88.4058 134.82 88.3258 cv
135.14 88.2458 135.47 88.1158 135.79 87.9358 cv
135.79 88.7858 li
135.47 88.9258 135.14 89.0358 134.8 89.0958 cv
134.46 89.1558 134.11 89.1958 133.77 89.1958 cv
132.89 89.1958 132.2 88.9458 131.69 88.4458 cv
131.18 87.9458 130.93 87.2558 130.93 86.3858 cv
130.93 85.4958 131.17 84.7858 131.65 84.2558 cv
132.13 83.7358 132.79 83.4658 133.61 83.4658 cv
134.35 83.4658 134.93 83.7058 135.36 84.1758 cv
135.78 84.6558 136 85.2958 136 86.1058 cv
135.1 85.8458 mo
135.09 85.3558 134.95 84.9658 134.69 84.6658 cv
134.42 84.3758 134.06 84.2258 133.62 84.2258 cv
133.12 84.2258 132.72 84.3758 132.42 84.6558 cv
132.12 84.9358 131.94 85.3358 131.9 85.8458 cv
135.1 85.8458 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
