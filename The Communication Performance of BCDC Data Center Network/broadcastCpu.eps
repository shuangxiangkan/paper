%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: broadcastCpu.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2019/12/2, 20:49:27
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-12-02T20:48:21+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
gsave
0 345.6 mo
461 345.6 li
461 -.399999 li
0 -.399999 li
0 345.6 li
clp
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.584 mo
414.72 307.584 li
414.72 41.472 li
57.6 41.472 li
57.6 307.584 li
f
73.8327 307.584 mo
73.8327 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.8327 307.584 mo
73.8327 311.084 li
@
60.5024 321.348 mo
62.1124 321.348 li
62.1124 315.788 li
60.3624 316.138 li
60.3624 315.238 li
62.1024 314.888 li
63.0924 314.888 li
63.0924 321.348 li
64.7024 321.348 li
64.7024 322.178 li
60.5024 322.178 li
60.5024 321.348 li
f
70.6324 315.158 mo
70.6324 316.708 li
72.4824 316.708 li
72.4824 317.408 li
70.6324 317.408 li
70.6324 320.378 li
70.6324 320.828 70.6924 321.118 70.8124 321.238 cv
70.9324 321.368 71.1824 321.428 71.5624 321.428 cv
72.4824 321.428 li
72.4824 322.178 li
71.5624 322.178 li
70.8624 322.178 70.3824 322.048 70.1224 321.788 cv
69.8624 321.528 69.7324 321.058 69.7324 320.378 cv
69.7324 317.408 li
69.0724 317.408 li
69.0724 316.708 li
69.7324 316.708 li
69.7324 315.158 li
70.6324 315.158 li
f
75.7823 317.338 mo
75.3023 317.338 74.9223 317.528 74.6423 317.908 cv
74.3623 318.288 74.2223 318.798 74.2223 319.448 cv
74.2223 320.108 74.3523 320.618 74.6323 320.998 cv
74.9123 321.378 75.2923 321.558 75.7823 321.558 cv
76.2623 321.558 76.6423 321.378 76.9223 320.998 cv
77.2023 320.618 77.3423 320.108 77.3423 319.448 cv
77.3423 318.808 77.2023 318.288 76.9223 317.908 cv
76.6423 317.528 76.2623 317.338 75.7823 317.338 cv
75.7823 316.578 mo
76.5623 316.578 77.1723 316.838 77.6223 317.338 cv
78.0623 317.848 78.2923 318.548 78.2923 319.448 cv
78.2923 320.348 78.0623 321.048 77.6223 321.548 cv
77.1723 322.058 76.5623 322.308 75.7823 322.308 cv
74.9923 322.308 74.3723 322.058 73.9323 321.548 cv
73.4923 321.048 73.2723 320.348 73.2723 319.448 cv
73.2723 318.548 73.4923 317.848 73.9323 317.338 cv
74.3723 316.838 74.9923 316.578 75.7823 316.578 cv
f
83.2623 321.348 mo
84.8723 321.348 li
84.8723 315.788 li
83.1223 316.138 li
83.1223 315.238 li
84.8623 314.888 li
85.8523 314.888 li
85.8523 321.348 li
87.4623 321.348 li
87.4623 322.178 li
83.2623 322.178 li
83.2623 321.348 li
f
138.764 307.584 mo
138.764 311.084 li
f
138.764 307.584 mo
138.764 311.084 li
@
125.433 321.348 mo
127.043 321.348 li
127.043 315.788 li
125.293 316.138 li
125.293 315.238 li
127.033 314.888 li
128.023 314.888 li
128.023 321.348 li
129.633 321.348 li
129.633 322.178 li
125.433 322.178 li
125.433 321.348 li
f
135.563 315.158 mo
135.563 316.708 li
137.413 316.708 li
137.413 317.408 li
135.563 317.408 li
135.563 320.378 li
135.563 320.828 135.623 321.118 135.743 321.238 cv
135.863 321.368 136.113 321.428 136.493 321.428 cv
137.413 321.428 li
137.413 322.178 li
136.493 322.178 li
135.793 322.178 135.313 322.048 135.053 321.788 cv
134.793 321.528 134.663 321.058 134.663 320.378 cv
134.663 317.408 li
134.003 317.408 li
134.003 316.708 li
134.663 316.708 li
134.663 315.158 li
135.563 315.158 li
f
140.713 317.338 mo
140.233 317.338 139.853 317.528 139.573 317.908 cv
139.293 318.288 139.153 318.798 139.153 319.448 cv
139.153 320.108 139.283 320.618 139.563 320.998 cv
139.843 321.378 140.223 321.558 140.713 321.558 cv
141.193 321.558 141.573 321.378 141.853 320.998 cv
142.133 320.618 142.273 320.108 142.273 319.448 cv
142.273 318.808 142.133 318.288 141.853 317.908 cv
141.573 317.528 141.193 317.338 140.713 317.338 cv
140.713 316.578 mo
141.493 316.578 142.103 316.838 142.553 317.338 cv
142.993 317.848 143.223 318.548 143.223 319.448 cv
143.223 320.348 142.993 321.048 142.553 321.548 cv
142.103 322.058 141.493 322.308 140.713 322.308 cv
139.923 322.308 139.303 322.058 138.863 321.548 cv
138.423 321.048 138.203 320.348 138.203 319.448 cv
138.203 318.548 138.423 317.848 138.863 317.338 cv
139.303 316.838 139.923 316.578 140.713 316.578 cv
f
148.873 321.348 mo
152.313 321.348 li
152.313 322.178 li
147.683 322.178 li
147.683 321.348 li
148.053 320.968 148.563 320.448 149.213 319.788 cv
149.853 319.138 150.263 318.718 150.433 318.528 cv
150.753 318.178 150.973 317.878 151.093 317.628 cv
151.213 317.388 151.283 317.138 151.283 316.898 cv
151.283 316.518 151.143 316.198 150.873 315.958 cv
150.603 315.718 150.253 315.588 149.813 315.588 cv
149.503 315.588 149.173 315.648 148.833 315.748 cv
148.493 315.858 148.123 316.018 147.733 316.238 cv
147.733 315.238 li
148.133 315.078 148.503 314.958 148.843 314.878 cv
149.183 314.798 149.503 314.758 149.793 314.758 cv
150.543 314.758 151.143 314.948 151.593 315.328 cv
152.043 315.708 152.273 316.208 152.273 316.838 cv
152.273 317.138 152.213 317.428 152.103 317.688 cv
151.993 317.958 151.793 318.278 151.493 318.638 cv
151.413 318.738 151.153 319.008 150.713 319.458 cv
150.273 319.908 149.663 320.538 148.873 321.348 cv
f
203.695 307.584 mo
203.695 311.084 li
f
203.695 307.584 mo
203.695 311.084 li
@
190.364 321.348 mo
191.974 321.348 li
191.974 315.788 li
190.224 316.138 li
190.224 315.238 li
191.964 314.888 li
192.954 314.888 li
192.954 321.348 li
194.564 321.348 li
194.564 322.178 li
190.364 322.178 li
190.364 321.348 li
f
200.494 315.158 mo
200.494 316.708 li
202.344 316.708 li
202.344 317.408 li
200.494 317.408 li
200.494 320.378 li
200.494 320.828 200.554 321.118 200.674 321.238 cv
200.794 321.368 201.044 321.428 201.424 321.428 cv
202.344 321.428 li
202.344 322.178 li
201.424 322.178 li
200.724 322.178 200.244 322.048 199.984 321.788 cv
199.724 321.528 199.594 321.058 199.594 320.378 cv
199.594 317.408 li
198.934 317.408 li
198.934 316.708 li
199.594 316.708 li
199.594 315.158 li
200.494 315.158 li
f
205.644 317.338 mo
205.164 317.338 204.784 317.528 204.504 317.908 cv
204.224 318.288 204.084 318.798 204.084 319.448 cv
204.084 320.108 204.214 320.618 204.494 320.998 cv
204.774 321.378 205.154 321.558 205.644 321.558 cv
206.124 321.558 206.504 321.378 206.784 320.998 cv
207.064 320.618 207.204 320.108 207.204 319.448 cv
207.204 318.808 207.064 318.288 206.784 317.908 cv
206.504 317.528 206.124 317.338 205.644 317.338 cv
205.644 316.578 mo
206.424 316.578 207.034 316.838 207.484 317.338 cv
207.924 317.848 208.154 318.548 208.154 319.448 cv
208.154 320.348 207.924 321.048 207.484 321.548 cv
207.034 322.058 206.424 322.308 205.644 322.308 cv
204.854 322.308 204.234 322.058 203.794 321.548 cv
203.354 321.048 203.134 320.348 203.134 319.448 cv
203.134 318.548 203.354 317.848 203.794 317.338 cv
204.234 316.838 204.854 316.578 205.644 316.578 cv
f
215.664 315.748 mo
213.174 319.638 li
215.664 319.638 li
215.664 315.748 li
215.404 314.888 mo
216.644 314.888 li
216.644 319.638 li
217.684 319.638 li
217.684 320.458 li
216.644 320.458 li
216.644 322.178 li
215.664 322.178 li
215.664 320.458 li
212.374 320.458 li
212.374 319.508 li
215.404 314.888 li
f
268.625 307.584 mo
268.625 311.084 li
f
268.625 307.584 mo
268.625 311.084 li
@
255.295 321.348 mo
256.905 321.348 li
256.905 315.788 li
255.155 316.138 li
255.155 315.238 li
256.895 314.888 li
257.885 314.888 li
257.885 321.348 li
259.495 321.348 li
259.495 322.178 li
255.295 322.178 li
255.295 321.348 li
f
265.425 315.158 mo
265.425 316.708 li
267.275 316.708 li
267.275 317.408 li
265.425 317.408 li
265.425 320.378 li
265.425 320.828 265.485 321.118 265.605 321.238 cv
265.725 321.368 265.975 321.428 266.355 321.428 cv
267.275 321.428 li
267.275 322.178 li
266.355 322.178 li
265.655 322.178 265.175 322.048 264.915 321.788 cv
264.655 321.528 264.525 321.058 264.525 320.378 cv
264.525 317.408 li
263.865 317.408 li
263.865 316.708 li
264.525 316.708 li
264.525 315.158 li
265.425 315.158 li
f
270.575 317.338 mo
270.095 317.338 269.715 317.528 269.435 317.908 cv
269.155 318.288 269.015 318.798 269.015 319.448 cv
269.015 320.108 269.145 320.618 269.425 320.998 cv
269.705 321.378 270.085 321.558 270.575 321.558 cv
271.055 321.558 271.435 321.378 271.715 320.998 cv
271.995 320.618 272.135 320.108 272.135 319.448 cv
272.135 318.808 271.995 318.288 271.715 317.908 cv
271.435 317.528 271.055 317.338 270.575 317.338 cv
270.575 316.578 mo
271.355 316.578 271.965 316.838 272.415 317.338 cv
272.855 317.848 273.085 318.548 273.085 319.448 cv
273.085 320.348 272.855 321.048 272.415 321.548 cv
271.965 322.058 271.355 322.308 270.575 322.308 cv
269.785 322.308 269.165 322.058 268.725 321.548 cv
268.285 321.048 268.065 320.348 268.065 319.448 cv
268.065 318.548 268.285 317.848 268.725 317.338 cv
269.165 316.838 269.785 316.578 270.575 316.578 cv
f
279.995 318.718 mo
279.525 318.718 279.155 318.848 278.885 319.098 cv
278.615 319.348 278.485 319.688 278.485 320.128 cv
278.485 320.568 278.615 320.918 278.885 321.168 cv
279.155 321.418 279.525 321.538 279.995 321.538 cv
280.455 321.538 280.825 321.418 281.095 321.158 cv
281.365 320.908 281.505 320.568 281.505 320.128 cv
281.505 319.688 281.365 319.348 281.105 319.098 cv
280.835 318.848 280.465 318.718 279.995 318.718 cv
279.005 318.298 mo
278.585 318.198 278.255 317.998 278.015 317.708 cv
277.775 317.418 277.665 317.068 277.665 316.648 cv
277.665 316.068 277.865 315.608 278.285 315.268 cv
278.695 314.928 279.265 314.758 279.995 314.758 cv
280.715 314.758 281.285 314.928 281.705 315.268 cv
282.115 315.608 282.325 316.068 282.325 316.648 cv
282.325 317.068 282.205 317.418 281.965 317.708 cv
281.725 317.998 281.405 318.198 280.985 318.298 cv
281.455 318.408 281.825 318.628 282.095 318.948 cv
282.355 319.268 282.495 319.668 282.495 320.128 cv
282.495 320.838 282.275 321.378 281.845 321.748 cv
281.405 322.128 280.795 322.308 279.995 322.308 cv
279.185 322.308 278.565 322.128 278.135 321.748 cv
277.705 321.378 277.495 320.838 277.495 320.128 cv
277.495 319.668 277.625 319.268 277.895 318.948 cv
278.155 318.628 278.525 318.408 279.005 318.298 cv
278.645 316.738 mo
278.645 317.118 278.755 317.418 278.995 317.628 cv
279.235 317.838 279.565 317.938 279.995 317.938 cv
280.415 317.938 280.745 317.838 280.985 317.628 cv
281.225 317.418 281.345 317.118 281.345 316.738 cv
281.345 316.358 281.225 316.068 280.985 315.858 cv
280.745 315.648 280.415 315.538 279.995 315.538 cv
279.565 315.538 279.235 315.648 278.995 315.858 cv
278.755 316.068 278.645 316.358 278.645 316.738 cv
f
333.556 307.584 mo
333.556 311.084 li
f
333.556 307.584 mo
333.556 311.084 li
@
317.046 321.348 mo
318.656 321.348 li
318.656 315.788 li
316.906 316.138 li
316.906 315.238 li
318.646 314.888 li
319.636 314.888 li
319.636 321.348 li
321.246 321.348 li
321.246 322.178 li
317.046 322.178 li
317.046 321.348 li
f
327.176 315.158 mo
327.176 316.708 li
329.026 316.708 li
329.026 317.408 li
327.176 317.408 li
327.176 320.378 li
327.176 320.828 327.236 321.118 327.356 321.238 cv
327.476 321.368 327.726 321.428 328.106 321.428 cv
329.026 321.428 li
329.026 322.178 li
328.106 322.178 li
327.406 322.178 326.926 322.048 326.666 321.788 cv
326.406 321.528 326.276 321.058 326.276 320.378 cv
326.276 317.408 li
325.616 317.408 li
325.616 316.708 li
326.276 316.708 li
326.276 315.158 li
327.176 315.158 li
f
332.326 317.338 mo
331.846 317.338 331.466 317.528 331.186 317.908 cv
330.906 318.288 330.766 318.798 330.766 319.448 cv
330.766 320.108 330.896 320.618 331.176 320.998 cv
331.456 321.378 331.836 321.558 332.326 321.558 cv
332.806 321.558 333.186 321.378 333.466 320.998 cv
333.746 320.618 333.886 320.108 333.886 319.448 cv
333.886 318.808 333.746 318.288 333.466 317.908 cv
333.186 317.528 332.806 317.338 332.326 317.338 cv
332.326 316.578 mo
333.106 316.578 333.716 316.838 334.166 317.338 cv
334.606 317.848 334.836 318.548 334.836 319.448 cv
334.836 320.348 334.606 321.048 334.166 321.548 cv
333.716 322.058 333.106 322.308 332.326 322.308 cv
331.536 322.308 330.916 322.058 330.476 321.548 cv
330.036 321.048 329.816 320.348 329.816 319.448 cv
329.816 318.548 330.036 317.848 330.476 317.338 cv
330.916 316.838 331.536 316.578 332.326 316.578 cv
f
339.806 321.348 mo
341.416 321.348 li
341.416 315.788 li
339.666 316.138 li
339.666 315.238 li
341.406 314.888 li
342.396 314.888 li
342.396 321.348 li
344.006 321.348 li
344.006 322.178 li
339.806 322.178 li
339.806 321.348 li
f
346.166 321.348 mo
347.776 321.348 li
347.776 315.788 li
346.026 316.138 li
346.026 315.238 li
347.766 314.888 li
348.756 314.888 li
348.756 321.348 li
350.366 321.348 li
350.366 322.178 li
346.166 322.178 li
346.166 321.348 li
f
398.487 307.584 mo
398.487 311.084 li
f
398.487 307.584 mo
398.487 311.084 li
@
378.798 321.348 mo
380.408 321.348 li
380.408 315.788 li
378.658 316.138 li
378.658 315.238 li
380.398 314.888 li
381.388 314.888 li
381.388 321.348 li
382.998 321.348 li
382.998 322.178 li
378.798 322.178 li
378.798 321.348 li
f
385.158 321.348 mo
386.768 321.348 li
386.768 315.788 li
385.018 316.138 li
385.018 315.238 li
386.758 314.888 li
387.748 314.888 li
387.748 321.348 li
389.358 321.348 li
389.358 322.178 li
385.158 322.178 li
385.158 321.348 li
f
395.288 315.158 mo
395.288 316.708 li
397.138 316.708 li
397.138 317.408 li
395.288 317.408 li
395.288 320.378 li
395.288 320.828 395.348 321.118 395.468 321.238 cv
395.588 321.368 395.838 321.428 396.218 321.428 cv
397.138 321.428 li
397.138 322.178 li
396.218 322.178 li
395.518 322.178 395.038 322.048 394.778 321.788 cv
394.518 321.528 394.388 321.058 394.388 320.378 cv
394.388 317.408 li
393.728 317.408 li
393.728 316.708 li
394.388 316.708 li
394.388 315.158 li
395.288 315.158 li
f
400.438 317.338 mo
399.958 317.338 399.578 317.528 399.298 317.908 cv
399.018 318.288 398.878 318.798 398.878 319.448 cv
398.878 320.108 399.008 320.618 399.288 320.998 cv
399.568 321.378 399.948 321.558 400.438 321.558 cv
400.918 321.558 401.298 321.378 401.578 320.998 cv
401.858 320.618 401.998 320.108 401.998 319.448 cv
401.998 318.808 401.858 318.288 401.578 317.908 cv
401.298 317.528 400.918 317.338 400.438 317.338 cv
400.438 316.578 mo
401.218 316.578 401.828 316.838 402.278 317.338 cv
402.718 317.848 402.948 318.548 402.948 319.448 cv
402.948 320.348 402.718 321.048 402.278 321.548 cv
401.828 322.058 401.218 322.308 400.438 322.308 cv
399.648 322.308 399.028 322.058 398.588 321.548 cv
398.148 321.048 397.928 320.348 397.928 319.448 cv
397.928 318.548 398.148 317.848 398.588 317.338 cv
399.028 316.838 399.648 316.578 400.438 316.578 cv
f
407.917 321.348 mo
409.527 321.348 li
409.527 315.788 li
407.777 316.138 li
407.777 315.238 li
409.517 314.888 li
410.507 314.888 li
410.507 321.348 li
412.117 321.348 li
412.117 322.178 li
407.917 322.178 li
407.917 321.348 li
f
414.277 321.348 mo
415.887 321.348 li
415.887 315.788 li
414.137 316.138 li
414.137 315.238 li
415.877 314.888 li
416.867 314.888 li
416.867 321.348 li
418.477 321.348 li
418.477 322.178 li
414.277 322.178 li
414.277 321.348 li
f
109.888 329.37 mo
109.888 335.04 li
111.078 335.04 li
112.078 335.04 112.818 334.82 113.288 334.36 cv
113.748 333.9 113.988 333.18 113.988 332.2 cv
113.988 331.22 113.748 330.51 113.288 330.05 cv
112.818 329.6 112.078 329.37 111.078 329.37 cv
109.888 329.37 li
108.898 328.56 mo
110.928 328.56 li
112.338 328.56 113.378 328.86 114.038 329.44 cv
114.698 330.03 115.028 330.95 115.028 332.2 cv
115.028 333.46 114.688 334.38 114.028 334.97 cv
113.368 335.56 112.328 335.85 110.928 335.85 cv
108.898 335.85 li
108.898 328.56 li
f
116.558 330.38 mo
117.458 330.38 li
117.458 335.85 li
116.558 335.85 li
116.558 330.38 li
116.558 328.25 mo
117.458 328.25 li
117.458 329.39 li
116.558 329.39 li
116.558 328.25 li
f
122.108 328.25 mo
122.108 329 li
121.248 329 li
120.928 329 120.698 329.07 120.578 329.2 cv
120.448 329.33 120.388 329.56 120.388 329.9 cv
120.388 330.38 li
121.868 330.38 li
121.868 331.08 li
120.388 331.08 li
120.388 335.85 li
119.488 335.85 li
119.488 331.08 li
118.628 331.08 li
118.628 330.38 li
119.488 330.38 li
119.488 330 li
119.488 329.4 119.628 328.95 119.908 328.67 cv
120.188 328.39 120.638 328.25 121.258 328.25 cv
122.108 328.25 li
f
125.628 328.25 mo
125.628 329 li
124.768 329 li
124.448 329 124.218 329.07 124.098 329.2 cv
123.968 329.33 123.908 329.56 123.908 329.9 cv
123.908 330.38 li
125.388 330.38 li
125.388 331.08 li
123.908 331.08 li
123.908 335.85 li
123.008 335.85 li
123.008 331.08 li
122.148 331.08 li
122.148 330.38 li
123.008 330.38 li
123.008 330 li
123.008 329.4 123.148 328.95 123.428 328.67 cv
123.708 328.39 124.158 328.25 124.778 328.25 cv
125.628 328.25 li
f
131.058 332.89 mo
131.058 333.33 li
126.928 333.33 li
126.968 333.95 127.148 334.43 127.488 334.75 cv
127.818 335.07 128.278 335.23 128.878 335.23 cv
129.218 335.23 129.558 335.19 129.878 335.11 cv
130.198 335.03 130.528 334.9 130.848 334.72 cv
130.848 335.57 li
130.528 335.71 130.198 335.82 129.858 335.88 cv
129.518 335.94 129.168 335.98 128.828 335.98 cv
127.948 335.98 127.258 335.73 126.748 335.23 cv
126.238 334.73 125.988 334.04 125.988 333.17 cv
125.988 332.28 126.228 331.57 126.708 331.04 cv
127.188 330.52 127.848 330.25 128.668 330.25 cv
129.408 330.25 129.988 330.49 130.418 330.96 cv
130.838 331.44 131.058 332.08 131.058 332.89 cv
130.158 332.63 mo
130.148 332.14 130.008 331.75 129.748 331.45 cv
129.478 331.16 129.118 331.01 128.678 331.01 cv
128.178 331.01 127.778 331.16 127.478 331.44 cv
127.178 331.72 126.998 332.12 126.958 332.63 cv
130.158 332.63 li
f
135.698 331.22 mo
135.598 331.16 135.488 331.12 135.368 331.09 cv
135.248 331.07 135.118 331.05 134.978 331.05 cv
134.468 331.05 134.078 331.22 133.808 331.55 cv
133.528 331.88 133.398 332.35 133.398 332.97 cv
133.398 335.85 li
132.498 335.85 li
132.498 330.38 li
133.398 330.38 li
133.398 331.23 li
133.578 330.9 133.828 330.65 134.128 330.49 cv
134.428 330.33 134.798 330.25 135.238 330.25 cv
135.448 330.26 li
135.518 330.27 135.598 330.28 135.698 330.3 cv
135.698 331.22 li
f
141.318 332.89 mo
141.318 333.33 li
137.188 333.33 li
137.228 333.95 137.408 334.43 137.748 334.75 cv
138.078 335.07 138.538 335.23 139.138 335.23 cv
139.478 335.23 139.818 335.19 140.138 335.11 cv
140.458 335.03 140.788 334.9 141.108 334.72 cv
141.108 335.57 li
140.788 335.71 140.458 335.82 140.118 335.88 cv
139.778 335.94 139.428 335.98 139.088 335.98 cv
138.208 335.98 137.518 335.73 137.008 335.23 cv
136.498 334.73 136.248 334.04 136.248 333.17 cv
136.248 332.28 136.488 331.57 136.968 331.04 cv
137.448 330.52 138.108 330.25 138.928 330.25 cv
139.668 330.25 140.248 330.49 140.678 330.96 cv
141.098 331.44 141.318 332.08 141.318 332.89 cv
140.418 332.63 mo
140.408 332.14 140.268 331.75 140.008 331.45 cv
139.738 331.16 139.378 331.01 138.938 331.01 cv
138.438 331.01 138.038 331.16 137.738 331.44 cv
137.438 331.72 137.258 332.12 137.218 332.63 cv
140.418 332.63 li
f
147.338 332.55 mo
147.338 335.85 li
146.438 335.85 li
146.438 332.58 li
146.438 332.06 146.328 331.68 146.128 331.42 cv
145.928 331.16 145.628 331.03 145.228 331.03 cv
144.738 331.03 144.358 331.19 144.078 331.5 cv
143.798 331.81 143.658 332.23 143.658 332.76 cv
143.658 335.85 li
142.758 335.85 li
142.758 330.38 li
143.658 330.38 li
143.658 331.23 li
143.868 330.91 144.118 330.66 144.418 330.5 cv
144.708 330.34 145.048 330.25 145.428 330.25 cv
146.048 330.25 146.528 330.45 146.848 330.84 cv
147.168 331.23 147.338 331.8 147.338 332.55 cv
f
150.018 328.83 mo
150.018 330.38 li
151.868 330.38 li
151.868 331.08 li
150.018 331.08 li
150.018 334.05 li
150.018 334.5 150.078 334.79 150.198 334.91 cv
150.318 335.04 150.568 335.1 150.948 335.1 cv
151.868 335.1 li
151.868 335.85 li
150.948 335.85 li
150.248 335.85 149.768 335.72 149.508 335.46 cv
149.248 335.2 149.118 334.73 149.118 334.05 cv
149.118 331.08 li
148.458 331.08 li
148.458 330.38 li
149.118 330.38 li
149.118 328.83 li
150.018 328.83 li
f
155.268 328.56 mo
161.428 328.56 li
161.428 329.39 li
158.838 329.39 li
158.838 335.85 li
157.848 335.85 li
157.848 329.39 li
155.268 329.39 li
155.268 328.56 li
f
164.618 336.35 mo
164.358 336.99 164.108 337.42 163.868 337.62 cv
163.628 337.82 163.308 337.92 162.908 337.92 cv
162.188 337.92 li
162.188 337.17 li
162.718 337.17 li
162.958 337.17 163.148 337.11 163.288 336.99 cv
163.428 336.87 163.578 336.6 163.748 336.16 cv
163.908 335.76 li
161.698 330.38 li
162.648 330.38 li
164.358 334.66 li
166.068 330.38 li
167.018 330.38 li
164.618 336.35 li
f
169.128 335.03 mo
169.128 337.92 li
168.228 337.92 li
168.228 330.38 li
169.128 330.38 li
169.128 331.21 li
169.308 330.89 169.548 330.65 169.838 330.49 cv
170.128 330.33 170.478 330.25 170.878 330.25 cv
171.538 330.25 172.078 330.52 172.498 331.04 cv
172.908 331.57 173.118 332.26 173.118 333.12 cv
173.118 333.98 172.908 334.68 172.498 335.2 cv
172.078 335.72 171.538 335.98 170.878 335.98 cv
170.478 335.98 170.128 335.9 169.838 335.75 cv
169.548 335.6 169.308 335.36 169.128 335.03 cv
172.188 333.12 mo
172.188 332.46 172.048 331.95 171.778 331.57 cv
171.498 331.19 171.128 331 170.658 331 cv
170.178 331 169.808 331.19 169.538 331.57 cv
169.258 331.95 169.128 332.46 169.128 333.12 cv
169.128 333.78 169.258 334.3 169.538 334.68 cv
169.808 335.06 170.178 335.24 170.658 335.24 cv
171.128 335.24 171.498 335.06 171.778 334.68 cv
172.048 334.3 172.188 333.78 172.188 333.12 cv
f
179.288 332.89 mo
179.288 333.33 li
175.158 333.33 li
175.198 333.95 175.378 334.43 175.718 334.75 cv
176.048 335.07 176.508 335.23 177.108 335.23 cv
177.448 335.23 177.788 335.19 178.108 335.11 cv
178.428 335.03 178.758 334.9 179.078 334.72 cv
179.078 335.57 li
178.758 335.71 178.428 335.82 178.088 335.88 cv
177.748 335.94 177.398 335.98 177.058 335.98 cv
176.178 335.98 175.488 335.73 174.978 335.23 cv
174.468 334.73 174.218 334.04 174.218 333.17 cv
174.218 332.28 174.458 331.57 174.938 331.04 cv
175.418 330.52 176.078 330.25 176.898 330.25 cv
177.638 330.25 178.218 330.49 178.648 330.96 cv
179.068 331.44 179.288 332.08 179.288 332.89 cv
178.388 332.63 mo
178.378 332.14 178.238 331.75 177.978 331.45 cv
177.708 331.16 177.348 331.01 176.908 331.01 cv
176.408 331.01 176.008 331.16 175.708 331.44 cv
175.408 331.72 175.228 332.12 175.188 332.63 cv
178.388 332.63 li
f
184.248 330.54 mo
184.248 331.39 li
183.988 331.27 183.728 331.17 183.458 331.1 cv
183.178 331.04 182.898 331 182.608 331 cv
182.158 331 181.818 331.07 181.598 331.21 cv
181.378 331.35 181.268 331.55 181.268 331.82 cv
181.268 332.03 181.348 332.19 181.508 332.31 cv
181.668 332.43 181.988 332.55 182.468 332.65 cv
182.778 332.72 li
183.418 332.86 183.868 333.06 184.138 333.3 cv
184.398 333.55 184.538 333.9 184.538 334.34 cv
184.538 334.85 184.338 335.25 183.938 335.54 cv
183.538 335.84 182.978 335.98 182.278 335.98 cv
181.978 335.98 181.678 335.95 181.358 335.9 cv
181.038 335.85 180.708 335.77 180.358 335.65 cv
180.358 334.72 li
180.688 334.9 181.018 335.03 181.338 335.11 cv
181.658 335.2 181.978 335.24 182.298 335.24 cv
182.718 335.24 183.048 335.17 183.278 335.03 cv
183.498 334.89 183.618 334.68 183.618 334.41 cv
183.618 334.17 183.528 333.98 183.368 333.85 cv
183.208 333.72 182.848 333.59 182.288 333.47 cv
181.978 333.4 li
181.418 333.28 181.008 333.1 180.768 332.86 cv
180.518 332.62 180.398 332.29 180.398 331.86 cv
180.398 331.35 180.578 330.95 180.938 330.67 cv
181.298 330.39 181.818 330.25 182.498 330.25 cv
182.828 330.25 183.138 330.28 183.438 330.33 cv
183.728 330.38 183.998 330.45 184.248 330.54 cv
f
191.268 331.01 mo
190.788 331.01 190.408 331.2 190.128 331.58 cv
189.848 331.96 189.708 332.47 189.708 333.12 cv
189.708 333.78 189.838 334.29 190.118 334.67 cv
190.398 335.05 190.778 335.23 191.268 335.23 cv
191.748 335.23 192.128 335.05 192.408 334.67 cv
192.688 334.29 192.828 333.78 192.828 333.12 cv
192.828 332.48 192.688 331.96 192.408 331.58 cv
192.128 331.2 191.748 331.01 191.268 331.01 cv
191.268 330.25 mo
192.048 330.25 192.658 330.51 193.108 331.01 cv
193.548 331.52 193.778 332.22 193.778 333.12 cv
193.778 334.02 193.548 334.72 193.108 335.22 cv
192.658 335.73 192.048 335.98 191.268 335.98 cv
190.478 335.98 189.858 335.73 189.418 335.22 cv
188.978 334.72 188.758 334.02 188.758 333.12 cv
188.758 332.22 188.978 331.52 189.418 331.01 cv
189.858 330.51 190.478 330.25 191.268 330.25 cv
f
198.038 328.25 mo
198.038 329 li
197.178 329 li
196.858 329 196.628 329.07 196.508 329.2 cv
196.378 329.33 196.318 329.56 196.318 329.9 cv
196.318 330.38 li
197.798 330.38 li
197.798 331.08 li
196.318 331.08 li
196.318 335.85 li
195.418 335.85 li
195.418 331.08 li
194.558 331.08 li
194.558 330.38 li
195.418 330.38 li
195.418 330 li
195.418 329.4 195.558 328.95 195.838 328.67 cv
196.118 328.39 196.568 328.25 197.188 328.25 cv
198.038 328.25 li
f
202.998 329.37 mo
202.998 335.04 li
204.188 335.04 li
205.188 335.04 205.928 334.82 206.398 334.36 cv
206.858 333.9 207.098 333.18 207.098 332.2 cv
207.098 331.22 206.858 330.51 206.398 330.05 cv
205.928 329.6 205.188 329.37 204.188 329.37 cv
202.998 329.37 li
202.008 328.56 mo
204.038 328.56 li
205.448 328.56 206.488 328.86 207.148 329.44 cv
207.808 330.03 208.138 330.95 208.138 332.2 cv
208.138 333.46 207.798 334.38 207.138 334.97 cv
206.478 335.56 205.438 335.85 204.038 335.85 cv
202.008 335.85 li
202.008 328.56 li
f
212.158 333.1 mo
211.428 333.1 210.928 333.19 210.648 333.35 cv
210.368 333.52 210.228 333.8 210.228 334.2 cv
210.228 334.52 210.328 334.78 210.538 334.96 cv
210.748 335.15 211.038 335.24 211.398 335.24 cv
211.898 335.24 212.298 335.07 212.598 334.71 cv
212.898 334.36 213.048 333.89 213.048 333.3 cv
213.048 333.1 li
212.158 333.1 li
213.948 332.73 mo
213.948 335.85 li
213.048 335.85 li
213.048 335.02 li
212.838 335.36 212.578 335.6 212.278 335.75 cv
211.978 335.9 211.598 335.98 211.158 335.98 cv
210.598 335.98 210.148 335.83 209.818 335.52 cv
209.488 335.21 209.328 334.79 209.328 334.26 cv
209.328 333.65 209.528 333.19 209.948 332.87 cv
210.358 332.56 210.968 332.4 211.788 332.4 cv
213.048 332.4 li
213.048 332.31 li
213.048 331.9 212.908 331.58 212.638 331.35 cv
212.368 331.13 211.988 331.01 211.498 331.01 cv
211.178 331.01 210.878 331.05 210.578 331.13 cv
210.278 331.21 209.998 331.32 209.728 331.46 cv
209.728 330.63 li
210.048 330.51 210.368 330.41 210.678 330.35 cv
210.988 330.29 211.288 330.25 211.588 330.25 cv
212.378 330.25 212.968 330.46 213.358 330.87 cv
213.748 331.28 213.948 331.9 213.948 332.73 cv
f
216.688 328.83 mo
216.688 330.38 li
218.538 330.38 li
218.538 331.08 li
216.688 331.08 li
216.688 334.05 li
216.688 334.5 216.748 334.79 216.868 334.91 cv
216.988 335.04 217.238 335.1 217.618 335.1 cv
218.538 335.1 li
218.538 335.85 li
217.618 335.85 li
216.918 335.85 216.438 335.72 216.178 335.46 cv
215.918 335.2 215.788 334.73 215.788 334.05 cv
215.788 331.08 li
215.128 331.08 li
215.128 330.38 li
215.788 330.38 li
215.788 328.83 li
216.688 328.83 li
f
222.208 333.1 mo
221.478 333.1 220.978 333.19 220.698 333.35 cv
220.418 333.52 220.278 333.8 220.278 334.2 cv
220.278 334.52 220.378 334.78 220.588 334.96 cv
220.798 335.15 221.088 335.24 221.448 335.24 cv
221.948 335.24 222.348 335.07 222.648 334.71 cv
222.948 334.36 223.098 333.89 223.098 333.3 cv
223.098 333.1 li
222.208 333.1 li
223.998 332.73 mo
223.998 335.85 li
223.098 335.85 li
223.098 335.02 li
222.888 335.36 222.628 335.6 222.328 335.75 cv
222.028 335.9 221.648 335.98 221.208 335.98 cv
220.648 335.98 220.198 335.83 219.868 335.52 cv
219.538 335.21 219.378 334.79 219.378 334.26 cv
219.378 333.65 219.578 333.19 219.998 332.87 cv
220.408 332.56 221.018 332.4 221.838 332.4 cv
223.098 332.4 li
223.098 332.31 li
223.098 331.9 222.958 331.58 222.688 331.35 cv
222.418 331.13 222.038 331.01 221.548 331.01 cv
221.228 331.01 220.928 331.05 220.628 331.13 cv
220.328 331.21 220.048 331.32 219.778 331.46 cv
219.778 330.63 li
220.098 330.51 220.418 330.41 220.728 330.35 cv
221.038 330.29 221.338 330.25 221.638 330.25 cv
222.428 330.25 223.018 330.46 223.408 330.87 cv
223.798 331.28 223.998 331.9 223.998 332.73 cv
f
234.528 329.12 mo
234.528 330.16 li
234.188 329.86 233.838 329.63 233.458 329.47 cv
233.078 329.32 232.688 329.24 232.268 329.24 cv
231.428 329.24 230.788 329.5 230.348 330.01 cv
229.908 330.52 229.688 331.25 229.688 332.21 cv
229.688 333.17 229.908 333.91 230.348 334.42 cv
230.788 334.93 231.428 335.18 232.268 335.18 cv
232.688 335.18 233.078 335.11 233.458 334.95 cv
233.838 334.8 234.188 334.57 234.528 334.26 cv
234.528 335.29 li
234.178 335.53 233.808 335.7 233.428 335.81 cv
233.048 335.92 232.638 335.98 232.208 335.98 cv
231.108 335.98 230.238 335.65 229.598 334.98 cv
228.958 334.31 228.648 333.39 228.648 332.21 cv
228.648 331.04 228.958 330.12 229.598 329.44 cv
230.238 328.77 231.108 328.43 232.208 328.43 cv
232.648 328.43 233.058 328.49 233.438 328.6 cv
233.818 328.72 234.188 328.89 234.528 329.12 cv
f
238.128 331.01 mo
237.648 331.01 237.268 331.2 236.988 331.58 cv
236.708 331.96 236.568 332.47 236.568 333.12 cv
236.568 333.78 236.698 334.29 236.978 334.67 cv
237.258 335.05 237.638 335.23 238.128 335.23 cv
238.608 335.23 238.988 335.05 239.268 334.67 cv
239.548 334.29 239.688 333.78 239.688 333.12 cv
239.688 332.48 239.548 331.96 239.268 331.58 cv
238.988 331.2 238.608 331.01 238.128 331.01 cv
238.128 330.25 mo
238.908 330.25 239.518 330.51 239.968 331.01 cv
240.408 331.52 240.638 332.22 240.638 333.12 cv
240.638 334.02 240.408 334.72 239.968 335.22 cv
239.518 335.73 238.908 335.98 238.128 335.98 cv
237.338 335.98 236.718 335.73 236.278 335.22 cv
235.838 334.72 235.618 334.02 235.618 333.12 cv
235.618 332.22 235.838 331.52 236.278 331.01 cv
236.718 330.51 237.338 330.25 238.128 330.25 cv
f
246.388 331.43 mo
246.608 331.03 246.878 330.74 247.188 330.54 cv
247.498 330.35 247.868 330.25 248.298 330.25 cv
248.858 330.25 249.298 330.45 249.608 330.85 cv
249.918 331.25 250.078 331.82 250.078 332.55 cv
250.078 335.85 li
249.178 335.85 li
249.178 332.58 li
249.178 332.06 249.078 331.67 248.898 331.41 cv
248.708 331.16 248.428 331.03 248.048 331.03 cv
247.578 331.03 247.208 331.19 246.938 331.5 cv
246.668 331.81 246.538 332.23 246.538 332.76 cv
246.538 335.85 li
245.638 335.85 li
245.638 332.58 li
245.638 332.06 245.538 331.67 245.358 331.41 cv
245.168 331.16 244.878 331.03 244.498 331.03 cv
244.038 331.03 243.668 331.19 243.398 331.5 cv
243.128 331.81 242.998 332.23 242.998 332.76 cv
242.998 335.85 li
242.098 335.85 li
242.098 330.38 li
242.998 330.38 li
242.998 331.23 li
243.198 330.9 243.448 330.65 243.738 330.49 cv
244.018 330.33 244.358 330.25 244.758 330.25 cv
245.158 330.25 245.488 330.35 245.768 330.55 cv
246.048 330.75 246.248 331.05 246.388 331.43 cv
f
256.128 331.43 mo
256.348 331.03 256.618 330.74 256.928 330.54 cv
257.238 330.35 257.608 330.25 258.038 330.25 cv
258.598 330.25 259.038 330.45 259.348 330.85 cv
259.658 331.25 259.818 331.82 259.818 332.55 cv
259.818 335.85 li
258.918 335.85 li
258.918 332.58 li
258.918 332.06 258.818 331.67 258.638 331.41 cv
258.448 331.16 258.168 331.03 257.788 331.03 cv
257.318 331.03 256.948 331.19 256.678 331.5 cv
256.408 331.81 256.278 332.23 256.278 332.76 cv
256.278 335.85 li
255.378 335.85 li
255.378 332.58 li
255.378 332.06 255.278 331.67 255.098 331.41 cv
254.908 331.16 254.618 331.03 254.238 331.03 cv
253.778 331.03 253.408 331.19 253.138 331.5 cv
252.868 331.81 252.738 332.23 252.738 332.76 cv
252.738 335.85 li
251.838 335.85 li
251.838 330.38 li
252.738 330.38 li
252.738 331.23 li
252.938 330.9 253.188 330.65 253.478 330.49 cv
253.758 330.33 254.098 330.25 254.498 330.25 cv
254.898 330.25 255.228 330.35 255.508 330.55 cv
255.788 330.75 255.988 331.05 256.128 331.43 cv
f
261.518 333.69 mo
261.518 330.38 li
262.418 330.38 li
262.418 333.66 li
262.418 334.18 262.518 334.56 262.718 334.82 cv
262.918 335.08 263.218 335.21 263.628 335.21 cv
264.108 335.21 264.498 335.06 264.778 334.75 cv
265.058 334.44 265.198 334.02 265.198 333.48 cv
265.198 330.38 li
266.098 330.38 li
266.098 335.85 li
265.198 335.85 li
265.198 335.01 li
264.978 335.35 264.718 335.59 264.438 335.75 cv
264.148 335.9 263.818 335.98 263.438 335.98 cv
262.808 335.98 262.328 335.79 262.008 335.4 cv
261.678 335.02 261.518 334.45 261.518 333.69 cv
263.778 330.25 mo
263.778 330.25 li
f
272.498 332.55 mo
272.498 335.85 li
271.598 335.85 li
271.598 332.58 li
271.598 332.06 271.488 331.68 271.288 331.42 cv
271.088 331.16 270.788 331.03 270.388 331.03 cv
269.898 331.03 269.518 331.19 269.238 331.5 cv
268.958 331.81 268.818 332.23 268.818 332.76 cv
268.818 335.85 li
267.918 335.85 li
267.918 330.38 li
268.818 330.38 li
268.818 331.23 li
269.028 330.91 269.278 330.66 269.578 330.5 cv
269.868 330.34 270.208 330.25 270.588 330.25 cv
271.208 330.25 271.688 330.45 272.008 330.84 cv
272.328 331.23 272.498 331.8 272.498 332.55 cv
f
274.288 330.38 mo
275.188 330.38 li
275.188 335.85 li
274.288 335.85 li
274.288 330.38 li
274.288 328.25 mo
275.188 328.25 li
275.188 329.39 li
274.288 329.39 li
274.288 328.25 li
f
281.008 330.59 mo
281.008 331.43 li
280.748 331.29 280.498 331.19 280.238 331.12 cv
279.978 331.05 279.728 331.01 279.468 331.01 cv
278.888 331.01 278.428 331.2 278.108 331.57 cv
277.788 331.94 277.628 332.46 277.628 333.12 cv
277.628 333.79 277.788 334.31 278.108 334.68 cv
278.428 335.05 278.888 335.23 279.468 335.23 cv
279.728 335.23 279.978 335.2 280.238 335.13 cv
280.498 335.06 280.748 334.95 281.008 334.81 cv
281.008 335.64 li
280.748 335.76 280.488 335.85 280.228 335.9 cv
279.958 335.95 279.668 335.98 279.368 335.98 cv
278.548 335.98 277.888 335.73 277.408 335.21 cv
276.918 334.7 276.678 334 276.678 333.12 cv
276.678 332.23 276.918 331.53 277.408 331.02 cv
277.898 330.51 278.568 330.25 279.428 330.25 cv
279.708 330.25 279.978 330.28 280.238 330.34 cv
280.498 330.4 280.758 330.48 281.008 330.59 cv
f
285.058 333.1 mo
284.328 333.1 283.828 333.19 283.548 333.35 cv
283.268 333.52 283.128 333.8 283.128 334.2 cv
283.128 334.52 283.228 334.78 283.438 334.96 cv
283.648 335.15 283.938 335.24 284.298 335.24 cv
284.798 335.24 285.198 335.07 285.498 334.71 cv
285.798 334.36 285.948 333.89 285.948 333.3 cv
285.948 333.1 li
285.058 333.1 li
286.848 332.73 mo
286.848 335.85 li
285.948 335.85 li
285.948 335.02 li
285.738 335.36 285.478 335.6 285.178 335.75 cv
284.878 335.9 284.498 335.98 284.058 335.98 cv
283.498 335.98 283.048 335.83 282.718 335.52 cv
282.388 335.21 282.228 334.79 282.228 334.26 cv
282.228 333.65 282.428 333.19 282.848 332.87 cv
283.258 332.56 283.868 332.4 284.688 332.4 cv
285.948 332.4 li
285.948 332.31 li
285.948 331.9 285.808 331.58 285.538 331.35 cv
285.268 331.13 284.888 331.01 284.398 331.01 cv
284.078 331.01 283.778 331.05 283.478 331.13 cv
283.178 331.21 282.898 331.32 282.628 331.46 cv
282.628 330.63 li
282.948 330.51 283.268 330.41 283.578 330.35 cv
283.888 330.29 284.188 330.25 284.488 330.25 cv
285.278 330.25 285.868 330.46 286.258 330.87 cv
286.648 331.28 286.848 331.9 286.848 332.73 cv
f
289.588 328.83 mo
289.588 330.38 li
291.438 330.38 li
291.438 331.08 li
289.588 331.08 li
289.588 334.05 li
289.588 334.5 289.648 334.79 289.768 334.91 cv
289.888 335.04 290.138 335.1 290.518 335.1 cv
291.438 335.1 li
291.438 335.85 li
290.518 335.85 li
289.818 335.85 289.338 335.72 289.078 335.46 cv
288.818 335.2 288.688 334.73 288.688 334.05 cv
288.688 331.08 li
288.028 331.08 li
288.028 330.38 li
288.688 330.38 li
288.688 328.83 li
289.588 328.83 li
f
292.618 330.38 mo
293.518 330.38 li
293.518 335.85 li
292.618 335.85 li
292.618 330.38 li
292.618 328.25 mo
293.518 328.25 li
293.518 329.39 li
292.618 329.39 li
292.618 328.25 li
f
297.518 331.01 mo
297.038 331.01 296.658 331.2 296.378 331.58 cv
296.098 331.96 295.958 332.47 295.958 333.12 cv
295.958 333.78 296.088 334.29 296.368 334.67 cv
296.648 335.05 297.028 335.23 297.518 335.23 cv
297.998 335.23 298.378 335.05 298.658 334.67 cv
298.938 334.29 299.078 333.78 299.078 333.12 cv
299.078 332.48 298.938 331.96 298.658 331.58 cv
298.378 331.2 297.998 331.01 297.518 331.01 cv
297.518 330.25 mo
298.298 330.25 298.908 330.51 299.358 331.01 cv
299.798 331.52 300.028 332.22 300.028 333.12 cv
300.028 334.02 299.798 334.72 299.358 335.22 cv
298.908 335.73 298.298 335.98 297.518 335.98 cv
296.728 335.98 296.108 335.73 295.668 335.22 cv
295.228 334.72 295.008 334.02 295.008 333.12 cv
295.008 332.22 295.228 331.52 295.668 331.01 cv
296.108 330.51 296.728 330.25 297.518 330.25 cv
f
306.068 332.55 mo
306.068 335.85 li
305.168 335.85 li
305.168 332.58 li
305.168 332.06 305.058 331.68 304.858 331.42 cv
304.658 331.16 304.358 331.03 303.958 331.03 cv
303.468 331.03 303.088 331.19 302.808 331.5 cv
302.528 331.81 302.388 332.23 302.388 332.76 cv
302.388 335.85 li
301.488 335.85 li
301.488 330.38 li
302.388 330.38 li
302.388 331.23 li
302.598 330.91 302.848 330.66 303.148 330.5 cv
303.438 330.34 303.778 330.25 304.158 330.25 cv
304.778 330.25 305.258 330.45 305.578 330.84 cv
305.898 331.23 306.068 331.8 306.068 332.55 cv
f
313.518 329.53 mo
312.178 333.16 li
314.858 333.16 li
313.518 329.53 li
312.958 328.56 mo
314.078 328.56 li
316.858 335.85 li
315.828 335.85 li
315.168 333.98 li
311.878 333.98 li
311.218 335.85 li
310.178 335.85 li
312.958 328.56 li
f
317.878 328.25 mo
318.778 328.25 li
318.778 335.85 li
317.878 335.85 li
317.878 328.25 li
f
324.258 333.05 mo
324.258 332.41 324.118 331.9 323.858 331.54 cv
323.588 331.18 323.208 331 322.728 331 cv
322.248 331 321.868 331.18 321.598 331.54 cv
321.328 331.9 321.198 332.41 321.198 333.05 cv
321.198 333.7 321.328 334.2 321.598 334.56 cv
321.868 334.92 322.248 335.1 322.728 335.1 cv
323.208 335.1 323.588 334.92 323.858 334.56 cv
324.118 334.2 324.258 333.7 324.258 333.05 cv
325.158 335.17 mo
325.158 336.09 324.948 336.78 324.538 337.24 cv
324.118 337.69 323.488 337.92 322.638 337.92 cv
322.318 337.92 322.028 337.89 321.748 337.85 cv
321.468 337.8 321.188 337.73 320.928 337.63 cv
320.928 336.76 li
321.188 336.9 321.448 337 321.708 337.07 cv
321.968 337.14 322.228 337.18 322.498 337.18 cv
323.078 337.18 323.518 337.02 323.818 336.72 cv
324.108 336.41 324.258 335.95 324.258 335.33 cv
324.258 334.89 li
324.068 335.21 323.828 335.45 323.538 335.61 cv
323.248 335.77 322.908 335.85 322.508 335.85 cv
321.828 335.85 321.288 335.6 320.878 335.09 cv
320.468 334.58 320.268 333.9 320.268 333.05 cv
320.268 332.21 320.468 331.53 320.878 331.02 cv
321.288 330.51 321.828 330.25 322.508 330.25 cv
322.908 330.25 323.248 330.33 323.538 330.49 cv
323.828 330.65 324.068 330.89 324.258 331.21 cv
324.258 330.38 li
325.158 330.38 li
325.158 335.17 li
f
329.128 331.01 mo
328.648 331.01 328.268 331.2 327.988 331.58 cv
327.708 331.96 327.568 332.47 327.568 333.12 cv
327.568 333.78 327.698 334.29 327.978 334.67 cv
328.258 335.05 328.638 335.23 329.128 335.23 cv
329.608 335.23 329.988 335.05 330.268 334.67 cv
330.548 334.29 330.688 333.78 330.688 333.12 cv
330.688 332.48 330.548 331.96 330.268 331.58 cv
329.988 331.2 329.608 331.01 329.128 331.01 cv
329.128 330.25 mo
329.908 330.25 330.518 330.51 330.968 331.01 cv
331.408 331.52 331.638 332.22 331.638 333.12 cv
331.638 334.02 331.408 334.72 330.968 335.22 cv
330.518 335.73 329.908 335.98 329.128 335.98 cv
328.338 335.98 327.718 335.73 327.278 335.22 cv
326.838 334.72 326.618 334.02 326.618 333.12 cv
326.618 332.22 326.838 331.52 327.278 331.01 cv
327.718 330.51 328.338 330.25 329.128 330.25 cv
f
336.298 331.22 mo
336.198 331.16 336.088 331.12 335.968 331.09 cv
335.848 331.07 335.718 331.05 335.578 331.05 cv
335.068 331.05 334.678 331.22 334.408 331.55 cv
334.128 331.88 333.998 332.35 333.998 332.97 cv
333.998 335.85 li
333.098 335.85 li
333.098 330.38 li
333.998 330.38 li
333.998 331.23 li
334.178 330.9 334.428 330.65 334.728 330.49 cv
335.028 330.33 335.398 330.25 335.838 330.25 cv
336.048 330.26 li
336.118 330.27 336.198 330.28 336.298 330.3 cv
336.298 331.22 li
f
337.238 330.38 mo
338.138 330.38 li
338.138 335.85 li
337.238 335.85 li
337.238 330.38 li
337.238 328.25 mo
338.138 328.25 li
338.138 329.39 li
337.238 329.39 li
337.238 328.25 li
f
340.908 328.83 mo
340.908 330.38 li
342.758 330.38 li
342.758 331.08 li
340.908 331.08 li
340.908 334.05 li
340.908 334.5 340.968 334.79 341.088 334.91 cv
341.208 335.04 341.458 335.1 341.838 335.1 cv
342.758 335.1 li
342.758 335.85 li
341.838 335.85 li
341.138 335.85 340.658 335.72 340.398 335.46 cv
340.138 335.2 340.008 334.73 340.008 334.05 cv
340.008 331.08 li
339.348 331.08 li
339.348 330.38 li
340.008 330.38 li
340.008 328.83 li
340.908 328.83 li
f
348.488 332.55 mo
348.488 335.85 li
347.588 335.85 li
347.588 332.58 li
347.588 332.06 347.478 331.68 347.278 331.42 cv
347.078 331.16 346.778 331.03 346.378 331.03 cv
345.888 331.03 345.508 331.19 345.228 331.5 cv
344.948 331.81 344.808 332.23 344.808 332.76 cv
344.808 335.85 li
343.908 335.85 li
343.908 328.25 li
344.808 328.25 li
344.808 331.23 li
345.018 330.91 345.268 330.66 345.568 330.5 cv
345.858 330.34 346.198 330.25 346.578 330.25 cv
347.198 330.25 347.678 330.45 347.998 330.84 cv
348.318 331.23 348.488 331.8 348.488 332.55 cv
f
354.538 331.43 mo
354.758 331.03 355.028 330.74 355.338 330.54 cv
355.648 330.35 356.018 330.25 356.448 330.25 cv
357.008 330.25 357.448 330.45 357.758 330.85 cv
358.068 331.25 358.228 331.82 358.228 332.55 cv
358.228 335.85 li
357.328 335.85 li
357.328 332.58 li
357.328 332.06 357.228 331.67 357.048 331.41 cv
356.858 331.16 356.578 331.03 356.198 331.03 cv
355.728 331.03 355.358 331.19 355.088 331.5 cv
354.818 331.81 354.688 332.23 354.688 332.76 cv
354.688 335.85 li
353.788 335.85 li
353.788 332.58 li
353.788 332.06 353.688 331.67 353.508 331.41 cv
353.318 331.16 353.028 331.03 352.648 331.03 cv
352.188 331.03 351.818 331.19 351.548 331.5 cv
351.278 331.81 351.148 332.23 351.148 332.76 cv
351.148 335.85 li
350.248 335.85 li
350.248 330.38 li
351.148 330.38 li
351.148 331.23 li
351.348 330.9 351.598 330.65 351.888 330.49 cv
352.168 330.33 352.508 330.25 352.908 330.25 cv
353.308 330.25 353.638 330.35 353.918 330.55 cv
354.198 330.75 354.398 331.05 354.538 331.43 cv
f
363.508 330.54 mo
363.508 331.39 li
363.248 331.27 362.988 331.17 362.718 331.1 cv
362.438 331.04 362.158 331 361.868 331 cv
361.418 331 361.078 331.07 360.858 331.21 cv
360.638 331.35 360.528 331.55 360.528 331.82 cv
360.528 332.03 360.608 332.19 360.768 332.31 cv
360.928 332.43 361.248 332.55 361.728 332.65 cv
362.038 332.72 li
362.678 332.86 363.128 333.06 363.398 333.3 cv
363.658 333.55 363.798 333.9 363.798 334.34 cv
363.798 334.85 363.598 335.25 363.198 335.54 cv
362.798 335.84 362.238 335.98 361.538 335.98 cv
361.238 335.98 360.938 335.95 360.618 335.9 cv
360.298 335.85 359.968 335.77 359.618 335.65 cv
359.618 334.72 li
359.948 334.9 360.278 335.03 360.598 335.11 cv
360.918 335.2 361.238 335.24 361.558 335.24 cv
361.978 335.24 362.308 335.17 362.538 335.03 cv
362.758 334.89 362.878 334.68 362.878 334.41 cv
362.878 334.17 362.788 333.98 362.628 333.85 cv
362.468 333.72 362.108 333.59 361.548 333.47 cv
361.238 333.4 li
360.678 333.28 360.268 333.1 360.028 332.86 cv
359.778 332.62 359.658 332.29 359.658 331.86 cv
359.658 331.35 359.838 330.95 360.198 330.67 cv
360.558 330.39 361.078 330.25 361.758 330.25 cv
362.088 330.25 362.398 330.28 362.698 330.33 cv
362.988 330.38 363.258 330.45 363.508 330.54 cv
f
57.6 274.142 mo
54.1 274.142 li
f
57.6 274.142 mo
54.1 274.142 li
@
41.9412 274.009 mo
42.4112 274.109 42.7813 274.319 43.0412 274.639 cv
43.3013 274.959 43.4412 275.359 43.4412 275.819 cv
43.4412 276.539 43.1912 277.099 42.7012 277.489 cv
42.2012 277.879 41.5012 278.069 40.5912 278.069 cv
40.2813 278.069 39.9613 278.039 39.6412 277.979 cv
39.3212 277.929 38.9812 277.839 38.6412 277.719 cv
38.6412 276.769 li
38.9112 276.929 39.2113 277.049 39.5412 277.129 cv
39.8612 277.209 40.2012 277.249 40.5612 277.249 cv
41.1812 277.249 41.6512 277.129 41.9712 276.889 cv
42.2912 276.649 42.4613 276.289 42.4613 275.819 cv
42.4613 275.399 42.3112 275.059 42.0112 274.819 cv
41.7113 274.579 41.2912 274.449 40.7512 274.449 cv
39.9012 274.449 li
39.9012 273.639 li
40.7912 273.639 li
41.2712 273.639 41.6413 273.549 41.9012 273.349 cv
42.1612 273.159 42.2912 272.879 42.2912 272.509 cv
42.2912 272.139 42.1512 271.849 41.8913 271.649 cv
41.6213 271.449 41.2412 271.349 40.7512 271.349 cv
40.4812 271.349 40.1912 271.379 39.8812 271.439 cv
39.5712 271.499 39.2312 271.589 38.8612 271.709 cv
38.8612 270.829 li
39.2312 270.729 39.5812 270.649 39.9112 270.599 cv
40.2312 270.549 40.5412 270.519 40.8412 270.519 cv
41.5812 270.519 42.1712 270.689 42.6112 271.029 cv
43.0513 271.369 43.2712 271.829 43.2712 272.409 cv
43.2712 272.809 43.1512 273.149 42.9212 273.429 cv
42.6912 273.709 42.3612 273.909 41.9412 274.009 cv
f
47.4213 271.299 mo
46.9113 271.299 46.5313 271.549 46.2713 272.049 cv
46.0113 272.549 45.8913 273.299 45.8913 274.299 cv
45.8913 275.299 46.0113 276.049 46.2713 276.549 cv
46.5313 277.049 46.9113 277.299 47.4213 277.299 cv
47.9313 277.299 48.3113 277.049 48.5713 276.549 cv
48.8213 276.049 48.9513 275.299 48.9513 274.299 cv
48.9513 273.299 48.8213 272.549 48.5713 272.049 cv
48.3113 271.549 47.9313 271.299 47.4213 271.299 cv
47.4213 270.519 mo
48.2313 270.519 48.8513 270.849 49.2913 271.489 cv
49.7213 272.139 49.9413 273.079 49.9413 274.299 cv
49.9413 275.529 49.7213 276.469 49.2913 277.109 cv
48.8513 277.749 48.2313 278.069 47.4213 278.069 cv
46.6013 278.069 45.9713 277.749 45.5413 277.109 cv
45.1113 276.469 44.9013 275.529 44.9013 274.299 cv
44.9013 273.079 45.1113 272.139 45.5413 271.489 cv
45.9713 270.849 46.6013 270.519 47.4213 270.519 cv
f
57.6 238.566 mo
54.1 238.566 li
f
57.6 238.566 mo
54.1 238.566 li
@
41.6612 235.933 mo
39.1712 239.823 li
41.6612 239.823 li
41.6612 235.933 li
41.4012 235.073 mo
42.6413 235.073 li
42.6413 239.823 li
43.6812 239.823 li
43.6812 240.643 li
42.6413 240.643 li
42.6413 242.363 li
41.6612 242.363 li
41.6612 240.643 li
38.3713 240.643 li
38.3713 239.693 li
41.4012 235.073 li
f
47.4213 235.723 mo
46.9113 235.723 46.5313 235.973 46.2713 236.473 cv
46.0113 236.973 45.8913 237.723 45.8913 238.723 cv
45.8913 239.723 46.0113 240.473 46.2713 240.973 cv
46.5313 241.473 46.9113 241.723 47.4213 241.723 cv
47.9313 241.723 48.3113 241.473 48.5713 240.973 cv
48.8213 240.473 48.9513 239.723 48.9513 238.723 cv
48.9513 237.723 48.8213 236.973 48.5713 236.473 cv
48.3113 235.973 47.9313 235.723 47.4213 235.723 cv
47.4213 234.943 mo
48.2313 234.943 48.8513 235.273 49.2913 235.913 cv
49.7213 236.563 49.9413 237.503 49.9413 238.723 cv
49.9413 239.953 49.7213 240.893 49.2913 241.533 cv
48.8513 242.173 48.2313 242.493 47.4213 242.493 cv
46.6013 242.493 45.9713 242.173 45.5413 241.533 cv
45.1113 240.893 44.9013 239.953 44.9013 238.723 cv
44.9013 237.503 45.1113 236.563 45.5413 235.913 cv
45.9713 235.273 46.6013 234.943 47.4213 234.943 cv
f
57.6 202.989 mo
54.1 202.989 li
f
57.6 202.989 mo
54.1 202.989 li
@
38.9613 199.496 mo
42.8312 199.496 li
42.8312 200.326 li
39.8612 200.326 li
39.8612 202.116 li
40.0012 202.066 40.1512 202.026 40.2912 202.006 cv
40.4312 201.986 40.5812 201.966 40.7212 201.966 cv
41.5313 201.966 42.1712 202.196 42.6512 202.636 cv
43.1312 203.086 43.3713 203.686 43.3713 204.446 cv
43.3713 205.236 43.1213 205.846 42.6312 206.276 cv
42.1413 206.706 41.4512 206.916 40.5712 206.916 cv
40.2612 206.916 39.9512 206.886 39.6312 206.846 cv
39.3112 206.796 38.9912 206.726 38.6512 206.616 cv
38.6512 205.626 li
38.9412 205.786 39.2412 205.906 39.5612 205.986 cv
39.8713 206.066 40.2012 206.096 40.5512 206.096 cv
41.1112 206.096 41.5612 205.956 41.8913 205.656 cv
42.2113 205.356 42.3812 204.956 42.3812 204.446 cv
42.3812 203.946 42.2113 203.546 41.8913 203.246 cv
41.5612 202.946 41.1112 202.796 40.5512 202.796 cv
40.2912 202.796 40.0212 202.826 39.7612 202.886 cv
39.5012 202.946 39.2312 203.036 38.9613 203.156 cv
38.9613 199.496 li
f
47.4213 200.146 mo
46.9113 200.146 46.5313 200.396 46.2713 200.896 cv
46.0113 201.396 45.8913 202.146 45.8913 203.146 cv
45.8913 204.146 46.0113 204.896 46.2713 205.396 cv
46.5313 205.896 46.9113 206.146 47.4213 206.146 cv
47.9313 206.146 48.3113 205.896 48.5713 205.396 cv
48.8213 204.896 48.9513 204.146 48.9513 203.146 cv
48.9513 202.146 48.8213 201.396 48.5713 200.896 cv
48.3113 200.396 47.9313 200.146 47.4213 200.146 cv
47.4213 199.366 mo
48.2313 199.366 48.8513 199.696 49.2913 200.336 cv
49.7213 200.986 49.9413 201.926 49.9413 203.146 cv
49.9413 204.376 49.7213 205.316 49.2913 205.956 cv
48.8513 206.596 48.2313 206.916 47.4213 206.916 cv
46.6013 206.916 45.9713 206.596 45.5413 205.956 cv
45.1113 205.316 44.9013 204.376 44.9013 203.146 cv
44.9013 201.926 45.1113 200.986 45.5413 200.336 cv
45.9713 199.696 46.6013 199.366 47.4213 199.366 cv
f
57.6 167.413 mo
54.1 167.413 li
f
57.6 167.413 mo
54.1 167.413 li
@
41.1812 167.17 mo
40.7412 167.17 40.3913 167.33 40.1312 167.63 cv
39.8713 167.93 39.7412 168.35 39.7412 168.87 cv
39.7412 169.4 39.8713 169.82 40.1312 170.12 cv
40.3913 170.42 40.7412 170.57 41.1812 170.57 cv
41.6213 170.57 41.9712 170.42 42.2312 170.12 cv
42.4912 169.82 42.6213 169.4 42.6213 168.87 cv
42.6213 168.35 42.4912 167.93 42.2312 167.63 cv
41.9712 167.33 41.6213 167.17 41.1812 167.17 cv
43.1413 164.08 mo
43.1413 164.98 li
42.8913 164.86 42.6413 164.77 42.3913 164.71 cv
42.1312 164.65 41.8812 164.62 41.6413 164.62 cv
40.9812 164.62 40.4812 164.84 40.1413 165.28 cv
39.8012 165.72 39.6012 166.39 39.5612 167.27 cv
39.7512 166.99 39.9912 166.77 40.2813 166.62 cv
40.5712 166.47 40.8913 166.39 41.2412 166.39 cv
41.9712 166.39 42.5513 166.62 42.9712 167.06 cv
43.3913 167.5 43.6112 168.11 43.6112 168.87 cv
43.6112 169.62 43.3812 170.22 42.9412 170.67 cv
42.5012 171.12 41.9112 171.34 41.1812 171.34 cv
40.3412 171.34 39.6912 171.02 39.2512 170.38 cv
38.8012 169.74 38.5812 168.8 38.5812 167.57 cv
38.5812 166.42 38.8512 165.5 39.4012 164.82 cv
39.9412 164.14 40.6812 163.79 41.6012 163.79 cv
41.8412 163.79 42.0912 163.82 42.3512 163.86 cv
42.6012 163.91 42.8612 163.98 43.1413 164.08 cv
f
47.4213 164.57 mo
46.9113 164.57 46.5313 164.82 46.2713 165.32 cv
46.0113 165.82 45.8913 166.57 45.8913 167.57 cv
45.8913 168.57 46.0113 169.32 46.2713 169.82 cv
46.5313 170.32 46.9113 170.57 47.4213 170.57 cv
47.9313 170.57 48.3113 170.32 48.5713 169.82 cv
48.8213 169.32 48.9513 168.57 48.9513 167.57 cv
48.9513 166.57 48.8213 165.82 48.5713 165.32 cv
48.3113 164.82 47.9313 164.57 47.4213 164.57 cv
47.4213 163.79 mo
48.2313 163.79 48.8513 164.12 49.2913 164.76 cv
49.7213 165.41 49.9413 166.35 49.9413 167.57 cv
49.9413 168.8 49.7213 169.74 49.2913 170.38 cv
48.8513 171.02 48.2313 171.34 47.4213 171.34 cv
46.6013 171.34 45.9713 171.02 45.5413 170.38 cv
45.1113 169.74 44.9013 168.8 44.9013 167.57 cv
44.9013 166.35 45.1113 165.41 45.5413 164.76 cv
45.9713 164.12 46.6013 163.79 47.4213 163.79 cv
f
57.6 131.836 mo
54.1 131.836 li
f
57.6 131.836 mo
54.1 131.836 li
@
38.7012 128.343 mo
43.3913 128.343 li
43.3913 128.763 li
40.7412 135.633 li
39.7113 135.633 li
42.2012 129.173 li
38.7012 129.173 li
38.7012 128.343 li
f
47.4213 128.993 mo
46.9113 128.993 46.5313 129.243 46.2713 129.743 cv
46.0113 130.243 45.8913 130.993 45.8913 131.993 cv
45.8913 132.993 46.0113 133.743 46.2713 134.243 cv
46.5313 134.743 46.9113 134.993 47.4213 134.993 cv
47.9313 134.993 48.3113 134.743 48.5713 134.243 cv
48.8213 133.743 48.9513 132.993 48.9513 131.993 cv
48.9513 130.993 48.8213 130.243 48.5713 129.743 cv
48.3113 129.243 47.9313 128.993 47.4213 128.993 cv
47.4213 128.213 mo
48.2313 128.213 48.8513 128.543 49.2913 129.183 cv
49.7213 129.833 49.9413 130.773 49.9413 131.993 cv
49.9413 133.223 49.7213 134.163 49.2913 134.803 cv
48.8513 135.443 48.2313 135.763 47.4213 135.763 cv
46.6013 135.763 45.9713 135.443 45.5413 134.803 cv
45.1113 134.163 44.9013 133.223 44.9013 131.993 cv
44.9013 130.773 45.1113 129.833 45.5413 129.183 cv
45.9713 128.543 46.6013 128.213 47.4213 128.213 cv
f
57.6 96.2598 mo
54.1 96.2598 li
f
57.6 96.2598 mo
54.1 96.2598 li
@
41.0612 96.5966 mo
40.5912 96.5966 40.2212 96.7266 39.9512 96.9766 cv
39.6812 97.2266 39.5512 97.5666 39.5512 98.0066 cv
39.5512 98.4466 39.6812 98.7966 39.9512 99.0466 cv
40.2212 99.2966 40.5912 99.4166 41.0612 99.4166 cv
41.5212 99.4166 41.8913 99.2966 42.1612 99.0366 cv
42.4312 98.7866 42.5713 98.4466 42.5713 98.0066 cv
42.5713 97.5666 42.4312 97.2266 42.1712 96.9766 cv
41.9012 96.7266 41.5313 96.5966 41.0612 96.5966 cv
40.0712 96.1766 mo
39.6512 96.0766 39.3212 95.8766 39.0812 95.5866 cv
38.8412 95.2966 38.7312 94.9466 38.7312 94.5266 cv
38.7312 93.9466 38.9312 93.4866 39.3512 93.1466 cv
39.7612 92.8066 40.3312 92.6366 41.0612 92.6366 cv
41.7813 92.6366 42.3512 92.8066 42.7712 93.1466 cv
43.1812 93.4866 43.3913 93.9466 43.3913 94.5266 cv
43.3913 94.9466 43.2712 95.2966 43.0313 95.5866 cv
42.7912 95.8766 42.4712 96.0766 42.0512 96.1766 cv
42.5212 96.2866 42.8913 96.5066 43.1612 96.8266 cv
43.4212 97.1466 43.5612 97.5466 43.5612 98.0066 cv
43.5612 98.7166 43.3412 99.2566 42.9112 99.6266 cv
42.4712 100.007 41.8612 100.187 41.0612 100.187 cv
40.2512 100.187 39.6312 100.007 39.2012 99.6266 cv
38.7712 99.2566 38.5612 98.7166 38.5612 98.0066 cv
38.5612 97.5466 38.6912 97.1466 38.9613 96.8266 cv
39.2212 96.5066 39.5912 96.2866 40.0712 96.1766 cv
39.7113 94.6166 mo
39.7113 94.9966 39.8212 95.2966 40.0612 95.5066 cv
40.3012 95.7166 40.6312 95.8166 41.0612 95.8166 cv
41.4812 95.8166 41.8112 95.7166 42.0512 95.5066 cv
42.2912 95.2966 42.4112 94.9966 42.4112 94.6166 cv
42.4112 94.2366 42.2912 93.9466 42.0512 93.7366 cv
41.8112 93.5266 41.4812 93.4166 41.0612 93.4166 cv
40.6312 93.4166 40.3012 93.5266 40.0612 93.7366 cv
39.8212 93.9466 39.7113 94.2366 39.7113 94.6166 cv
f
47.4213 93.4166 mo
46.9113 93.4166 46.5313 93.6666 46.2713 94.1666 cv
46.0113 94.6666 45.8913 95.4166 45.8913 96.4166 cv
45.8913 97.4166 46.0113 98.1666 46.2713 98.6666 cv
46.5313 99.1666 46.9113 99.4166 47.4213 99.4166 cv
47.9313 99.4166 48.3113 99.1666 48.5713 98.6666 cv
48.8213 98.1666 48.9513 97.4166 48.9513 96.4166 cv
48.9513 95.4166 48.8213 94.6666 48.5713 94.1666 cv
48.3113 93.6666 47.9313 93.4166 47.4213 93.4166 cv
47.4213 92.6366 mo
48.2313 92.6366 48.8513 92.9666 49.2913 93.6066 cv
49.7213 94.2566 49.9413 95.1966 49.9413 96.4166 cv
49.9413 97.6466 49.7213 98.5866 49.2913 99.2266 cv
48.8513 99.8666 48.2313 100.187 47.4213 100.187 cv
46.6013 100.187 45.9713 99.8666 45.5413 99.2266 cv
45.1113 98.5866 44.9013 97.6466 44.9013 96.4166 cv
44.9013 95.1966 45.1113 94.2566 45.5413 93.6066 cv
45.9713 92.9666 46.6013 92.6366 47.4213 92.6366 cv
f
57.6 60.6833 mo
54.1 60.6833 li
f
57.6 60.6833 mo
54.1 60.6833 li
@
38.9812 64.3302 mo
38.9812 63.4302 li
39.2212 63.5502 39.4712 63.6402 39.7312 63.7002 cv
39.9812 63.7602 40.2312 63.7902 40.4812 63.7902 cv
41.1213 63.7902 41.6213 63.5802 41.9613 63.1402 cv
42.3012 62.7002 42.5012 62.0402 42.5612 61.1402 cv
42.3612 61.4202 42.1213 61.6402 41.8412 61.7902 cv
41.5513 61.9402 41.2312 62.0102 40.8812 62.0102 cv
40.1413 62.0102 39.5612 61.7902 39.1412 61.3502 cv
38.7212 60.9102 38.5112 60.3102 38.5112 59.5402 cv
38.5112 58.8002 38.7312 58.2002 39.1712 57.7402 cv
39.6112 57.2902 40.2012 57.0602 40.9412 57.0602 cv
41.7813 57.0602 42.4312 57.3902 42.8713 58.0302 cv
43.3112 58.6802 43.5412 59.6202 43.5412 60.8402 cv
43.5412 62.0002 43.2612 62.9102 42.7212 63.5902 cv
42.1712 64.2702 41.4412 64.6102 40.5212 64.6102 cv
40.2712 64.6102 40.0212 64.5802 39.7712 64.5402 cv
39.5112 64.5002 39.2512 64.4302 38.9812 64.3302 cv
40.9412 61.2402 mo
41.3812 61.2402 41.7312 61.0902 41.9912 60.7902 cv
42.2512 60.4902 42.3812 60.0702 42.3812 59.5402 cv
42.3812 59.0202 42.2512 58.6002 41.9912 58.3002 cv
41.7312 58.0002 41.3812 57.8402 40.9412 57.8402 cv
40.5012 57.8402 40.1512 58.0002 39.8913 58.3002 cv
39.6312 58.6002 39.5012 59.0202 39.5012 59.5402 cv
39.5012 60.0702 39.6312 60.4902 39.8913 60.7902 cv
40.1512 61.0902 40.5012 61.2402 40.9412 61.2402 cv
f
47.4213 57.8402 mo
46.9113 57.8402 46.5313 58.0902 46.2713 58.5902 cv
46.0113 59.0902 45.8913 59.8402 45.8913 60.8402 cv
45.8913 61.8402 46.0113 62.5902 46.2713 63.0902 cv
46.5313 63.5902 46.9113 63.8402 47.4213 63.8402 cv
47.9313 63.8402 48.3113 63.5902 48.5713 63.0902 cv
48.8213 62.5902 48.9513 61.8402 48.9513 60.8402 cv
48.9513 59.8402 48.8213 59.0902 48.5713 58.5902 cv
48.3113 58.0902 47.9313 57.8402 47.4213 57.8402 cv
47.4213 57.0602 mo
48.2313 57.0602 48.8513 57.3902 49.2913 58.0302 cv
49.7213 58.6802 49.9413 59.6202 49.9413 60.8402 cv
49.9413 62.0702 49.7213 63.0102 49.2913 63.6502 cv
48.8513 64.2902 48.2313 64.6102 47.4213 64.6102 cv
46.6013 64.6102 45.9713 64.2902 45.5413 63.6502 cv
45.1113 63.0102 44.9013 62.0702 44.9013 60.8402 cv
44.9013 59.6202 45.1113 58.6802 45.5413 58.0302 cv
45.9713 57.3902 46.6013 57.0602 47.4213 57.0602 cv
f
25.4831 242.71 mo
29.1131 244.05 li
29.1131 241.37 li
25.4831 242.71 li
24.5131 243.27 mo
24.5131 242.15 li
31.8031 239.37 li
31.8031 240.4 li
29.9331 241.06 li
29.9331 244.35 li
31.8031 245.01 li
31.8031 246.05 li
24.5131 243.27 li
f
26.3331 238.99 mo
26.3331 238.04 li
30.9231 236.33 li
26.3331 234.62 li
26.3331 233.67 li
31.8031 235.72 li
31.8031 236.94 li
26.3331 238.99 li
f
28.8431 227.75 mo
29.2831 227.75 li
29.2831 231.88 li
29.9031 231.84 30.3831 231.66 30.7031 231.32 cv
31.0231 230.99 31.1831 230.53 31.1831 229.93 cv
31.1831 229.59 31.1431 229.25 31.0631 228.93 cv
30.9831 228.61 30.8531 228.28 30.6731 227.96 cv
31.5231 227.96 li
31.6631 228.28 31.7731 228.61 31.8331 228.95 cv
31.8931 229.29 31.9331 229.64 31.9331 229.98 cv
31.9331 230.86 31.6831 231.55 31.1831 232.06 cv
30.6831 232.57 29.9931 232.82 29.1231 232.82 cv
28.2331 232.82 27.5231 232.58 26.9931 232.1 cv
26.4731 231.62 26.2031 230.96 26.2031 230.14 cv
26.2031 229.4 26.4431 228.82 26.9131 228.39 cv
27.3931 227.97 28.0331 227.75 28.8431 227.75 cv
28.5831 228.65 mo
28.0931 228.66 27.7031 228.8 27.4031 229.06 cv
27.1131 229.33 26.9631 229.69 26.9631 230.13 cv
26.9631 230.63 27.1131 231.03 27.3931 231.33 cv
27.6731 231.63 28.0731 231.81 28.5831 231.85 cv
28.5831 228.65 li
f
27.1731 223.11 mo
27.1131 223.21 27.0731 223.32 27.0431 223.44 cv
27.0231 223.56 27.0031 223.69 27.0031 223.83 cv
27.0031 224.34 27.1731 224.73 27.5031 225 cv
27.8331 225.28 28.3031 225.41 28.9231 225.41 cv
31.8031 225.41 li
31.8031 226.31 li
26.3331 226.31 li
26.3331 225.41 li
27.1831 225.41 li
26.8531 225.23 26.6031 224.98 26.4431 224.68 cv
26.2831 224.38 26.2031 224.01 26.2031 223.57 cv
26.2131 223.36 li
26.2231 223.29 26.2331 223.21 26.2531 223.11 cv
27.1731 223.11 li
f
29.0531 219.68 mo
29.0531 220.41 29.1431 220.91 29.3031 221.19 cv
29.4731 221.47 29.7531 221.61 30.1531 221.61 cv
30.4731 221.61 30.7331 221.51 30.9131 221.3 cv
31.1031 221.09 31.1931 220.8 31.1931 220.44 cv
31.1931 219.94 31.0231 219.54 30.6631 219.24 cv
30.3131 218.94 29.8431 218.79 29.2531 218.79 cv
29.0531 218.79 li
29.0531 219.68 li
28.6831 217.89 mo
31.8031 217.89 li
31.8031 218.79 li
30.9731 218.79 li
31.3131 219 31.5531 219.26 31.7031 219.56 cv
31.8531 219.86 31.9331 220.24 31.9331 220.68 cv
31.9331 221.24 31.7831 221.69 31.4731 222.02 cv
31.1631 222.35 30.7431 222.51 30.2131 222.51 cv
29.6031 222.51 29.1431 222.31 28.8231 221.89 cv
28.5131 221.48 28.3531 220.87 28.3531 220.05 cv
28.3531 218.79 li
28.2631 218.79 li
27.8531 218.79 27.5331 218.93 27.3031 219.2 cv
27.0831 219.47 26.9631 219.85 26.9631 220.34 cv
26.9631 220.66 27.0031 220.96 27.0831 221.26 cv
27.1631 221.56 27.2731 221.84 27.4131 222.11 cv
26.5831 222.11 li
26.4631 221.79 26.3631 221.47 26.3031 221.16 cv
26.2431 220.85 26.2031 220.55 26.2031 220.25 cv
26.2031 219.46 26.4131 218.87 26.8231 218.48 cv
27.2331 218.09 27.8531 217.89 28.6831 217.89 cv
f
29.0031 212.439 mo
28.3631 212.439 27.8531 212.579 27.4931 212.839 cv
27.1331 213.109 26.9531 213.489 26.9531 213.969 cv
26.9531 214.449 27.1331 214.829 27.4931 215.099 cv
27.8531 215.369 28.3631 215.499 29.0031 215.499 cv
29.6531 215.499 30.1531 215.369 30.5131 215.099 cv
30.8731 214.829 31.0531 214.449 31.0531 213.969 cv
31.0531 213.489 30.8731 213.109 30.5131 212.839 cv
30.1531 212.579 29.6531 212.439 29.0031 212.439 cv
31.1231 211.539 mo
32.0431 211.539 32.7331 211.749 33.1931 212.159 cv
33.6431 212.579 33.8731 213.209 33.8731 214.059 cv
33.8731 214.379 33.8431 214.669 33.8031 214.949 cv
33.7531 215.229 33.6831 215.509 33.5831 215.769 cv
32.7131 215.769 li
32.8531 215.509 32.9531 215.249 33.0231 214.989 cv
33.0931 214.729 33.1331 214.469 33.1331 214.199 cv
33.1331 213.619 32.9731 213.179 32.6731 212.879 cv
32.3631 212.589 31.9031 212.439 31.2831 212.439 cv
30.8431 212.439 li
31.1631 212.629 31.4031 212.869 31.5631 213.159 cv
31.7231 213.449 31.8031 213.789 31.8031 214.189 cv
31.8031 214.869 31.5531 215.409 31.0431 215.819 cv
30.5331 216.229 29.8531 216.429 29.0031 216.429 cv
28.1631 216.429 27.4831 216.229 26.9731 215.819 cv
26.4631 215.409 26.2031 214.869 26.2031 214.189 cv
26.2031 213.789 26.2831 213.449 26.4431 213.159 cv
26.6031 212.869 26.8431 212.629 27.1631 212.439 cv
26.3331 212.439 li
26.3331 211.539 li
31.1231 211.539 li
f
28.8431 205.01 mo
29.2831 205.01 li
29.2831 209.14 li
29.9031 209.1 30.3831 208.92 30.7031 208.58 cv
31.0231 208.25 31.1831 207.79 31.1831 207.19 cv
31.1831 206.85 31.1431 206.51 31.0631 206.19 cv
30.9831 205.87 30.8531 205.54 30.6731 205.22 cv
31.5231 205.22 li
31.6631 205.54 31.7731 205.87 31.8331 206.21 cv
31.8931 206.55 31.9331 206.9 31.9331 207.24 cv
31.9331 208.12 31.6831 208.81 31.1831 209.32 cv
30.6831 209.83 29.9931 210.08 29.1231 210.08 cv
28.2331 210.08 27.5231 209.84 26.9931 209.36 cv
26.4731 208.88 26.2031 208.22 26.2031 207.4 cv
26.2031 206.66 26.4431 206.08 26.9131 205.65 cv
27.3931 205.23 28.0331 205.01 28.8431 205.01 cv
28.5831 205.91 mo
28.0931 205.92 27.7031 206.06 27.4031 206.32 cv
27.1131 206.59 26.9631 206.95 26.9631 207.39 cv
26.9631 207.89 27.1131 208.29 27.3931 208.59 cv
27.6731 208.89 28.0731 209.07 28.5831 209.11 cv
28.5831 205.91 li
f
25.0731 194.86 mo
26.1131 194.86 li
25.8131 195.2 25.5831 195.55 25.4231 195.93 cv
25.2731 196.31 25.1931 196.7 25.1931 197.12 cv
25.1931 197.96 25.4531 198.6 25.9631 199.04 cv
26.4731 199.48 27.2031 199.7 28.1631 199.7 cv
29.1231 199.7 29.8631 199.48 30.3731 199.04 cv
30.8831 198.6 31.1331 197.96 31.1331 197.12 cv
31.1331 196.7 31.0631 196.31 30.9031 195.93 cv
30.7531 195.55 30.5231 195.2 30.2131 194.86 cv
31.2431 194.86 li
31.4831 195.21 31.6531 195.58 31.7631 195.96 cv
31.8731 196.34 31.9331 196.75 31.9331 197.18 cv
31.9331 198.28 31.6031 199.15 30.9331 199.79 cv
30.2631 200.43 29.3431 200.74 28.1631 200.74 cv
26.9931 200.74 26.0731 200.43 25.3931 199.79 cv
24.7231 199.15 24.3831 198.28 24.3831 197.18 cv
24.3831 196.74 24.4431 196.33 24.5531 195.95 cv
24.6731 195.57 24.8431 195.2 25.0731 194.86 cv
f
25.3231 192.35 mo
28.0631 192.35 li
28.0631 191.11 li
28.0631 190.65 27.9531 190.3 27.7131 190.05 cv
27.4731 189.8 27.1331 189.67 26.6931 189.67 cv
26.2531 189.67 25.9231 189.8 25.6831 190.05 cv
25.4431 190.3 25.3231 190.65 25.3231 191.11 cv
25.3231 192.35 li
24.5131 193.34 mo
24.5131 191.11 li
24.5131 190.3 24.7031 189.68 25.0731 189.26 cv
25.4431 188.84 25.9831 188.63 26.6931 188.63 cv
27.4131 188.63 27.9631 188.84 28.3231 189.26 cv
28.6931 189.68 28.8731 190.3 28.8731 191.11 cv
28.8731 192.35 li
31.8031 192.35 li
31.8031 193.34 li
24.5131 193.34 li
f
24.5131 187.42 mo
24.5131 186.43 li
28.9431 186.43 li
29.7231 186.43 30.2931 186.29 30.6331 186.01 cv
30.9731 185.73 31.1431 185.27 31.1431 184.63 cv
31.1431 184 30.9731 183.54 30.6331 183.26 cv
30.2931 182.98 29.7231 182.83 28.9431 182.83 cv
24.5131 182.83 li
24.5131 181.84 li
29.0631 181.84 li
30.0231 181.84 30.7331 182.08 31.2131 182.55 cv
31.6931 183.02 31.9331 183.71 31.9331 184.63 cv
31.9331 185.55 31.6931 186.25 31.2131 186.72 cv
30.7331 187.19 30.0231 187.42 29.0631 187.42 cv
24.5131 187.42 li
f
24.5131 176.92 mo
24.5131 175.93 li
28.9431 175.93 li
29.7231 175.93 30.2931 175.79 30.6331 175.51 cv
30.9731 175.23 31.1431 174.77 31.1431 174.13 cv
31.1431 173.5 30.9731 173.04 30.6331 172.76 cv
30.2931 172.48 29.7231 172.33 28.9431 172.33 cv
24.5131 172.33 li
24.5131 171.34 li
29.0631 171.34 li
30.0231 171.34 30.7331 171.58 31.2131 172.05 cv
31.6931 172.52 31.9331 173.21 31.9331 174.13 cv
31.9331 175.05 31.6931 175.75 31.2131 176.22 cv
30.7331 176.69 30.0231 176.92 29.0631 176.92 cv
24.5131 176.92 li
f
26.4931 166.04 mo
27.3431 166.04 li
27.2231 166.3 27.1231 166.56 27.0531 166.83 cv
26.9931 167.11 26.9531 167.39 26.9531 167.68 cv
26.9531 168.13 27.0231 168.47 27.1631 168.69 cv
27.3031 168.91 27.5031 169.02 27.7731 169.02 cv
27.9831 169.02 28.1431 168.94 28.2631 168.78 cv
28.3831 168.62 28.5031 168.3 28.6031 167.82 cv
28.6731 167.51 li
28.8131 166.87 29.0131 166.42 29.2531 166.15 cv
29.5031 165.89 29.8531 165.75 30.2931 165.75 cv
30.8031 165.75 31.2031 165.95 31.4931 166.35 cv
31.7931 166.75 31.9331 167.31 31.9331 168.01 cv
31.9331 168.31 31.9031 168.61 31.8531 168.93 cv
31.8031 169.25 31.7231 169.58 31.6031 169.93 cv
30.6731 169.93 li
30.8531 169.6 30.9831 169.27 31.0631 168.95 cv
31.1531 168.63 31.1931 168.31 31.1931 167.99 cv
31.1931 167.57 31.1231 167.24 30.9831 167.01 cv
30.8431 166.79 30.6331 166.67 30.3631 166.67 cv
30.1231 166.67 29.9331 166.76 29.8031 166.92 cv
29.6731 167.08 29.5431 167.44 29.4231 168 cv
29.3531 168.31 li
29.2331 168.87 29.0531 169.28 28.8131 169.52 cv
28.5731 169.77 28.2431 169.89 27.8131 169.89 cv
27.3031 169.89 26.9031 169.71 26.6231 169.35 cv
26.3431 168.99 26.2031 168.47 26.2031 167.79 cv
26.2031 167.46 26.2331 167.15 26.2831 166.85 cv
26.3331 166.56 26.4031 166.29 26.4931 166.04 cv
f
29.0531 161.83 mo
29.0531 162.56 29.1431 163.06 29.3031 163.34 cv
29.4731 163.62 29.7531 163.76 30.1531 163.76 cv
30.4731 163.76 30.7331 163.66 30.9131 163.45 cv
31.1031 163.24 31.1931 162.95 31.1931 162.59 cv
31.1931 162.09 31.0231 161.69 30.6631 161.39 cv
30.3131 161.09 29.8431 160.94 29.2531 160.94 cv
29.0531 160.94 li
29.0531 161.83 li
28.6831 160.04 mo
31.8031 160.04 li
31.8031 160.94 li
30.9731 160.94 li
31.3131 161.15 31.5531 161.41 31.7031 161.71 cv
31.8531 162.01 31.9331 162.39 31.9331 162.83 cv
31.9331 163.39 31.7831 163.84 31.4731 164.17 cv
31.1631 164.5 30.7431 164.66 30.2131 164.66 cv
29.6031 164.66 29.1431 164.46 28.8231 164.04 cv
28.5131 163.63 28.3531 163.02 28.3531 162.2 cv
28.3531 160.94 li
28.2631 160.94 li
27.8531 160.94 27.5331 161.08 27.3031 161.35 cv
27.0831 161.62 26.9631 162 26.9631 162.49 cv
26.9631 162.81 27.0031 163.11 27.0831 163.41 cv
27.1631 163.71 27.2731 163.99 27.4131 164.26 cv
26.5831 164.26 li
26.4631 163.94 26.3631 163.62 26.3031 163.31 cv
26.2431 163 26.2031 162.7 26.2031 162.4 cv
26.2031 161.61 26.4131 161.02 26.8231 160.63 cv
27.2331 160.24 27.8531 160.04 28.6831 160.04 cv
f
29.0031 154.59 mo
28.3631 154.59 27.8531 154.73 27.4931 154.99 cv
27.1331 155.26 26.9531 155.64 26.9531 156.12 cv
26.9531 156.6 27.1331 156.98 27.4931 157.25 cv
27.8531 157.52 28.3631 157.65 29.0031 157.65 cv
29.6531 157.65 30.1531 157.52 30.5131 157.25 cv
30.8731 156.98 31.0531 156.6 31.0531 156.12 cv
31.0531 155.64 30.8731 155.26 30.5131 154.99 cv
30.1531 154.73 29.6531 154.59 29.0031 154.59 cv
31.1231 153.69 mo
32.0431 153.69 32.7331 153.9 33.1931 154.31 cv
33.6431 154.73 33.8731 155.36 33.8731 156.21 cv
33.8731 156.53 33.8431 156.82 33.8031 157.1 cv
33.7531 157.38 33.6831 157.66 33.5831 157.92 cv
32.7131 157.92 li
32.8531 157.66 32.9531 157.4 33.0231 157.14 cv
33.0931 156.88 33.1331 156.62 33.1331 156.35 cv
33.1331 155.77 32.9731 155.33 32.6731 155.03 cv
32.3631 154.74 31.9031 154.59 31.2831 154.59 cv
30.8431 154.59 li
31.1631 154.78 31.4031 155.02 31.5631 155.31 cv
31.7231 155.6 31.8031 155.94 31.8031 156.34 cv
31.8031 157.02 31.5531 157.56 31.0431 157.97 cv
30.5331 158.38 29.8531 158.58 29.0031 158.58 cv
28.1631 158.58 27.4831 158.38 26.9731 157.97 cv
26.4631 157.56 26.2031 157.02 26.2031 156.34 cv
26.2031 155.94 26.2831 155.6 26.4431 155.31 cv
26.6031 155.02 26.8431 154.78 27.1631 154.59 cv
26.3331 154.59 li
26.3331 153.69 li
31.1231 153.69 li
f
28.8431 147.16 mo
29.2831 147.16 li
29.2831 151.29 li
29.9031 151.25 30.3831 151.07 30.7031 150.73 cv
31.0231 150.4 31.1831 149.94 31.1831 149.34 cv
31.1831 149 31.1431 148.66 31.0631 148.34 cv
30.9831 148.02 30.8531 147.69 30.6731 147.37 cv
31.5231 147.37 li
31.6631 147.69 31.7731 148.02 31.8331 148.36 cv
31.8931 148.7 31.9331 149.05 31.9331 149.39 cv
31.9331 150.27 31.6831 150.96 31.1831 151.47 cv
30.6831 151.98 29.9931 152.23 29.1231 152.23 cv
28.2331 152.23 27.5231 151.99 26.9931 151.51 cv
26.4731 151.03 26.2031 150.37 26.2031 149.55 cv
26.2031 148.81 26.4431 148.23 26.9131 147.8 cv
27.3931 147.38 28.0331 147.16 28.8431 147.16 cv
28.5831 148.06 mo
28.0931 148.07 27.7031 148.21 27.4031 148.47 cv
27.1131 148.74 26.9631 149.1 26.9631 149.54 cv
26.9631 150.04 27.1131 150.44 27.3931 150.74 cv
27.6731 151.04 28.0731 151.22 28.5831 151.26 cv
28.5831 148.06 li
f
28.3831 139.01 mo
28.4631 138.8 28.6131 138.59 28.8431 138.39 cv
29.0831 138.19 29.4031 137.99 29.8131 137.79 cv
31.8031 136.79 li
31.8031 137.85 li
29.9331 138.78 li
29.4531 139.02 29.1231 139.26 28.9631 139.48 cv
28.8031 139.71 28.7231 140.02 28.7231 140.41 cv
28.7231 141.48 li
31.8031 141.48 li
31.8031 142.47 li
24.5131 142.47 li
24.5131 140.24 li
24.5131 139.41 24.6931 138.79 25.0331 138.38 cv
25.3831 137.97 25.9131 137.76 26.6131 137.76 cv
27.0731 137.76 27.4631 137.87 27.7631 138.08 cv
28.0631 138.3 28.2731 138.61 28.3831 139.01 cv
25.3231 141.48 mo
27.9131 141.48 li
27.9131 140.24 li
27.9131 139.77 27.8031 139.41 27.5831 139.17 cv
27.3631 138.93 27.0431 138.8 26.6131 138.8 cv
26.1931 138.8 25.8731 138.93 25.6531 139.17 cv
25.4331 139.41 25.3231 139.77 25.3231 140.24 cv
25.3231 141.48 li
f
29.0531 133.07 mo
29.0531 133.8 29.1431 134.3 29.3031 134.58 cv
29.4731 134.86 29.7531 135 30.1531 135 cv
30.4731 135 30.7331 134.9 30.9131 134.69 cv
31.1031 134.48 31.1931 134.19 31.1931 133.83 cv
31.1931 133.33 31.0231 132.93 30.6631 132.63 cv
30.3131 132.33 29.8431 132.18 29.2531 132.18 cv
29.0531 132.18 li
29.0531 133.07 li
28.6831 131.28 mo
31.8031 131.28 li
31.8031 132.18 li
30.9731 132.18 li
31.3131 132.39 31.5531 132.65 31.7031 132.95 cv
31.8531 133.25 31.9331 133.63 31.9331 134.07 cv
31.9331 134.63 31.7831 135.08 31.4731 135.41 cv
31.1631 135.74 30.7431 135.9 30.2131 135.9 cv
29.6031 135.9 29.1431 135.7 28.8231 135.28 cv
28.5131 134.87 28.3531 134.26 28.3531 133.44 cv
28.3531 132.18 li
28.2631 132.18 li
27.8531 132.18 27.5331 132.32 27.3031 132.59 cv
27.0831 132.86 26.9631 133.24 26.9631 133.73 cv
26.9631 134.05 27.0031 134.35 27.0831 134.65 cv
27.1631 134.95 27.2731 135.23 27.4131 135.5 cv
26.5831 135.5 li
26.4631 135.18 26.3631 134.86 26.3031 134.55 cv
26.2431 134.24 26.2031 133.94 26.2031 133.64 cv
26.2031 132.85 26.4131 132.26 26.8231 131.87 cv
27.2331 131.48 27.8531 131.28 28.6831 131.28 cv
f
24.7831 128.54 mo
26.3331 128.54 li
26.3331 126.69 li
27.0331 126.69 li
27.0331 128.54 li
30.0031 128.54 li
30.4531 128.54 30.7431 128.48 30.8631 128.36 cv
30.9931 128.24 31.0531 127.99 31.0531 127.61 cv
31.0531 126.69 li
31.8031 126.69 li
31.8031 127.61 li
31.8031 128.31 31.6731 128.79 31.4131 129.05 cv
31.1531 129.31 30.6831 129.44 30.0031 129.44 cv
27.0331 129.44 li
27.0331 130.1 li
26.3331 130.1 li
26.3331 129.44 li
24.7831 129.44 li
24.7831 128.54 li
f
28.8431 120.83 mo
29.2831 120.83 li
29.2831 124.96 li
29.9031 124.92 30.3831 124.74 30.7031 124.4 cv
31.0231 124.07 31.1831 123.61 31.1831 123.01 cv
31.1831 122.67 31.1431 122.33 31.0631 122.01 cv
30.9831 121.69 30.8531 121.36 30.6731 121.04 cv
31.5231 121.04 li
31.6631 121.36 31.7731 121.69 31.8331 122.03 cv
31.8931 122.37 31.9331 122.72 31.9331 123.06 cv
31.9331 123.94 31.6831 124.63 31.1831 125.14 cv
30.6831 125.65 29.9931 125.9 29.1231 125.9 cv
28.2331 125.9 27.5231 125.66 26.9931 125.18 cv
26.4731 124.7 26.2031 124.04 26.2031 123.22 cv
26.2031 122.48 26.4431 121.9 26.9131 121.47 cv
27.3931 121.05 28.0331 120.83 28.8431 120.83 cv
28.5831 121.73 mo
28.0931 121.74 27.7031 121.88 27.4031 122.14 cv
27.1131 122.41 26.9631 122.77 26.9631 123.21 cv
26.9631 123.71 27.1131 124.11 27.3931 124.41 cv
27.6731 124.71 28.0731 124.89 28.5831 124.93 cv
28.5831 121.73 li
f
24.2131 117.2 mo
24.9731 117.64 25.7131 117.96 26.4431 118.17 cv
27.1731 118.39 27.9131 118.49 28.6631 118.49 cv
29.4231 118.49 30.1631 118.39 30.8931 118.17 cv
31.6331 117.96 32.3631 117.64 33.1131 117.2 cv
33.1131 117.98 li
32.3431 118.47 31.6031 118.84 30.8631 119.08 cv
30.1231 119.32 29.3931 119.44 28.6631 119.44 cv
27.9431 119.44 27.2131 119.32 26.4731 119.08 cv
25.7331 118.84 24.9831 118.48 24.2131 117.98 cv
24.2131 117.2 li
f
28.5931 109.13 mo
28.5931 109.41 28.7131 109.64 28.9531 109.8 cv
29.1931 109.96 29.5331 110.04 29.9631 110.04 cv
30.3831 110.04 30.7231 109.96 30.9631 109.8 cv
31.2031 109.64 31.3231 109.41 31.3231 109.13 cv
31.3231 108.85 31.2031 108.63 30.9631 108.47 cv
30.7231 108.31 30.3831 108.23 29.9631 108.23 cv
29.5431 108.23 29.2031 108.31 28.9631 108.47 cv
28.7231 108.63 28.5931 108.85 28.5931 109.13 cv
27.9731 109.13 mo
27.9731 108.62 28.1531 108.21 28.5131 107.91 cv
28.8731 107.61 29.3631 107.45 29.9631 107.45 cv
30.5731 107.45 31.0531 107.61 31.4031 107.91 cv
31.7631 108.21 31.9331 108.62 31.9331 109.13 cv
31.9331 109.65 31.7631 110.07 31.4031 110.37 cv
31.0531 110.67 30.5731 110.82 29.9631 110.82 cv
29.3531 110.82 28.8731 110.67 28.5131 110.37 cv
28.1531 110.07 27.9731 109.65 27.9731 109.13 cv
25.0031 114.17 mo
25.0031 114.45 25.1331 114.67 25.3731 114.83 cv
25.6131 114.99 25.9431 115.07 26.3631 115.07 cv
26.8031 115.07 27.1331 114.99 27.3731 114.83 cv
27.6131 114.67 27.7331 114.45 27.7331 114.17 cv
27.7331 113.89 27.6131 113.66 27.3731 113.5 cv
27.1331 113.34 26.8031 113.26 26.3631 113.26 cv
25.9431 113.26 25.6131 113.35 25.3731 113.51 cv
25.1331 113.67 25.0031 113.89 25.0031 114.17 cv
24.3831 109.76 mo
24.3831 108.98 li
31.9331 113.54 li
31.9331 114.32 li
24.3831 109.76 li
24.3831 114.17 mo
24.3831 113.66 24.5631 113.25 24.9231 112.94 cv
25.2831 112.64 25.7631 112.48 26.3631 112.48 cv
26.9831 112.48 27.4631 112.64 27.8231 112.94 cv
28.1831 113.24 28.3531 113.65 28.3531 114.17 cv
28.3531 114.69 28.1831 115.1 27.8231 115.4 cv
27.4631 115.7 26.9831 115.85 26.3631 115.85 cv
25.7631 115.85 25.2831 115.7 24.9231 115.4 cv
24.5631 115.1 24.3831 114.69 24.3831 114.17 cv
f
24.2131 106.1 mo
24.2131 105.32 li
24.9831 104.84 25.7331 104.47 26.4731 104.23 cv
27.2131 103.99 27.9431 103.86 28.6631 103.86 cv
29.3931 103.86 30.1231 103.99 30.8631 104.23 cv
31.6031 104.47 32.3431 104.84 33.1131 105.32 cv
33.1131 106.1 li
32.3631 105.67 31.6331 105.35 30.8931 105.13 cv
30.1631 104.92 29.4231 104.81 28.6631 104.81 cv
27.9131 104.81 27.1731 104.92 26.4431 105.13 cv
25.7131 105.35 24.9731 105.67 24.2131 106.1 cv
f
2 lw
[2 3.3 ] 0 dsh
73.8327 291.93 mo
138.764 242.123 li
203.695 224.335 li
268.625 170.97 li
333.556 142.509 li
398.487 64.2409 li
/1 
[/DeviceCMYK] /CSA add_res
0 .993988 1 0 cmyk
@
gsave
70.3328 295.43 mo
77.3328 295.43 li
77.3328 288.43 li
70.3328 288.43 li
70.3328 295.43 li
clp
70.8327 294.93 mo
76.8327 294.93 li
76.8327 288.93 li
70.8327 288.93 li
cp
f
1 lw
0 lj
[] 0 dsh
70.8327 294.93 mo
76.8327 294.93 li
76.8327 288.93 li
70.8327 288.93 li
cp
@
grestore
gsave
135.264 245.623 mo
142.264 245.623 li
142.264 238.623 li
135.264 238.623 li
135.264 245.623 li
clp
135.764 245.123 mo
141.764 245.123 li
141.764 239.123 li
135.764 239.123 li
cp
f
1 lw
0 lj
[] 0 dsh
135.764 245.123 mo
141.764 245.123 li
141.764 239.123 li
135.764 239.123 li
cp
@
grestore
gsave
200.195 227.835 mo
207.195 227.835 li
207.195 220.835 li
200.195 220.835 li
200.195 227.835 li
clp
200.695 227.335 mo
206.695 227.335 li
206.695 221.335 li
200.695 221.335 li
cp
f
1 lw
0 lj
[] 0 dsh
200.695 227.335 mo
206.695 227.335 li
206.695 221.335 li
200.695 221.335 li
cp
@
grestore
gsave
265.126 174.47 mo
272.125 174.47 li
272.125 167.47 li
265.126 167.47 li
265.126 174.47 li
clp
265.625 173.97 mo
271.625 173.97 li
271.625 167.97 li
265.625 167.97 li
cp
f
1 lw
0 lj
[] 0 dsh
265.625 173.97 mo
271.625 173.97 li
271.625 167.97 li
265.625 167.97 li
cp
@
grestore
gsave
330.056 146.009 mo
337.056 146.009 li
337.056 139.009 li
330.056 139.009 li
330.056 146.009 li
clp
330.556 145.509 mo
336.556 145.509 li
336.556 139.509 li
330.556 139.509 li
cp
f
1 lw
0 lj
[] 0 dsh
330.556 145.509 mo
336.556 145.509 li
336.556 139.509 li
330.556 139.509 li
cp
@
grestore
gsave
394.987 67.741 mo
401.987 67.741 li
401.987 60.7409 li
394.987 60.7409 li
394.987 67.741 li
clp
395.487 67.2409 mo
401.487 67.2409 li
401.487 61.2409 li
395.487 61.2409 li
cp
f
1 lw
0 lj
[] 0 dsh
395.487 67.2409 mo
401.487 67.2409 li
401.487 61.2409 li
395.487 61.2409 li
cp
@
grestore
[7.4 3.2 ] 0 dsh
73.8327 295.488 mo
138.764 231.45 li
203.695 217.22 li
268.625 156.74 li
333.556 121.163 li
398.487 74.9139 li
.873533 .244297 1 .131685 cmyk
@
gsave
70.3328 298.988 mo
77.3328 298.988 li
77.3328 291.988 li
70.3328 291.988 li
70.3328 298.988 li
clp
73.8327 298.488 mo
74.6283 298.488 75.3915 298.172 75.954 297.609 cv
76.5166 297.047 76.8327 296.284 76.8327 295.488 cv
76.8327 294.692 76.5166 293.929 75.954 293.367 cv
75.3915 292.804 74.6283 292.488 73.8327 292.488 cv
73.0371 292.488 72.274 292.804 71.7114 293.367 cv
71.1488 293.929 70.8327 294.692 70.8327 295.488 cv
70.8327 296.284 71.1488 297.047 71.7114 297.609 cv
72.274 298.172 73.0371 298.488 73.8327 298.488 cv
cp
f
1 lw
[] 0 dsh
73.8327 298.488 mo
74.6283 298.488 75.3915 298.172 75.954 297.609 cv
76.5166 297.047 76.8327 296.284 76.8327 295.488 cv
76.8327 294.692 76.5166 293.929 75.954 293.367 cv
75.3915 292.804 74.6283 292.488 73.8327 292.488 cv
73.0371 292.488 72.274 292.804 71.7114 293.367 cv
71.1488 293.929 70.8327 294.692 70.8327 295.488 cv
70.8327 296.284 71.1488 297.047 71.7114 297.609 cv
72.274 298.172 73.0371 298.488 73.8327 298.488 cv
cp
@
grestore
gsave
135.264 234.95 mo
142.264 234.95 li
142.264 227.95 li
135.264 227.95 li
135.264 234.95 li
clp
138.764 234.45 mo
139.559 234.45 140.322 234.134 140.885 233.572 cv
141.448 233.009 141.764 232.246 141.764 231.45 cv
141.764 230.655 141.448 229.892 140.885 229.329 cv
140.322 228.766 139.559 228.45 138.764 228.45 cv
137.968 228.45 137.205 228.766 136.642 229.329 cv
136.08 229.892 135.764 230.655 135.764 231.45 cv
135.764 232.246 136.08 233.009 136.642 233.572 cv
137.205 234.134 137.968 234.45 138.764 234.45 cv
cp
f
1 lw
[] 0 dsh
138.764 234.45 mo
139.559 234.45 140.322 234.134 140.885 233.572 cv
141.448 233.009 141.764 232.246 141.764 231.45 cv
141.764 230.655 141.448 229.892 140.885 229.329 cv
140.322 228.766 139.559 228.45 138.764 228.45 cv
137.968 228.45 137.205 228.766 136.642 229.329 cv
136.08 229.892 135.764 230.655 135.764 231.45 cv
135.764 232.246 136.08 233.009 136.642 233.572 cv
137.205 234.134 137.968 234.45 138.764 234.45 cv
cp
@
grestore
gsave
200.195 220.72 mo
207.195 220.72 li
207.195 213.72 li
200.195 213.72 li
200.195 220.72 li
clp
203.695 220.22 mo
204.49 220.22 205.253 219.904 205.816 219.341 cv
206.378 218.779 206.695 218.015 206.695 217.22 cv
206.695 216.424 206.378 215.661 205.816 215.098 cv
205.253 214.536 204.49 214.22 203.695 214.22 cv
202.899 214.22 202.136 214.536 201.573 215.098 cv
201.011 215.661 200.695 216.424 200.695 217.22 cv
200.695 218.015 201.011 218.779 201.573 219.341 cv
202.136 219.904 202.899 220.22 203.695 220.22 cv
cp
f
1 lw
[] 0 dsh
203.695 220.22 mo
204.49 220.22 205.253 219.904 205.816 219.341 cv
206.378 218.779 206.695 218.015 206.695 217.22 cv
206.695 216.424 206.378 215.661 205.816 215.098 cv
205.253 214.536 204.49 214.22 203.695 214.22 cv
202.899 214.22 202.136 214.536 201.573 215.098 cv
201.011 215.661 200.695 216.424 200.695 217.22 cv
200.695 218.015 201.011 218.779 201.573 219.341 cv
202.136 219.904 202.899 220.22 203.695 220.22 cv
cp
@
grestore
gsave
265.126 160.24 mo
272.125 160.24 li
272.125 153.24 li
265.126 153.24 li
265.126 160.24 li
clp
268.625 159.74 mo
269.421 159.74 270.184 159.424 270.747 158.861 cv
271.309 158.299 271.625 157.535 271.625 156.74 cv
271.625 155.944 271.309 155.181 270.747 154.618 cv
270.184 154.056 269.421 153.74 268.625 153.74 cv
267.83 153.74 267.067 154.056 266.504 154.618 cv
265.942 155.181 265.625 155.944 265.625 156.74 cv
265.625 157.535 265.942 158.299 266.504 158.861 cv
267.067 159.424 267.83 159.74 268.625 159.74 cv
cp
f
1 lw
[] 0 dsh
268.625 159.74 mo
269.421 159.74 270.184 159.424 270.747 158.861 cv
271.309 158.299 271.625 157.535 271.625 156.74 cv
271.625 155.944 271.309 155.181 270.747 154.618 cv
270.184 154.056 269.421 153.74 268.625 153.74 cv
267.83 153.74 267.067 154.056 266.504 154.618 cv
265.942 155.181 265.625 155.944 265.625 156.74 cv
265.625 157.535 265.942 158.299 266.504 158.861 cv
267.067 159.424 267.83 159.74 268.625 159.74 cv
cp
@
grestore
gsave
330.056 124.663 mo
337.056 124.663 li
337.056 117.663 li
330.056 117.663 li
330.056 124.663 li
clp
333.556 124.163 mo
334.352 124.163 335.115 123.847 335.678 123.285 cv
336.24 122.722 336.556 121.959 336.556 121.163 cv
336.556 120.368 336.24 119.605 335.678 119.042 cv
335.115 118.479 334.352 118.163 333.556 118.163 cv
332.761 118.163 331.998 118.479 331.435 119.042 cv
330.872 119.605 330.556 120.368 330.556 121.163 cv
330.556 121.959 330.872 122.722 331.435 123.285 cv
331.998 123.847 332.761 124.163 333.556 124.163 cv
cp
f
1 lw
[] 0 dsh
333.556 124.163 mo
334.352 124.163 335.115 123.847 335.678 123.285 cv
336.24 122.722 336.556 121.959 336.556 121.163 cv
336.556 120.368 336.24 119.605 335.678 119.042 cv
335.115 118.479 334.352 118.163 333.556 118.163 cv
332.761 118.163 331.998 118.479 331.435 119.042 cv
330.872 119.605 330.556 120.368 330.556 121.163 cv
330.556 121.959 330.872 122.722 331.435 123.285 cv
331.998 123.847 332.761 124.163 333.556 124.163 cv
cp
@
grestore
gsave
394.987 78.4139 mo
401.987 78.4139 li
401.987 71.4139 li
394.987 71.4139 li
394.987 78.4139 li
clp
398.487 77.9139 mo
399.283 77.9139 400.046 77.5978 400.609 77.0352 cv
401.171 76.4726 401.487 75.7095 401.487 74.9139 cv
401.487 74.1183 401.171 73.3551 400.609 72.7926 cv
400.046 72.23 399.283 71.9139 398.487 71.9139 cv
397.692 71.9139 396.929 72.23 396.366 72.7926 cv
395.803 73.3551 395.487 74.1183 395.487 74.9139 cv
395.487 75.7095 395.803 76.4726 396.366 77.0352 cv
396.929 77.5978 397.692 77.9139 398.487 77.9139 cv
cp
f
1 lw
[] 0 dsh
398.487 77.9139 mo
399.283 77.9139 400.046 77.5978 400.609 77.0352 cv
401.171 76.4726 401.487 75.7095 401.487 74.9139 cv
401.487 74.1183 401.171 73.3551 400.609 72.7926 cv
400.046 72.23 399.283 71.9139 398.487 71.9139 cv
397.692 71.9139 396.929 72.23 396.366 72.7926 cv
395.803 73.3551 395.487 74.1183 395.487 74.9139 cv
395.487 75.7095 395.803 76.4726 396.366 77.0352 cv
396.929 77.5978 397.692 77.9139 398.487 77.9139 cv
cp
@
grestore
2 lc
[] 0 dsh
73.8327 284.815 mo
138.764 210.104 li
203.695 206.547 li
268.625 149.624 li
333.556 114.048 li
398.487 53.568 li
.883665 .769162 0 0 cmyk
@
gsave
70.3328 288.315 mo
77.3328 288.315 li
77.3328 281.315 li
70.3328 281.315 li
70.3328 288.315 li
clp
73.8327 287.815 mo
76.8327 281.815 li
70.8327 281.815 li
cp
f
1 lw
0 lc
0 lj
73.8327 287.815 mo
76.8327 281.815 li
70.8327 281.815 li
cp
@
grestore
gsave
135.264 213.604 mo
142.264 213.604 li
142.264 206.604 li
135.264 206.604 li
135.264 213.604 li
clp
138.764 213.104 mo
141.764 207.104 li
135.764 207.104 li
cp
f
1 lw
0 lc
0 lj
138.764 213.104 mo
141.764 207.104 li
135.764 207.104 li
cp
@
grestore
gsave
200.195 210.047 mo
207.195 210.047 li
207.195 203.047 li
200.195 203.047 li
200.195 210.047 li
clp
203.695 209.547 mo
206.695 203.547 li
200.695 203.547 li
cp
f
1 lw
0 lc
0 lj
203.695 209.547 mo
206.695 203.547 li
200.695 203.547 li
cp
@
grestore
gsave
265.126 153.125 mo
272.125 153.125 li
272.125 146.125 li
265.126 146.125 li
265.126 153.125 li
clp
268.625 152.624 mo
271.625 146.624 li
265.625 146.624 li
cp
f
1 lw
0 lc
0 lj
268.625 152.624 mo
271.625 146.624 li
265.625 146.624 li
cp
@
grestore
gsave
330.056 117.548 mo
337.056 117.548 li
337.056 110.548 li
330.056 110.548 li
330.056 117.548 li
clp
333.556 117.048 mo
336.556 111.048 li
330.556 111.048 li
cp
f
1 lw
0 lc
0 lj
333.556 117.048 mo
336.556 111.048 li
330.556 111.048 li
cp
@
grestore
gsave
394.987 57.068 mo
401.987 57.068 li
401.987 50.068 li
394.987 50.068 li
394.987 57.068 li
clp
398.487 56.568 mo
401.487 50.568 li
395.487 50.568 li
cp
f
1 lw
0 lc
0 lj
398.487 56.568 mo
401.487 50.568 li
395.487 50.568 li
cp
@
grestore
.8 lw
0 lj
57.6 307.584 mo
57.6 41.472 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 307.584 mo
414.72 41.472 li
@
57.6 307.584 mo
414.72 307.584 li
@
57.6 41.472 mo
414.72 41.472 li
@
138.522 94.6439 mo
64.6 94.6439 li
64.0101 94.6421 63.6627 94.4998 63.4535 94.2904 cv
63.2441 94.0811 63.1018 93.7338 63.1 93.1439 cv
63.1 48.472 li
63.1018 47.8822 63.2441 47.5347 63.4535 47.3256 cv
63.6627 47.1161 64.0101 46.9738 64.6 46.972 cv
138.522 46.972 li
139.112 46.9738 139.459 47.1161 139.668 47.3256 cv
139.878 47.5347 140.02 47.8822 140.022 48.472 cv
140.022 93.1439 li
140.02 93.7338 139.878 94.0811 139.668 94.2904 cv
139.459 94.4998 139.112 94.6421 138.522 94.6439 cv
0 0 0 0 cmyk
f
138.533 95.6439 mo
138.529 95.6439 138.525 95.6439 138.522 95.6439 cv
64.6 95.6439 li
64.5964 95.6439 64.5928 95.6439 64.5893 95.6439 cv
63.8503 95.6439 63.2018 95.4524 62.7464 94.9975 cv
62.2893 94.5399 62.0982 93.8874 62.1 93.1439 cv
62.1 48.472 li
62.0982 47.7286 62.2893 47.0759 62.7464 46.6185 cv
63.2019 46.1633 63.8507 45.972 64.59 45.972 cv
64.5933 45.972 64.5966 45.972 64.6 45.972 cv
138.522 45.972 li
138.525 45.972 138.529 45.972 138.532 45.972 cv
139.271 45.972 139.92 46.1633 140.375 46.6185 cv
140.833 47.0759 141.024 47.7286 141.022 48.472 cv
141.022 93.1439 li
141.024 93.8874 140.833 94.5399 140.375 94.9975 cv
139.92 95.4524 139.272 95.6439 138.533 95.6439 cv
64.6 94.6439 mo
138.522 94.6439 li
139.112 94.6421 139.459 94.4998 139.668 94.2904 cv
139.878 94.0811 140.02 93.7338 140.022 93.1439 cv
140.022 48.472 li
140.02 47.8822 139.878 47.5347 139.668 47.3256 cv
139.459 47.1161 139.112 46.9738 138.522 46.972 cv
64.6 46.972 li
64.0101 46.9738 63.6627 47.1161 63.4535 47.3256 cv
63.2441 47.5347 63.1018 47.8822 63.1 48.472 cv
63.1 93.1439 li
63.1018 93.7338 63.2441 94.0811 63.4535 94.2904 cv
63.6627 94.4998 64.0101 94.6421 64.6 94.6439 cv
64.6 94.6439 li
.15433 .116732 .12192 0 cmyk
f
2 lw
0 lc
1 lj
[2 3.3 ] 0 dsh
66.6 54.8939 mo
86.6 54.8939 li
0 .993988 1 0 cmyk
@
73.6 57.8939 mo
79.6 57.8939 li
79.6 51.8939 li
73.6 51.8939 li
cp
f
1 lw
0 lj
[] 0 dsh
73.6 57.8939 mo
79.6 57.8939 li
79.6 51.8939 li
73.6 51.8939 li
cp
@
98.28 50.4008 mo
99.4 50.4008 li
100.75 57.6908 li
99.72 57.6908 li
99.42 55.8208 li
96.14 55.8208 li
95.11 57.6908 li
94.08 57.6908 li
98.28 50.4008 li
98.64 51.3708 mo
96.59 55.0008 li
99.27 55.0008 li
98.64 51.3708 li
1 /0 /CSD get_res sepcs
1 sep
f
104.283 56.5804 mo
104.612 56.6504 104.871 56.7974 105.053 57.0214 cv
105.235 57.2454 105.333 57.5254 105.333 57.8474 cv
105.333 58.3514 105.158 58.7434 104.815 59.0164 cv
104.465 59.2894 103.975 59.4224 103.338 59.4224 cv
103.121 59.4224 102.897 59.4014 102.673 59.3594 cv
102.449 59.3244 102.211 59.2614 101.973 59.1774 cv
101.973 58.5124 li
102.162 58.6244 102.372 58.7084 102.603 58.7644 cv
102.827 58.8204 103.065 58.8484 103.317 58.8484 cv
103.751 58.8484 104.08 58.7644 104.304 58.5964 cv
104.528 58.4284 104.647 58.1764 104.647 57.8474 cv
104.647 57.5534 104.542 57.3154 104.332 57.1474 cv
104.122 56.9794 103.828 56.8884 103.45 56.8884 cv
102.855 56.8884 li
102.855 56.3214 li
103.478 56.3214 li
103.814 56.3214 104.073 56.2584 104.255 56.1184 cv
104.437 55.9854 104.528 55.7894 104.528 55.5304 cv
104.528 55.2714 104.43 55.0684 104.248 54.9284 cv
104.059 54.7884 103.793 54.7184 103.45 54.7184 cv
103.261 54.7184 103.058 54.7394 102.841 54.7814 cv
102.624 54.8234 102.386 54.8864 102.127 54.9704 cv
102.127 54.3544 li
102.386 54.2844 102.631 54.2284 102.862 54.1934 cv
103.086 54.1584 103.303 54.1374 103.513 54.1374 cv
104.031 54.1374 104.444 54.2564 104.752 54.4944 cv
105.06 54.7324 105.214 55.0544 105.214 55.4604 cv
105.214 55.7404 105.13 55.9784 104.969 56.1744 cv
104.808 56.3704 104.577 56.5104 104.283 56.5804 cv
f
2 lw
1 lj
[7.4 3.2 ] 0 dsh
66.6 69.972 mo
86.6 69.972 li
.873533 .244297 1 .131685 cmyk
@
76.6 72.972 mo
77.3956 72.972 78.1587 72.6559 78.7213 72.0933 cv
79.2839 71.5307 79.6 70.7676 79.6 69.972 cv
79.6 69.1764 79.2839 68.4133 78.7213 67.8507 cv
78.1587 67.2881 77.3956 66.972 76.6 66.972 cv
75.8044 66.972 75.0413 67.2881 74.4787 67.8507 cv
73.9161 68.4133 73.6 69.1764 73.6 69.972 cv
73.6 70.7676 73.9161 71.5307 74.4787 72.0933 cv
75.0413 72.6559 75.8044 72.972 76.6 72.972 cv
cp
f
1 lw
[] 0 dsh
76.6 72.972 mo
77.3956 72.972 78.1587 72.6559 78.7213 72.0933 cv
79.2839 71.5307 79.6 70.7676 79.6 69.972 cv
79.6 69.1764 79.2839 68.4133 78.7213 67.8507 cv
78.1587 67.2881 77.3956 66.972 76.6 66.972 cv
75.8044 66.972 75.0413 67.2881 74.4787 67.8507 cv
73.9161 68.4133 73.6 69.1764 73.6 69.972 cv
73.6 70.7676 73.9161 71.5307 74.4787 72.0933 cv
75.0413 72.6559 75.8044 72.972 76.6 72.972 cv
cp
@
96.57 66.5858 mo
96.57 72.2558 li
97.76 72.2558 li
98.76 72.2558 99.5 72.0358 99.97 71.5758 cv
100.43 71.1158 100.67 70.3958 100.67 69.4158 cv
100.67 68.4358 100.43 67.7258 99.97 67.2658 cv
99.5 66.8158 98.76 66.5858 97.76 66.5858 cv
96.57 66.5858 li
95.58 65.7758 mo
97.61 65.7758 li
99.02 65.7758 100.06 66.0758 100.72 66.6558 cv
101.38 67.2458 101.71 68.1658 101.71 69.4158 cv
101.71 70.6758 101.37 71.5958 100.71 72.1858 cv
100.05 72.7758 99.01 73.0658 97.61 73.0658 cv
95.58 73.0658 li
95.58 65.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
108.74 66.3358 mo
108.74 67.3758 li
108.4 67.0758 108.05 66.8458 107.67 66.6858 cv
107.29 66.5358 106.9 66.4558 106.48 66.4558 cv
105.64 66.4558 105 66.7158 104.56 67.2258 cv
104.12 67.7358 103.9 68.4658 103.9 69.4258 cv
103.9 70.3858 104.12 71.1258 104.56 71.6358 cv
105 72.1458 105.64 72.3958 106.48 72.3958 cv
106.9 72.3958 107.29 72.3258 107.67 72.1658 cv
108.05 72.0158 108.4 71.7858 108.74 71.4758 cv
108.74 72.5058 li
108.39 72.7458 108.02 72.9158 107.64 73.0258 cv
107.26 73.1358 106.85 73.1958 106.42 73.1958 cv
105.32 73.1958 104.45 72.8658 103.81 72.1958 cv
103.17 71.5258 102.86 70.6058 102.86 69.4258 cv
102.86 68.2558 103.17 67.3358 103.81 66.6558 cv
104.45 65.9858 105.32 65.6458 106.42 65.6458 cv
106.86 65.6458 107.27 65.7058 107.65 65.8158 cv
108.03 65.9358 108.4 66.1058 108.74 66.3358 cv
f
114.903 70.1058 mo
114.903 70.5458 li
110.773 70.5458 li
110.813 71.1658 110.993 71.6458 111.333 71.9658 cv
111.663 72.2858 112.123 72.4458 112.723 72.4458 cv
113.063 72.4458 113.403 72.4058 113.723 72.3258 cv
114.043 72.2458 114.373 72.1158 114.693 71.9358 cv
114.693 72.7858 li
114.373 72.9258 114.043 73.0358 113.703 73.0958 cv
113.363 73.1558 113.013 73.1958 112.673 73.1958 cv
111.793 73.1958 111.103 72.9458 110.593 72.4458 cv
110.083 71.9458 109.833 71.2558 109.833 70.3858 cv
109.833 69.4958 110.073 68.7858 110.553 68.2558 cv
111.033 67.7358 111.693 67.4658 112.513 67.4658 cv
113.253 67.4658 113.833 67.7058 114.263 68.1758 cv
114.683 68.6558 114.903 69.2958 114.903 70.1058 cv
114.003 69.8458 mo
113.993 69.3558 113.853 68.9658 113.593 68.6658 cv
113.323 68.3758 112.963 68.2258 112.523 68.2258 cv
112.023 68.2258 111.623 68.3758 111.323 68.6558 cv
111.023 68.9358 110.843 69.3358 110.803 69.8458 cv
114.003 69.8458 li
f
116.375 65.4658 mo
117.275 65.4658 li
117.275 73.0658 li
116.375 73.0658 li
116.375 65.4658 li
f
119.153 65.4658 mo
120.053 65.4658 li
120.053 73.0658 li
119.153 73.0658 li
119.153 65.4658 li
f
121.955 74.1254 mo
123.082 74.1254 li
123.082 70.2334 li
121.857 70.4784 li
121.857 69.8484 li
123.075 69.6034 li
123.768 69.6034 li
123.768 74.1254 li
124.895 74.1254 li
124.895 74.7064 li
121.955 74.7064 li
121.955 74.1254 li
f
126.36 73.8384 mo
127.081 73.8384 li
127.081 74.4264 li
126.521 75.5114 li
126.08 75.5114 li
126.36 74.4264 li
126.36 73.8384 li
f
131.972 71.9554 mo
132.301 72.0254 132.56 72.1724 132.742 72.3964 cv
132.924 72.6204 133.022 72.9004 133.022 73.2224 cv
133.022 73.7264 132.847 74.1184 132.504 74.3914 cv
132.154 74.6644 131.664 74.7974 131.027 74.7974 cv
130.81 74.7974 130.586 74.7764 130.362 74.7344 cv
130.138 74.6994 129.9 74.6364 129.662 74.5524 cv
129.662 73.8874 li
129.851 73.9994 130.061 74.0834 130.292 74.1394 cv
130.516 74.1954 130.754 74.2234 131.006 74.2234 cv
131.44 74.2234 131.769 74.1394 131.993 73.9714 cv
132.217 73.8034 132.336 73.5514 132.336 73.2224 cv
132.336 72.9284 132.231 72.6904 132.021 72.5224 cv
131.811 72.3544 131.517 72.2634 131.139 72.2634 cv
130.544 72.2634 li
130.544 71.6964 li
131.167 71.6964 li
131.503 71.6964 131.762 71.6334 131.944 71.4934 cv
132.126 71.3604 132.217 71.1644 132.217 70.9054 cv
132.217 70.6464 132.119 70.4434 131.937 70.3034 cv
131.748 70.1634 131.482 70.0934 131.139 70.0934 cv
130.95 70.0934 130.747 70.1144 130.53 70.1564 cv
130.313 70.1984 130.075 70.2614 129.816 70.3454 cv
129.816 69.7294 li
130.075 69.6594 130.32 69.6034 130.551 69.5684 cv
130.775 69.5334 130.992 69.5124 131.202 69.5124 cv
131.72 69.5124 132.133 69.6314 132.441 69.8694 cv
132.749 70.1074 132.903 70.4294 132.903 70.8354 cv
132.903 71.1154 132.819 71.3534 132.658 71.5494 cv
132.497 71.7454 132.266 71.8854 131.972 71.9554 cv
f
2 lw
2 lc
66.6 85.5658 mo
86.6 85.5658 li
.883665 .769162 0 0 cmyk
@
76.6 88.5658 mo
79.6 82.5658 li
73.6 82.5658 li
cp
f
1 lw
0 lc
0 lj
76.6 88.5658 mo
79.6 82.5658 li
73.6 82.5658 li
cp
@
95.58 81.7758 mo
99.77 81.7758 li
99.77 82.6058 li
96.57 82.6058 li
96.57 84.7558 li
99.46 84.7558 li
99.46 85.5858 li
96.57 85.5858 li
96.57 89.0658 li
95.58 89.0658 li
95.58 81.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
103.78 86.3158 mo
103.05 86.3158 102.55 86.4058 102.27 86.5658 cv
101.99 86.7358 101.85 87.0158 101.85 87.4158 cv
101.85 87.7358 101.95 87.9958 102.16 88.1758 cv
102.37 88.3658 102.66 88.4558 103.02 88.4558 cv
103.52 88.4558 103.92 88.2858 104.22 87.9258 cv
104.52 87.5758 104.67 87.1058 104.67 86.5158 cv
104.67 86.3158 li
103.78 86.3158 li
105.57 85.9458 mo
105.57 89.0658 li
104.67 89.0658 li
104.67 88.2358 li
104.46 88.5758 104.2 88.8158 103.9 88.9658 cv
103.6 89.1158 103.22 89.1958 102.78 89.1958 cv
102.22 89.1958 101.77 89.0458 101.44 88.7358 cv
101.11 88.4258 100.95 88.0058 100.95 87.4758 cv
100.95 86.8658 101.15 86.4058 101.57 86.0858 cv
101.98 85.7758 102.59 85.6158 103.41 85.6158 cv
104.67 85.6158 li
104.67 85.5258 li
104.67 85.1158 104.53 84.7958 104.26 84.5658 cv
103.99 84.3458 103.61 84.2258 103.12 84.2258 cv
102.8 84.2258 102.5 84.2658 102.2 84.3458 cv
101.9 84.4258 101.62 84.5358 101.35 84.6758 cv
101.35 83.8458 li
101.67 83.7258 101.99 83.6258 102.3 83.5658 cv
102.61 83.5058 102.91 83.4658 103.21 83.4658 cv
104 83.4658 104.59 83.6758 104.98 84.0858 cv
105.37 84.4958 105.57 85.1158 105.57 85.9458 cv
f
108.31 82.0458 mo
108.31 83.5958 li
110.16 83.5958 li
110.16 84.2958 li
108.31 84.2958 li
108.31 87.2658 li
108.31 87.7158 108.37 88.0058 108.49 88.1258 cv
108.61 88.2558 108.86 88.3158 109.24 88.3158 cv
110.16 88.3158 li
110.16 89.0658 li
109.24 89.0658 li
108.54 89.0658 108.06 88.9358 107.8 88.6758 cv
107.54 88.4158 107.41 87.9458 107.41 87.2658 cv
107.41 84.2958 li
106.75 84.2958 li
106.75 83.5958 li
107.41 83.5958 li
107.41 82.0458 li
108.31 82.0458 li
f
110.89 85.9258 mo
113.52 85.9258 li
113.52 86.7258 li
110.89 86.7258 li
110.89 85.9258 li
f
113.99 81.7758 mo
120.15 81.7758 li
120.15 82.6058 li
117.56 82.6058 li
117.56 89.0658 li
116.57 89.0658 li
116.57 82.6058 li
113.99 82.6058 li
113.99 81.7758 li
f
124.23 84.4358 mo
124.13 84.3758 124.02 84.3358 123.9 84.3058 cv
123.78 84.2858 123.65 84.2658 123.51 84.2658 cv
123 84.2658 122.61 84.4358 122.34 84.7658 cv
122.06 85.0958 121.93 85.5658 121.93 86.1858 cv
121.93 89.0658 li
121.03 89.0658 li
121.03 83.5958 li
121.93 83.5958 li
121.93 84.4458 li
122.11 84.1158 122.36 83.8658 122.66 83.7058 cv
122.96 83.5458 123.33 83.4658 123.77 83.4658 cv
123.98 83.4758 li
124.05 83.4858 124.13 83.4958 124.23 83.5158 cv
124.23 84.4358 li
f
129.85 86.1058 mo
129.85 86.5458 li
125.72 86.5458 li
125.76 87.1658 125.94 87.6458 126.28 87.9658 cv
126.61 88.2858 127.07 88.4458 127.67 88.4458 cv
128.01 88.4458 128.35 88.4058 128.67 88.3258 cv
128.99 88.2458 129.32 88.1158 129.64 87.9358 cv
129.64 88.7858 li
129.32 88.9258 128.99 89.0358 128.65 89.0958 cv
128.31 89.1558 127.96 89.1958 127.62 89.1958 cv
126.74 89.1958 126.05 88.9458 125.54 88.4458 cv
125.03 87.9458 124.78 87.2558 124.78 86.3858 cv
124.78 85.4958 125.02 84.7858 125.5 84.2558 cv
125.98 83.7358 126.64 83.4658 127.46 83.4658 cv
128.2 83.4658 128.78 83.7058 129.21 84.1758 cv
129.63 84.6558 129.85 85.2958 129.85 86.1058 cv
128.95 85.8458 mo
128.94 85.3558 128.8 84.9658 128.54 84.6658 cv
128.27 84.3758 127.91 84.2258 127.47 84.2258 cv
126.97 84.2258 126.57 84.3758 126.27 84.6558 cv
125.97 84.9358 125.79 85.3358 125.75 85.8458 cv
128.95 85.8458 li
f
136 86.1058 mo
136 86.5458 li
131.87 86.5458 li
131.91 87.1658 132.09 87.6458 132.43 87.9658 cv
132.76 88.2858 133.22 88.4458 133.82 88.4458 cv
134.16 88.4458 134.5 88.4058 134.82 88.3258 cv
135.14 88.2458 135.47 88.1158 135.79 87.9358 cv
135.79 88.7858 li
135.47 88.9258 135.14 89.0358 134.8 89.0958 cv
134.46 89.1558 134.11 89.1958 133.77 89.1958 cv
132.89 89.1958 132.2 88.9458 131.69 88.4458 cv
131.18 87.9458 130.93 87.2558 130.93 86.3858 cv
130.93 85.4958 131.17 84.7858 131.65 84.2558 cv
132.13 83.7358 132.79 83.4658 133.61 83.4658 cv
134.35 83.4658 134.93 83.7058 135.36 84.1758 cv
135.78 84.6558 136 85.2958 136 86.1058 cv
135.1 85.8458 mo
135.09 85.3558 134.95 84.9658 134.69 84.6658 cv
134.42 84.3758 134.06 84.2258 133.62 84.2258 cv
133.12 84.2258 132.72 84.3758 132.42 84.6558 cv
132.12 84.9358 131.94 85.3358 131.9 85.8458 cv
135.1 85.8458 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
