%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: faultToleranceCpu.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2019/12/2, 16:58:50
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-12-02T12:03:18+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
gsave
0 345.6 mo
461 345.6 li
461 -.399999 li
0 -.399999 li
0 345.6 li
clp
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.584 mo
414.72 307.584 li
414.72 41.472 li
57.6 41.472 li
57.6 307.584 li
f
91.8691 307.584 mo
73.8327 307.584 li
73.8327 140.684 li
91.8691 140.684 li
91.8691 307.584 li
/1 
[/DeviceCMYK] /CSA add_res
0 .638514 .385901 0 cmyk
f
182.051 307.584 mo
164.014 307.584 li
164.014 103.596 li
182.051 103.596 li
182.051 307.584 li
f
272.233 307.584 mo
254.196 307.584 li
254.196 128.322 li
272.233 128.322 li
272.233 307.584 li
f
362.415 307.584 mo
344.378 307.584 li
344.378 91.2328 li
362.415 91.2328 li
362.415 307.584 li
f
109.905 307.584 mo
91.8691 307.584 li
91.8691 146.866 li
109.905 146.866 li
109.905 307.584 li
.578576 .527581 0 0 cmyk
f
200.087 307.584 mo
182.051 307.584 li
182.051 66.5069 li
200.087 66.5069 li
200.087 307.584 li
f
290.269 307.584 mo
272.233 307.584 li
272.233 97.4142 li
290.269 97.4142 li
290.269 307.584 li
f
380.451 307.584 mo
362.415 307.584 li
362.415 54.144 li
380.451 54.144 li
380.451 307.584 li
f
127.942 307.584 mo
109.905 307.584 li
127.942 307.584 li
.532036 .0339361 .660609 0 cmyk
f
218.124 307.584 mo
200.087 307.584 li
200.087 109.777 li
218.124 109.777 li
218.124 307.584 li
f
308.305 307.584 mo
290.269 307.584 li
290.269 115.959 li
308.305 115.959 li
308.305 307.584 li
f
398.487 307.584 mo
380.451 307.584 li
380.451 97.4142 li
398.487 97.4142 li
398.487 307.584 li
f
91.8691 307.584 mo
91.8691 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.8691 307.584 mo
91.8691 311.084 li
@
62.9632 316.868 mo
62.9632 317.718 li
62.7032 317.598 62.4432 317.498 62.1732 317.428 cv
61.8932 317.368 61.6132 317.328 61.3232 317.328 cv
60.8732 317.328 60.5332 317.398 60.3132 317.538 cv
60.0932 317.678 59.9832 317.878 59.9832 318.148 cv
59.9832 318.358 60.0632 318.518 60.2232 318.638 cv
60.3832 318.758 60.7032 318.878 61.1832 318.978 cv
61.4932 319.048 li
62.1332 319.188 62.5832 319.388 62.8532 319.628 cv
63.1132 319.878 63.2532 320.228 63.2532 320.668 cv
63.2532 321.178 63.0532 321.578 62.6532 321.868 cv
62.2532 322.168 61.6932 322.308 60.9932 322.308 cv
60.6932 322.308 60.3932 322.278 60.0732 322.228 cv
59.7532 322.178 59.4232 322.098 59.0732 321.978 cv
59.0732 321.048 li
59.4032 321.228 59.7332 321.358 60.0532 321.438 cv
60.3732 321.528 60.6932 321.568 61.0132 321.568 cv
61.4332 321.568 61.7632 321.498 61.9932 321.358 cv
62.2132 321.218 62.3332 321.008 62.3332 320.738 cv
62.3332 320.498 62.2432 320.308 62.0832 320.178 cv
61.9232 320.048 61.5632 319.918 61.0032 319.798 cv
60.6932 319.728 li
60.1332 319.608 59.7232 319.428 59.4832 319.188 cv
59.2332 318.948 59.1132 318.618 59.1132 318.188 cv
59.1132 317.678 59.2932 317.278 59.6532 316.998 cv
60.0132 316.718 60.5332 316.578 61.2132 316.578 cv
61.5432 316.578 61.8532 316.608 62.1532 316.658 cv
62.4432 316.708 62.7132 316.778 62.9632 316.868 cv
f
69.3631 319.218 mo
69.3631 319.658 li
65.2331 319.658 li
65.2731 320.278 65.4531 320.758 65.7931 321.078 cv
66.1231 321.398 66.5831 321.558 67.1831 321.558 cv
67.5231 321.558 67.8631 321.518 68.1831 321.438 cv
68.5031 321.358 68.8331 321.228 69.1531 321.048 cv
69.1531 321.898 li
68.8331 322.038 68.5031 322.148 68.1631 322.208 cv
67.8231 322.268 67.4731 322.308 67.1331 322.308 cv
66.2531 322.308 65.5631 322.058 65.0531 321.558 cv
64.5431 321.058 64.2931 320.368 64.2931 319.498 cv
64.2931 318.608 64.5331 317.898 65.0131 317.368 cv
65.4931 316.848 66.1531 316.578 66.9731 316.578 cv
67.7131 316.578 68.2931 316.818 68.7231 317.288 cv
69.1431 317.768 69.3631 318.408 69.3631 319.218 cv
68.4631 318.958 mo
68.4531 318.468 68.3131 318.078 68.0531 317.778 cv
67.7831 317.488 67.4231 317.338 66.9831 317.338 cv
66.4831 317.338 66.0831 317.488 65.7831 317.768 cv
65.4831 318.048 65.3031 318.448 65.2631 318.958 cv
68.4631 318.958 li
f
74.0032 317.548 mo
73.9032 317.488 73.7932 317.448 73.6732 317.418 cv
73.5532 317.398 73.4232 317.378 73.2832 317.378 cv
72.7732 317.378 72.3832 317.548 72.1132 317.878 cv
71.8332 318.208 71.7032 318.678 71.7032 319.298 cv
71.7032 322.178 li
70.8032 322.178 li
70.8032 316.708 li
71.7032 316.708 li
71.7032 317.558 li
71.8832 317.228 72.1332 316.978 72.4332 316.818 cv
72.7332 316.658 73.1032 316.578 73.5432 316.578 cv
73.7532 316.588 li
73.8232 316.598 73.9032 316.608 74.0032 316.628 cv
74.0032 317.548 li
f
74.3031 316.708 mo
75.2531 316.708 li
76.9631 321.298 li
78.6731 316.708 li
79.6231 316.708 li
77.5731 322.178 li
76.3531 322.178 li
74.3031 316.708 li
f
85.5431 319.218 mo
85.5431 319.658 li
81.4131 319.658 li
81.4531 320.278 81.6331 320.758 81.9731 321.078 cv
82.3031 321.398 82.7631 321.558 83.3631 321.558 cv
83.7031 321.558 84.0431 321.518 84.3631 321.438 cv
84.6831 321.358 85.0131 321.228 85.3331 321.048 cv
85.3331 321.898 li
85.0131 322.038 84.6831 322.148 84.3431 322.208 cv
84.0031 322.268 83.6531 322.308 83.3131 322.308 cv
82.4331 322.308 81.7431 322.058 81.2331 321.558 cv
80.7231 321.058 80.4731 320.368 80.4731 319.498 cv
80.4731 318.608 80.7131 317.898 81.1931 317.368 cv
81.6731 316.848 82.3331 316.578 83.1531 316.578 cv
83.8931 316.578 84.4731 316.818 84.9031 317.288 cv
85.3231 317.768 85.5431 318.408 85.5431 319.218 cv
84.6431 318.958 mo
84.6331 318.468 84.4931 318.078 84.2331 317.778 cv
83.9631 317.488 83.6031 317.338 83.1631 317.338 cv
82.6631 317.338 82.2631 317.488 81.9631 317.768 cv
81.6631 318.048 81.4831 318.448 81.4431 318.958 cv
84.6431 318.958 li
f
90.1831 317.548 mo
90.0831 317.488 89.9731 317.448 89.8531 317.418 cv
89.7331 317.398 89.6031 317.378 89.4631 317.378 cv
88.9531 317.378 88.5631 317.548 88.2931 317.878 cv
88.0131 318.208 87.8831 318.678 87.8831 319.298 cv
87.8831 322.178 li
86.9831 322.178 li
86.9831 316.708 li
87.8831 316.708 li
87.8831 317.558 li
88.0631 317.228 88.3131 316.978 88.6131 316.818 cv
88.9131 316.658 89.2831 316.578 89.7231 316.578 cv
89.9331 316.588 li
90.0031 316.598 90.0831 316.608 90.1831 316.628 cv
90.1831 317.548 li
f
97.073 314.578 mo
97.073 315.328 li
96.213 315.328 li
95.893 315.328 95.663 315.398 95.543 315.528 cv
95.413 315.658 95.353 315.888 95.353 316.228 cv
95.353 316.708 li
96.833 316.708 li
96.833 317.408 li
95.353 317.408 li
95.353 322.178 li
94.453 322.178 li
94.453 317.408 li
93.593 317.408 li
93.593 316.708 li
94.453 316.708 li
94.453 316.328 li
94.453 315.728 94.593 315.278 94.873 314.998 cv
95.153 314.718 95.603 314.578 96.223 314.578 cv
97.073 314.578 li
f
100.313 319.428 mo
99.5831 319.428 99.0831 319.518 98.8031 319.678 cv
98.5231 319.848 98.3831 320.128 98.3831 320.528 cv
98.3831 320.848 98.4831 321.108 98.6931 321.288 cv
98.9031 321.478 99.1931 321.568 99.5531 321.568 cv
100.053 321.568 100.453 321.398 100.753 321.038 cv
101.053 320.688 101.203 320.218 101.203 319.628 cv
101.203 319.428 li
100.313 319.428 li
102.103 319.058 mo
102.103 322.178 li
101.203 322.178 li
101.203 321.348 li
100.993 321.688 100.733 321.928 100.433 322.078 cv
100.133 322.228 99.7531 322.308 99.3131 322.308 cv
98.7531 322.308 98.3031 322.158 97.9731 321.848 cv
97.6431 321.538 97.4831 321.118 97.4831 320.588 cv
97.4831 319.978 97.6831 319.518 98.1031 319.198 cv
98.5131 318.888 99.1231 318.728 99.9431 318.728 cv
101.203 318.728 li
101.203 318.638 li
101.203 318.228 101.063 317.908 100.793 317.678 cv
100.523 317.458 100.143 317.338 99.6531 317.338 cv
99.3331 317.338 99.0331 317.378 98.7331 317.458 cv
98.4331 317.538 98.1531 317.648 97.8831 317.788 cv
97.8831 316.958 li
98.2031 316.838 98.5231 316.738 98.8331 316.678 cv
99.1431 316.618 99.4431 316.578 99.7431 316.578 cv
100.533 316.578 101.123 316.788 101.513 317.198 cv
101.903 317.608 102.103 318.228 102.103 319.058 cv
f
103.953 316.708 mo
104.853 316.708 li
104.853 322.178 li
103.953 322.178 li
103.953 316.708 li
103.953 314.578 mo
104.853 314.578 li
104.853 315.718 li
103.953 315.718 li
103.953 314.578 li
f
106.733 314.578 mo
107.633 314.578 li
107.633 322.178 li
106.733 322.178 li
106.733 314.578 li
f
109.423 320.018 mo
109.423 316.708 li
110.323 316.708 li
110.323 319.988 li
110.323 320.508 110.423 320.888 110.623 321.148 cv
110.823 321.408 111.123 321.538 111.533 321.538 cv
112.013 321.538 112.403 321.388 112.683 321.078 cv
112.963 320.768 113.103 320.348 113.103 319.808 cv
113.103 316.708 li
114.003 316.708 li
114.003 322.178 li
113.103 322.178 li
113.103 321.338 li
112.883 321.678 112.623 321.918 112.343 322.078 cv
112.053 322.228 111.723 322.308 111.343 322.308 cv
110.713 322.308 110.233 322.118 109.913 321.728 cv
109.583 321.348 109.423 320.778 109.423 320.018 cv
111.683 316.578 mo
111.683 316.578 li
f
119.023 317.548 mo
118.923 317.488 118.813 317.448 118.693 317.418 cv
118.573 317.398 118.443 317.378 118.303 317.378 cv
117.793 317.378 117.403 317.548 117.133 317.878 cv
116.853 318.208 116.723 318.678 116.723 319.298 cv
116.723 322.178 li
115.823 322.178 li
115.823 316.708 li
116.723 316.708 li
116.723 317.558 li
116.903 317.228 117.153 316.978 117.453 316.818 cv
117.753 316.658 118.123 316.578 118.563 316.578 cv
118.773 316.588 li
118.843 316.598 118.923 316.608 119.023 316.628 cv
119.023 317.548 li
f
124.643 319.218 mo
124.643 319.658 li
120.513 319.658 li
120.553 320.278 120.733 320.758 121.073 321.078 cv
121.403 321.398 121.863 321.558 122.463 321.558 cv
122.803 321.558 123.143 321.518 123.463 321.438 cv
123.783 321.358 124.113 321.228 124.433 321.048 cv
124.433 321.898 li
124.113 322.038 123.783 322.148 123.443 322.208 cv
123.103 322.268 122.753 322.308 122.413 322.308 cv
121.533 322.308 120.843 322.058 120.333 321.558 cv
119.823 321.058 119.573 320.368 119.573 319.498 cv
119.573 318.608 119.813 317.898 120.293 317.368 cv
120.773 316.848 121.433 316.578 122.253 316.578 cv
122.993 316.578 123.573 316.818 124.003 317.288 cv
124.423 317.768 124.643 318.408 124.643 319.218 cv
123.743 318.958 mo
123.733 318.468 123.593 318.078 123.333 317.778 cv
123.063 317.488 122.703 317.338 122.263 317.338 cv
121.763 317.338 121.363 317.488 121.063 317.768 cv
120.763 318.048 120.583 318.448 120.543 318.958 cv
123.743 318.958 li
f
182.051 307.584 mo
182.051 311.084 li
f
182.051 307.584 mo
182.051 311.084 li
@
153.004 316.868 mo
153.004 317.718 li
152.744 317.598 152.484 317.498 152.214 317.428 cv
151.934 317.368 151.654 317.328 151.364 317.328 cv
150.914 317.328 150.574 317.398 150.354 317.538 cv
150.134 317.678 150.024 317.878 150.024 318.148 cv
150.024 318.358 150.104 318.518 150.264 318.638 cv
150.424 318.758 150.744 318.878 151.224 318.978 cv
151.534 319.048 li
152.174 319.188 152.624 319.388 152.894 319.628 cv
153.154 319.878 153.294 320.228 153.294 320.668 cv
153.294 321.178 153.094 321.578 152.694 321.868 cv
152.294 322.168 151.734 322.308 151.034 322.308 cv
150.734 322.308 150.434 322.278 150.114 322.228 cv
149.794 322.178 149.464 322.098 149.114 321.978 cv
149.114 321.048 li
149.444 321.228 149.774 321.358 150.094 321.438 cv
150.414 321.528 150.734 321.568 151.054 321.568 cv
151.474 321.568 151.804 321.498 152.034 321.358 cv
152.254 321.218 152.374 321.008 152.374 320.738 cv
152.374 320.498 152.284 320.308 152.124 320.178 cv
151.964 320.048 151.604 319.918 151.044 319.798 cv
150.734 319.728 li
150.174 319.608 149.764 319.428 149.524 319.188 cv
149.274 318.948 149.154 318.618 149.154 318.188 cv
149.154 317.678 149.334 317.278 149.694 316.998 cv
150.054 316.718 150.574 316.578 151.254 316.578 cv
151.584 316.578 151.894 316.608 152.194 316.658 cv
152.484 316.708 152.754 316.778 153.004 316.868 cv
f
154.204 316.708 mo
155.104 316.708 li
156.224 320.978 li
157.344 316.708 li
158.404 316.708 li
159.524 320.978 li
160.644 316.708 li
161.544 316.708 li
160.114 322.178 li
159.054 322.178 li
157.874 317.698 li
156.694 322.178 li
155.634 322.178 li
154.204 316.708 li
f
162.904 316.708 mo
163.804 316.708 li
163.804 322.178 li
162.904 322.178 li
162.904 316.708 li
162.904 314.578 mo
163.804 314.578 li
163.804 315.718 li
162.904 315.718 li
162.904 314.578 li
f
166.574 315.158 mo
166.574 316.708 li
168.424 316.708 li
168.424 317.408 li
166.574 317.408 li
166.574 320.378 li
166.574 320.828 166.634 321.118 166.754 321.238 cv
166.874 321.368 167.124 321.428 167.504 321.428 cv
168.424 321.428 li
168.424 322.178 li
167.504 322.178 li
166.804 322.178 166.324 322.048 166.064 321.788 cv
165.804 321.528 165.674 321.058 165.674 320.378 cv
165.674 317.408 li
165.014 317.408 li
165.014 316.708 li
165.674 316.708 li
165.674 315.158 li
166.574 315.158 li
f
173.544 316.918 mo
173.544 317.758 li
173.284 317.618 173.034 317.518 172.774 317.448 cv
172.514 317.378 172.264 317.338 172.004 317.338 cv
171.424 317.338 170.964 317.528 170.644 317.898 cv
170.324 318.268 170.164 318.788 170.164 319.448 cv
170.164 320.118 170.324 320.638 170.644 321.008 cv
170.964 321.378 171.424 321.558 172.004 321.558 cv
172.264 321.558 172.514 321.528 172.774 321.458 cv
173.034 321.388 173.284 321.278 173.544 321.138 cv
173.544 321.968 li
173.284 322.088 173.024 322.178 172.764 322.228 cv
172.494 322.278 172.204 322.308 171.904 322.308 cv
171.084 322.308 170.424 322.058 169.944 321.538 cv
169.454 321.028 169.214 320.328 169.214 319.448 cv
169.214 318.558 169.454 317.858 169.944 317.348 cv
170.434 316.838 171.104 316.578 171.964 316.578 cv
172.244 316.578 172.514 316.608 172.774 316.668 cv
173.034 316.728 173.294 316.808 173.544 316.918 cv
f
179.654 318.878 mo
179.654 322.178 li
178.754 322.178 li
178.754 318.908 li
178.754 318.388 178.644 318.008 178.444 317.748 cv
178.244 317.488 177.944 317.358 177.544 317.358 cv
177.054 317.358 176.674 317.518 176.394 317.828 cv
176.114 318.138 175.974 318.558 175.974 319.088 cv
175.974 322.178 li
175.074 322.178 li
175.074 314.578 li
175.974 314.578 li
175.974 317.558 li
176.184 317.238 176.434 316.988 176.734 316.828 cv
177.024 316.668 177.364 316.578 177.744 316.578 cv
178.364 316.578 178.844 316.778 179.164 317.168 cv
179.484 317.558 179.654 318.128 179.654 318.878 cv
f
187.394 314.578 mo
187.394 315.328 li
186.534 315.328 li
186.214 315.328 185.984 315.398 185.864 315.528 cv
185.734 315.658 185.674 315.888 185.674 316.228 cv
185.674 316.708 li
187.154 316.708 li
187.154 317.408 li
185.674 317.408 li
185.674 322.178 li
184.774 322.178 li
184.774 317.408 li
183.914 317.408 li
183.914 316.708 li
184.774 316.708 li
184.774 316.328 li
184.774 315.728 184.914 315.278 185.194 314.998 cv
185.474 314.718 185.924 314.578 186.544 314.578 cv
187.394 314.578 li
f
190.634 319.428 mo
189.904 319.428 189.404 319.518 189.124 319.678 cv
188.844 319.848 188.704 320.128 188.704 320.528 cv
188.704 320.848 188.804 321.108 189.014 321.288 cv
189.224 321.478 189.514 321.568 189.874 321.568 cv
190.374 321.568 190.774 321.398 191.074 321.038 cv
191.374 320.688 191.524 320.218 191.524 319.628 cv
191.524 319.428 li
190.634 319.428 li
192.424 319.058 mo
192.424 322.178 li
191.524 322.178 li
191.524 321.348 li
191.314 321.688 191.054 321.928 190.754 322.078 cv
190.454 322.228 190.074 322.308 189.634 322.308 cv
189.074 322.308 188.624 322.158 188.294 321.848 cv
187.964 321.538 187.804 321.118 187.804 320.588 cv
187.804 319.978 188.004 319.518 188.424 319.198 cv
188.834 318.888 189.444 318.728 190.264 318.728 cv
191.524 318.728 li
191.524 318.638 li
191.524 318.228 191.384 317.908 191.114 317.678 cv
190.844 317.458 190.464 317.338 189.974 317.338 cv
189.654 317.338 189.354 317.378 189.054 317.458 cv
188.754 317.538 188.474 317.648 188.204 317.788 cv
188.204 316.958 li
188.524 316.838 188.844 316.738 189.154 316.678 cv
189.464 316.618 189.764 316.578 190.064 316.578 cv
190.854 316.578 191.444 316.788 191.834 317.198 cv
192.224 317.608 192.424 318.228 192.424 319.058 cv
f
194.274 316.708 mo
195.174 316.708 li
195.174 322.178 li
194.274 322.178 li
194.274 316.708 li
194.274 314.578 mo
195.174 314.578 li
195.174 315.718 li
194.274 315.718 li
194.274 314.578 li
f
197.054 314.578 mo
197.954 314.578 li
197.954 322.178 li
197.054 322.178 li
197.054 314.578 li
f
199.744 320.018 mo
199.744 316.708 li
200.644 316.708 li
200.644 319.988 li
200.644 320.508 200.744 320.888 200.944 321.148 cv
201.144 321.408 201.444 321.538 201.854 321.538 cv
202.334 321.538 202.724 321.388 203.004 321.078 cv
203.284 320.768 203.424 320.348 203.424 319.808 cv
203.424 316.708 li
204.324 316.708 li
204.324 322.178 li
203.424 322.178 li
203.424 321.338 li
203.204 321.678 202.944 321.918 202.664 322.078 cv
202.374 322.228 202.044 322.308 201.664 322.308 cv
201.034 322.308 200.554 322.118 200.234 321.728 cv
199.904 321.348 199.744 320.778 199.744 320.018 cv
202.004 316.578 mo
202.004 316.578 li
f
209.344 317.548 mo
209.244 317.488 209.134 317.448 209.014 317.418 cv
208.894 317.398 208.764 317.378 208.624 317.378 cv
208.114 317.378 207.724 317.548 207.454 317.878 cv
207.174 318.208 207.044 318.678 207.044 319.298 cv
207.044 322.178 li
206.144 322.178 li
206.144 316.708 li
207.044 316.708 li
207.044 317.558 li
207.224 317.228 207.474 316.978 207.774 316.818 cv
208.074 316.658 208.444 316.578 208.884 316.578 cv
209.094 316.588 li
209.164 316.598 209.244 316.608 209.344 316.628 cv
209.344 317.548 li
f
214.964 319.218 mo
214.964 319.658 li
210.834 319.658 li
210.874 320.278 211.054 320.758 211.394 321.078 cv
211.724 321.398 212.184 321.558 212.784 321.558 cv
213.124 321.558 213.464 321.518 213.784 321.438 cv
214.104 321.358 214.434 321.228 214.754 321.048 cv
214.754 321.898 li
214.434 322.038 214.104 322.148 213.764 322.208 cv
213.424 322.268 213.074 322.308 212.734 322.308 cv
211.854 322.308 211.164 322.058 210.654 321.558 cv
210.144 321.058 209.894 320.368 209.894 319.498 cv
209.894 318.608 210.134 317.898 210.614 317.368 cv
211.094 316.848 211.754 316.578 212.574 316.578 cv
213.314 316.578 213.894 316.818 214.324 317.288 cv
214.744 317.768 214.964 318.408 214.964 319.218 cv
214.064 318.958 mo
214.054 318.468 213.914 318.078 213.654 317.778 cv
213.384 317.488 213.024 317.338 212.584 317.338 cv
212.084 317.338 211.684 317.488 211.384 317.768 cv
211.084 318.048 210.904 318.448 210.864 318.958 cv
214.064 318.958 li
f
272.233 307.584 mo
272.233 311.084 li
f
272.233 307.584 mo
272.233 311.084 li
@
246.821 314.578 mo
247.721 314.578 li
247.721 322.178 li
246.821 322.178 li
246.821 314.578 li
f
249.601 316.708 mo
250.501 316.708 li
250.501 322.178 li
249.601 322.178 li
249.601 316.708 li
249.601 314.578 mo
250.501 314.578 li
250.501 315.718 li
249.601 315.718 li
249.601 314.578 li
f
256.931 318.878 mo
256.931 322.178 li
256.031 322.178 li
256.031 318.908 li
256.031 318.388 255.921 318.008 255.721 317.748 cv
255.521 317.488 255.221 317.358 254.821 317.358 cv
254.331 317.358 253.951 317.518 253.671 317.828 cv
253.391 318.138 253.251 318.558 253.251 319.088 cv
253.251 322.178 li
252.351 322.178 li
252.351 316.708 li
253.251 316.708 li
253.251 317.558 li
253.461 317.238 253.711 316.988 254.011 316.828 cv
254.301 316.668 254.641 316.578 255.021 316.578 cv
255.641 316.578 256.121 316.778 256.441 317.168 cv
256.761 317.558 256.931 318.128 256.931 318.878 cv
f
258.691 314.578 mo
259.591 314.578 li
259.591 319.068 li
262.271 316.708 li
263.421 316.708 li
260.521 319.268 li
263.541 322.178 li
262.371 322.178 li
259.591 319.508 li
259.591 322.178 li
258.691 322.178 li
258.691 314.578 li
f
270.461 314.578 mo
270.461 315.328 li
269.601 315.328 li
269.281 315.328 269.051 315.398 268.931 315.528 cv
268.801 315.658 268.741 315.888 268.741 316.228 cv
268.741 316.708 li
270.221 316.708 li
270.221 317.408 li
268.741 317.408 li
268.741 322.178 li
267.841 322.178 li
267.841 317.408 li
266.981 317.408 li
266.981 316.708 li
267.841 316.708 li
267.841 316.328 li
267.841 315.728 267.981 315.278 268.261 314.998 cv
268.541 314.718 268.991 314.578 269.611 314.578 cv
270.461 314.578 li
f
273.701 319.428 mo
272.971 319.428 272.471 319.518 272.191 319.678 cv
271.911 319.848 271.771 320.128 271.771 320.528 cv
271.771 320.848 271.871 321.108 272.081 321.288 cv
272.291 321.478 272.581 321.568 272.941 321.568 cv
273.441 321.568 273.841 321.398 274.141 321.038 cv
274.441 320.688 274.591 320.218 274.591 319.628 cv
274.591 319.428 li
273.701 319.428 li
275.491 319.058 mo
275.491 322.178 li
274.591 322.178 li
274.591 321.348 li
274.381 321.688 274.121 321.928 273.821 322.078 cv
273.521 322.228 273.141 322.308 272.701 322.308 cv
272.141 322.308 271.691 322.158 271.361 321.848 cv
271.031 321.538 270.871 321.118 270.871 320.588 cv
270.871 319.978 271.071 319.518 271.491 319.198 cv
271.901 318.888 272.511 318.728 273.331 318.728 cv
274.591 318.728 li
274.591 318.638 li
274.591 318.228 274.451 317.908 274.181 317.678 cv
273.911 317.458 273.531 317.338 273.041 317.338 cv
272.721 317.338 272.421 317.378 272.121 317.458 cv
271.821 317.538 271.541 317.648 271.271 317.788 cv
271.271 316.958 li
271.591 316.838 271.911 316.738 272.221 316.678 cv
272.531 316.618 272.831 316.578 273.131 316.578 cv
273.921 316.578 274.511 316.788 274.901 317.198 cv
275.291 317.608 275.491 318.228 275.491 319.058 cv
f
277.341 316.708 mo
278.241 316.708 li
278.241 322.178 li
277.341 322.178 li
277.341 316.708 li
277.341 314.578 mo
278.241 314.578 li
278.241 315.718 li
277.341 315.718 li
277.341 314.578 li
f
280.121 314.578 mo
281.021 314.578 li
281.021 322.178 li
280.121 322.178 li
280.121 314.578 li
f
282.811 320.018 mo
282.811 316.708 li
283.711 316.708 li
283.711 319.988 li
283.711 320.508 283.811 320.888 284.011 321.148 cv
284.211 321.408 284.511 321.538 284.921 321.538 cv
285.401 321.538 285.791 321.388 286.071 321.078 cv
286.351 320.768 286.491 320.348 286.491 319.808 cv
286.491 316.708 li
287.391 316.708 li
287.391 322.178 li
286.491 322.178 li
286.491 321.338 li
286.271 321.678 286.011 321.918 285.731 322.078 cv
285.441 322.228 285.111 322.308 284.731 322.308 cv
284.101 322.308 283.621 322.118 283.301 321.728 cv
282.971 321.348 282.811 320.778 282.811 320.018 cv
285.071 316.578 mo
285.071 316.578 li
f
292.411 317.548 mo
292.311 317.488 292.201 317.448 292.081 317.418 cv
291.961 317.398 291.831 317.378 291.691 317.378 cv
291.181 317.378 290.791 317.548 290.521 317.878 cv
290.241 318.208 290.111 318.678 290.111 319.298 cv
290.111 322.178 li
289.211 322.178 li
289.211 316.708 li
290.111 316.708 li
290.111 317.558 li
290.291 317.228 290.541 316.978 290.841 316.818 cv
291.141 316.658 291.511 316.578 291.951 316.578 cv
292.161 316.588 li
292.231 316.598 292.311 316.608 292.411 316.628 cv
292.411 317.548 li
f
298.031 319.218 mo
298.031 319.658 li
293.901 319.658 li
293.941 320.278 294.121 320.758 294.461 321.078 cv
294.791 321.398 295.251 321.558 295.851 321.558 cv
296.191 321.558 296.531 321.518 296.851 321.438 cv
297.171 321.358 297.501 321.228 297.821 321.048 cv
297.821 321.898 li
297.501 322.038 297.171 322.148 296.831 322.208 cv
296.491 322.268 296.141 322.308 295.801 322.308 cv
294.921 322.308 294.231 322.058 293.721 321.558 cv
293.211 321.058 292.961 320.368 292.961 319.498 cv
292.961 318.608 293.201 317.898 293.681 317.368 cv
294.161 316.848 294.821 316.578 295.641 316.578 cv
296.381 316.578 296.961 316.818 297.391 317.288 cv
297.811 317.768 298.031 318.408 298.031 319.218 cv
297.131 318.958 mo
297.121 318.468 296.981 318.078 296.721 317.778 cv
296.451 317.488 296.091 317.338 295.651 317.338 cv
295.151 317.338 294.751 317.488 294.451 317.768 cv
294.151 318.048 293.971 318.448 293.931 318.958 cv
297.131 318.958 li
f
362.415 307.584 mo
362.415 311.084 li
f
362.415 307.584 mo
362.415 311.084 li
@
334.483 318.878 mo
334.483 322.178 li
333.583 322.178 li
333.583 318.908 li
333.583 318.388 333.473 318.008 333.273 317.748 cv
333.073 317.488 332.773 317.358 332.373 317.358 cv
331.883 317.358 331.503 317.518 331.223 317.828 cv
330.943 318.138 330.803 318.558 330.803 319.088 cv
330.803 322.178 li
329.903 322.178 li
329.903 314.578 li
330.803 314.578 li
330.803 317.558 li
331.013 317.238 331.263 316.988 331.563 316.828 cv
331.853 316.668 332.193 316.578 332.573 316.578 cv
333.193 316.578 333.673 316.778 333.993 317.168 cv
334.313 317.558 334.483 318.128 334.483 318.878 cv
f
338.553 322.678 mo
338.293 323.318 338.043 323.748 337.803 323.948 cv
337.563 324.148 337.243 324.248 336.843 324.248 cv
336.123 324.248 li
336.123 323.498 li
336.653 323.498 li
336.893 323.498 337.083 323.438 337.223 323.318 cv
337.363 323.198 337.513 322.928 337.683 322.488 cv
337.843 322.088 li
335.633 316.708 li
336.583 316.708 li
338.293 320.988 li
340.003 316.708 li
340.953 316.708 li
338.553 322.678 li
f
346.123 319.448 mo
346.123 318.788 345.983 318.278 345.713 317.898 cv
345.433 317.518 345.063 317.328 344.593 317.328 cv
344.113 317.328 343.743 317.518 343.473 317.898 cv
343.193 318.278 343.063 318.788 343.063 319.448 cv
343.063 320.108 343.193 320.628 343.473 321.008 cv
343.743 321.388 344.113 321.568 344.593 321.568 cv
345.063 321.568 345.433 321.388 345.713 321.008 cv
345.983 320.628 346.123 320.108 346.123 319.448 cv
343.063 317.538 mo
343.243 317.218 343.483 316.978 343.773 316.818 cv
344.063 316.658 344.413 316.578 344.813 316.578 cv
345.473 316.578 346.013 316.848 346.433 317.368 cv
346.843 317.898 347.053 318.588 347.053 319.448 cv
347.053 320.308 346.843 321.008 346.433 321.528 cv
346.013 322.048 345.473 322.308 344.813 322.308 cv
344.413 322.308 344.063 322.228 343.773 322.078 cv
343.483 321.928 343.243 321.688 343.063 321.358 cv
343.063 322.178 li
342.163 322.178 li
342.163 314.578 li
343.063 314.578 li
343.063 317.538 li
f
351.713 317.548 mo
351.613 317.488 351.503 317.448 351.383 317.418 cv
351.263 317.398 351.133 317.378 350.993 317.378 cv
350.483 317.378 350.093 317.548 349.823 317.878 cv
349.543 318.208 349.413 318.678 349.413 319.298 cv
349.413 322.178 li
348.513 322.178 li
348.513 316.708 li
349.413 316.708 li
349.413 317.558 li
349.593 317.228 349.843 316.978 350.143 316.818 cv
350.443 316.658 350.813 316.578 351.253 316.578 cv
351.463 316.588 li
351.533 316.598 351.613 316.608 351.713 316.628 cv
351.713 317.548 li
f
352.653 316.708 mo
353.553 316.708 li
353.553 322.178 li
352.653 322.178 li
352.653 316.708 li
352.653 314.578 mo
353.553 314.578 li
353.553 315.718 li
352.653 315.718 li
352.653 314.578 li
f
359.033 317.538 mo
359.033 314.578 li
359.933 314.578 li
359.933 322.178 li
359.033 322.178 li
359.033 321.358 li
358.843 321.688 358.603 321.928 358.313 322.078 cv
358.023 322.228 357.683 322.308 357.283 322.308 cv
356.623 322.308 356.083 322.048 355.663 321.528 cv
355.243 321.008 355.043 320.308 355.043 319.448 cv
355.043 318.588 355.243 317.898 355.663 317.368 cv
356.083 316.848 356.623 316.578 357.283 316.578 cv
357.683 316.578 358.023 316.658 358.313 316.818 cv
358.603 316.978 358.843 317.218 359.033 317.538 cv
355.973 319.448 mo
355.973 320.108 356.103 320.628 356.373 321.008 cv
356.643 321.388 357.023 321.568 357.503 321.568 cv
357.973 321.568 358.343 321.388 358.623 321.008 cv
358.893 320.628 359.033 320.108 359.033 319.448 cv
359.033 318.788 358.893 318.278 358.623 317.898 cv
358.343 317.518 357.973 317.328 357.503 317.328 cv
357.023 317.328 356.643 317.518 356.373 317.898 cv
356.103 318.278 355.973 318.788 355.973 319.448 cv
f
367.732 314.578 mo
367.732 315.328 li
366.872 315.328 li
366.552 315.328 366.322 315.398 366.202 315.528 cv
366.072 315.658 366.012 315.888 366.012 316.228 cv
366.012 316.708 li
367.492 316.708 li
367.492 317.408 li
366.012 317.408 li
366.012 322.178 li
365.112 322.178 li
365.112 317.408 li
364.252 317.408 li
364.252 316.708 li
365.112 316.708 li
365.112 316.328 li
365.112 315.728 365.252 315.278 365.532 314.998 cv
365.812 314.718 366.262 314.578 366.882 314.578 cv
367.732 314.578 li
f
370.972 319.428 mo
370.242 319.428 369.742 319.518 369.462 319.678 cv
369.182 319.848 369.042 320.128 369.042 320.528 cv
369.042 320.848 369.142 321.108 369.352 321.288 cv
369.562 321.478 369.852 321.568 370.212 321.568 cv
370.712 321.568 371.112 321.398 371.412 321.038 cv
371.712 320.688 371.862 320.218 371.862 319.628 cv
371.862 319.428 li
370.972 319.428 li
372.762 319.058 mo
372.762 322.178 li
371.862 322.178 li
371.862 321.348 li
371.652 321.688 371.392 321.928 371.092 322.078 cv
370.792 322.228 370.412 322.308 369.972 322.308 cv
369.412 322.308 368.962 322.158 368.632 321.848 cv
368.302 321.538 368.142 321.118 368.142 320.588 cv
368.142 319.978 368.342 319.518 368.762 319.198 cv
369.172 318.888 369.782 318.728 370.602 318.728 cv
371.862 318.728 li
371.862 318.638 li
371.862 318.228 371.722 317.908 371.452 317.678 cv
371.182 317.458 370.802 317.338 370.312 317.338 cv
369.992 317.338 369.692 317.378 369.392 317.458 cv
369.092 317.538 368.812 317.648 368.542 317.788 cv
368.542 316.958 li
368.862 316.838 369.182 316.738 369.492 316.678 cv
369.802 316.618 370.102 316.578 370.402 316.578 cv
371.192 316.578 371.782 316.788 372.172 317.198 cv
372.562 317.608 372.762 318.228 372.762 319.058 cv
f
374.613 316.708 mo
375.513 316.708 li
375.513 322.178 li
374.613 322.178 li
374.613 316.708 li
374.613 314.578 mo
375.513 314.578 li
375.513 315.718 li
374.613 315.718 li
374.613 314.578 li
f
377.393 314.578 mo
378.293 314.578 li
378.293 322.178 li
377.393 322.178 li
377.393 314.578 li
f
380.083 320.018 mo
380.083 316.708 li
380.983 316.708 li
380.983 319.988 li
380.983 320.508 381.083 320.888 381.283 321.148 cv
381.483 321.408 381.783 321.538 382.193 321.538 cv
382.673 321.538 383.063 321.388 383.343 321.078 cv
383.623 320.768 383.763 320.348 383.763 319.808 cv
383.763 316.708 li
384.663 316.708 li
384.663 322.178 li
383.763 322.178 li
383.763 321.338 li
383.543 321.678 383.283 321.918 383.003 322.078 cv
382.713 322.228 382.383 322.308 382.003 322.308 cv
381.373 322.308 380.893 322.118 380.573 321.728 cv
380.243 321.348 380.083 320.778 380.083 320.018 cv
382.343 316.578 mo
382.343 316.578 li
f
389.683 317.548 mo
389.583 317.488 389.473 317.448 389.353 317.418 cv
389.233 317.398 389.103 317.378 388.963 317.378 cv
388.453 317.378 388.063 317.548 387.793 317.878 cv
387.513 318.208 387.383 318.678 387.383 319.298 cv
387.383 322.178 li
386.483 322.178 li
386.483 316.708 li
387.383 316.708 li
387.383 317.558 li
387.563 317.228 387.813 316.978 388.113 316.818 cv
388.413 316.658 388.783 316.578 389.223 316.578 cv
389.433 316.588 li
389.503 316.598 389.583 316.608 389.683 316.628 cv
389.683 317.548 li
f
395.303 319.218 mo
395.303 319.658 li
391.173 319.658 li
391.213 320.278 391.393 320.758 391.733 321.078 cv
392.063 321.398 392.523 321.558 393.123 321.558 cv
393.463 321.558 393.803 321.518 394.123 321.438 cv
394.443 321.358 394.773 321.228 395.093 321.048 cv
395.093 321.898 li
394.773 322.038 394.443 322.148 394.103 322.208 cv
393.763 322.268 393.413 322.308 393.073 322.308 cv
392.193 322.308 391.503 322.058 390.993 321.558 cv
390.483 321.058 390.233 320.368 390.233 319.498 cv
390.233 318.608 390.473 317.898 390.953 317.368 cv
391.433 316.848 392.093 316.578 392.913 316.578 cv
393.653 316.578 394.233 316.818 394.663 317.288 cv
395.083 317.768 395.303 318.408 395.303 319.218 cv
394.403 318.958 mo
394.393 318.468 394.253 318.078 393.993 317.778 cv
393.723 317.488 393.363 317.338 392.923 317.338 cv
392.423 317.338 392.023 317.488 391.723 317.768 cv
391.423 318.048 391.243 318.448 391.203 318.958 cv
394.403 318.958 li
f
181.874 328.56 mo
186.064 328.56 li
186.064 329.39 li
182.864 329.39 li
182.864 331.54 li
185.754 331.54 li
185.754 332.37 li
182.864 332.37 li
182.864 335.85 li
181.874 335.85 li
181.874 328.56 li
f
189.704 331.01 mo
189.224 331.01 188.844 331.2 188.564 331.58 cv
188.284 331.96 188.144 332.47 188.144 333.12 cv
188.144 333.78 188.274 334.29 188.554 334.67 cv
188.834 335.05 189.214 335.23 189.704 335.23 cv
190.184 335.23 190.564 335.05 190.844 334.67 cv
191.124 334.29 191.264 333.78 191.264 333.12 cv
191.264 332.48 191.124 331.96 190.844 331.58 cv
190.564 331.2 190.184 331.01 189.704 331.01 cv
189.704 330.25 mo
190.484 330.25 191.094 330.51 191.544 331.01 cv
191.984 331.52 192.214 332.22 192.214 333.12 cv
192.214 334.02 191.984 334.72 191.544 335.22 cv
191.094 335.73 190.484 335.98 189.704 335.98 cv
188.914 335.98 188.294 335.73 187.854 335.22 cv
187.414 334.72 187.194 334.02 187.194 333.12 cv
187.194 332.22 187.414 331.52 187.854 331.01 cv
188.294 330.51 188.914 330.25 189.704 330.25 cv
f
193.614 333.69 mo
193.614 330.38 li
194.514 330.38 li
194.514 333.66 li
194.514 334.18 194.614 334.56 194.814 334.82 cv
195.014 335.08 195.314 335.21 195.724 335.21 cv
196.204 335.21 196.594 335.06 196.874 334.75 cv
197.154 334.44 197.294 334.02 197.294 333.48 cv
197.294 330.38 li
198.194 330.38 li
198.194 335.85 li
197.294 335.85 li
197.294 335.01 li
197.074 335.35 196.814 335.59 196.534 335.75 cv
196.244 335.9 195.914 335.98 195.534 335.98 cv
194.904 335.98 194.424 335.79 194.104 335.4 cv
193.774 335.02 193.614 334.45 193.614 333.69 cv
195.874 330.25 mo
195.874 330.25 li
f
203.214 331.22 mo
203.114 331.16 203.004 331.12 202.884 331.09 cv
202.764 331.07 202.634 331.05 202.494 331.05 cv
201.984 331.05 201.594 331.22 201.324 331.55 cv
201.044 331.88 200.914 332.35 200.914 332.97 cv
200.914 335.85 li
200.014 335.85 li
200.014 330.38 li
200.914 330.38 li
200.914 331.23 li
201.094 330.9 201.344 330.65 201.644 330.49 cv
201.944 330.33 202.314 330.25 202.754 330.25 cv
202.964 330.26 li
203.034 330.27 203.114 330.28 203.214 330.3 cv
203.214 331.22 li
f
206.374 328.56 mo
212.534 328.56 li
212.534 329.39 li
209.944 329.39 li
209.944 335.85 li
208.954 335.85 li
208.954 329.39 li
206.374 329.39 li
206.374 328.56 li
f
215.724 336.35 mo
215.464 336.99 215.214 337.42 214.974 337.62 cv
214.734 337.82 214.414 337.92 214.014 337.92 cv
213.294 337.92 li
213.294 337.17 li
213.824 337.17 li
214.064 337.17 214.254 337.11 214.394 336.99 cv
214.534 336.87 214.684 336.6 214.854 336.16 cv
215.014 335.76 li
212.804 330.38 li
213.754 330.38 li
215.464 334.66 li
217.174 330.38 li
218.124 330.38 li
215.724 336.35 li
f
220.234 335.03 mo
220.234 337.92 li
219.334 337.92 li
219.334 330.38 li
220.234 330.38 li
220.234 331.21 li
220.414 330.89 220.654 330.65 220.944 330.49 cv
221.234 330.33 221.584 330.25 221.984 330.25 cv
222.644 330.25 223.184 330.52 223.604 331.04 cv
224.014 331.57 224.224 332.26 224.224 333.12 cv
224.224 333.98 224.014 334.68 223.604 335.2 cv
223.184 335.72 222.644 335.98 221.984 335.98 cv
221.584 335.98 221.234 335.9 220.944 335.75 cv
220.654 335.6 220.414 335.36 220.234 335.03 cv
223.294 333.12 mo
223.294 332.46 223.154 331.95 222.884 331.57 cv
222.604 331.19 222.234 331 221.764 331 cv
221.284 331 220.914 331.19 220.644 331.57 cv
220.364 331.95 220.234 332.46 220.234 333.12 cv
220.234 333.78 220.364 334.3 220.644 334.68 cv
220.914 335.06 221.284 335.24 221.764 335.24 cv
222.234 335.24 222.604 335.06 222.884 334.68 cv
223.154 334.3 223.294 333.78 223.294 333.12 cv
f
230.394 332.89 mo
230.394 333.33 li
226.264 333.33 li
226.304 333.95 226.484 334.43 226.824 334.75 cv
227.154 335.07 227.614 335.23 228.214 335.23 cv
228.554 335.23 228.894 335.19 229.214 335.11 cv
229.534 335.03 229.864 334.9 230.184 334.72 cv
230.184 335.57 li
229.864 335.71 229.534 335.82 229.194 335.88 cv
228.854 335.94 228.504 335.98 228.164 335.98 cv
227.284 335.98 226.594 335.73 226.084 335.23 cv
225.574 334.73 225.324 334.04 225.324 333.17 cv
225.324 332.28 225.564 331.57 226.044 331.04 cv
226.524 330.52 227.184 330.25 228.004 330.25 cv
228.744 330.25 229.324 330.49 229.754 330.96 cv
230.174 331.44 230.394 332.08 230.394 332.89 cv
229.494 332.63 mo
229.484 332.14 229.344 331.75 229.084 331.45 cv
228.814 331.16 228.454 331.01 228.014 331.01 cv
227.514 331.01 227.114 331.16 226.814 331.44 cv
226.514 331.72 226.334 332.12 226.294 332.63 cv
229.494 332.63 li
f
235.354 330.54 mo
235.354 331.39 li
235.094 331.27 234.834 331.17 234.564 331.1 cv
234.284 331.04 234.004 331 233.714 331 cv
233.264 331 232.924 331.07 232.704 331.21 cv
232.484 331.35 232.374 331.55 232.374 331.82 cv
232.374 332.03 232.454 332.19 232.614 332.31 cv
232.774 332.43 233.094 332.55 233.574 332.65 cv
233.884 332.72 li
234.524 332.86 234.974 333.06 235.244 333.3 cv
235.504 333.55 235.644 333.9 235.644 334.34 cv
235.644 334.85 235.444 335.25 235.044 335.54 cv
234.644 335.84 234.084 335.98 233.384 335.98 cv
233.084 335.98 232.784 335.95 232.464 335.9 cv
232.144 335.85 231.814 335.77 231.464 335.65 cv
231.464 334.72 li
231.794 334.9 232.124 335.03 232.444 335.11 cv
232.764 335.2 233.084 335.24 233.404 335.24 cv
233.824 335.24 234.154 335.17 234.384 335.03 cv
234.604 334.89 234.724 334.68 234.724 334.41 cv
234.724 334.17 234.634 333.98 234.474 333.85 cv
234.314 333.72 233.954 333.59 233.394 333.47 cv
233.084 333.4 li
232.524 333.28 232.114 333.1 231.874 332.86 cv
231.624 332.62 231.504 332.29 231.504 331.86 cv
231.504 331.35 231.684 330.95 232.044 330.67 cv
232.404 330.39 232.924 330.25 233.604 330.25 cv
233.934 330.25 234.244 330.28 234.544 330.33 cv
234.834 330.38 235.104 330.45 235.354 330.54 cv
f
242.374 331.01 mo
241.894 331.01 241.514 331.2 241.234 331.58 cv
240.954 331.96 240.814 332.47 240.814 333.12 cv
240.814 333.78 240.944 334.29 241.224 334.67 cv
241.504 335.05 241.884 335.23 242.374 335.23 cv
242.854 335.23 243.234 335.05 243.514 334.67 cv
243.794 334.29 243.934 333.78 243.934 333.12 cv
243.934 332.48 243.794 331.96 243.514 331.58 cv
243.234 331.2 242.854 331.01 242.374 331.01 cv
242.374 330.25 mo
243.154 330.25 243.764 330.51 244.214 331.01 cv
244.654 331.52 244.884 332.22 244.884 333.12 cv
244.884 334.02 244.654 334.72 244.214 335.22 cv
243.764 335.73 243.154 335.98 242.374 335.98 cv
241.584 335.98 240.964 335.73 240.524 335.22 cv
240.084 334.72 239.864 334.02 239.864 333.12 cv
239.864 332.22 240.084 331.52 240.524 331.01 cv
240.964 330.51 241.584 330.25 242.374 330.25 cv
f
249.144 328.25 mo
249.144 329 li
248.284 329 li
247.964 329 247.734 329.07 247.614 329.2 cv
247.484 329.33 247.424 329.56 247.424 329.9 cv
247.424 330.38 li
248.904 330.38 li
248.904 331.08 li
247.424 331.08 li
247.424 335.85 li
246.524 335.85 li
246.524 331.08 li
245.664 331.08 li
245.664 330.38 li
246.524 330.38 li
246.524 330 li
246.524 329.4 246.664 328.95 246.944 328.67 cv
247.224 328.39 247.674 328.25 248.294 328.25 cv
249.144 328.25 li
f
253.114 328.56 mo
257.304 328.56 li
257.304 329.39 li
254.104 329.39 li
254.104 331.54 li
256.994 331.54 li
256.994 332.37 li
254.104 332.37 li
254.104 335.85 li
253.114 335.85 li
253.114 328.56 li
f
261.314 333.1 mo
260.584 333.1 260.084 333.19 259.804 333.35 cv
259.524 333.52 259.384 333.8 259.384 334.2 cv
259.384 334.52 259.484 334.78 259.694 334.96 cv
259.904 335.15 260.194 335.24 260.554 335.24 cv
261.054 335.24 261.454 335.07 261.754 334.71 cv
262.054 334.36 262.204 333.89 262.204 333.3 cv
262.204 333.1 li
261.314 333.1 li
263.104 332.73 mo
263.104 335.85 li
262.204 335.85 li
262.204 335.02 li
261.994 335.36 261.734 335.6 261.434 335.75 cv
261.134 335.9 260.754 335.98 260.314 335.98 cv
259.754 335.98 259.304 335.83 258.974 335.52 cv
258.644 335.21 258.484 334.79 258.484 334.26 cv
258.484 333.65 258.684 333.19 259.104 332.87 cv
259.514 332.56 260.124 332.4 260.944 332.4 cv
262.204 332.4 li
262.204 332.31 li
262.204 331.9 262.064 331.58 261.794 331.35 cv
261.524 331.13 261.144 331.01 260.654 331.01 cv
260.334 331.01 260.034 331.05 259.734 331.13 cv
259.434 331.21 259.154 331.32 258.884 331.46 cv
258.884 330.63 li
259.204 330.51 259.524 330.41 259.834 330.35 cv
260.144 330.29 260.444 330.25 260.744 330.25 cv
261.534 330.25 262.124 330.46 262.514 330.87 cv
262.904 331.28 263.104 331.9 263.104 332.73 cv
f
264.954 330.38 mo
265.854 330.38 li
265.854 335.85 li
264.954 335.85 li
264.954 330.38 li
264.954 328.25 mo
265.854 328.25 li
265.854 329.39 li
264.954 329.39 li
264.954 328.25 li
f
267.734 328.25 mo
268.634 328.25 li
268.634 335.85 li
267.734 335.85 li
267.734 328.25 li
f
270.424 333.69 mo
270.424 330.38 li
271.324 330.38 li
271.324 333.66 li
271.324 334.18 271.424 334.56 271.624 334.82 cv
271.824 335.08 272.124 335.21 272.534 335.21 cv
273.014 335.21 273.404 335.06 273.684 334.75 cv
273.964 334.44 274.104 334.02 274.104 333.48 cv
274.104 330.38 li
275.004 330.38 li
275.004 335.85 li
274.104 335.85 li
274.104 335.01 li
273.884 335.35 273.624 335.59 273.344 335.75 cv
273.054 335.9 272.724 335.98 272.344 335.98 cv
271.714 335.98 271.234 335.79 270.914 335.4 cv
270.584 335.02 270.424 334.45 270.424 333.69 cv
272.684 330.25 mo
272.684 330.25 li
f
280.024 331.22 mo
279.924 331.16 279.814 331.12 279.694 331.09 cv
279.574 331.07 279.444 331.05 279.304 331.05 cv
278.794 331.05 278.404 331.22 278.134 331.55 cv
277.854 331.88 277.724 332.35 277.724 332.97 cv
277.724 335.85 li
276.824 335.85 li
276.824 330.38 li
277.724 330.38 li
277.724 331.23 li
277.904 330.9 278.154 330.65 278.454 330.49 cv
278.754 330.33 279.124 330.25 279.564 330.25 cv
279.774 330.26 li
279.844 330.27 279.924 330.28 280.024 330.3 cv
280.024 331.22 li
f
285.644 332.89 mo
285.644 333.33 li
281.514 333.33 li
281.554 333.95 281.734 334.43 282.074 334.75 cv
282.404 335.07 282.864 335.23 283.464 335.23 cv
283.804 335.23 284.144 335.19 284.464 335.11 cv
284.784 335.03 285.114 334.9 285.434 334.72 cv
285.434 335.57 li
285.114 335.71 284.784 335.82 284.444 335.88 cv
284.104 335.94 283.754 335.98 283.414 335.98 cv
282.534 335.98 281.844 335.73 281.334 335.23 cv
280.824 334.73 280.574 334.04 280.574 333.17 cv
280.574 332.28 280.814 331.57 281.294 331.04 cv
281.774 330.52 282.434 330.25 283.254 330.25 cv
283.994 330.25 284.574 330.49 285.004 330.96 cv
285.424 331.44 285.644 332.08 285.644 332.89 cv
284.744 332.63 mo
284.734 332.14 284.594 331.75 284.334 331.45 cv
284.064 331.16 283.704 331.01 283.264 331.01 cv
282.764 331.01 282.364 331.16 282.064 331.44 cv
281.764 331.72 281.584 332.12 281.544 332.63 cv
284.744 332.63 li
f
290.604 330.54 mo
290.604 331.39 li
290.344 331.27 290.084 331.17 289.814 331.1 cv
289.534 331.04 289.254 331 288.964 331 cv
288.514 331 288.174 331.07 287.954 331.21 cv
287.734 331.35 287.624 331.55 287.624 331.82 cv
287.624 332.03 287.704 332.19 287.864 332.31 cv
288.024 332.43 288.344 332.55 288.824 332.65 cv
289.134 332.72 li
289.774 332.86 290.224 333.06 290.494 333.3 cv
290.754 333.55 290.894 333.9 290.894 334.34 cv
290.894 334.85 290.694 335.25 290.294 335.54 cv
289.894 335.84 289.334 335.98 288.634 335.98 cv
288.334 335.98 288.034 335.95 287.714 335.9 cv
287.394 335.85 287.064 335.77 286.714 335.65 cv
286.714 334.72 li
287.044 334.9 287.374 335.03 287.694 335.11 cv
288.014 335.2 288.334 335.24 288.654 335.24 cv
289.074 335.24 289.404 335.17 289.634 335.03 cv
289.854 334.89 289.974 334.68 289.974 334.41 cv
289.974 334.17 289.884 333.98 289.724 333.85 cv
289.564 333.72 289.204 333.59 288.644 333.47 cv
288.334 333.4 li
287.774 333.28 287.364 333.1 287.124 332.86 cv
286.874 332.62 286.754 332.29 286.754 331.86 cv
286.754 331.35 286.934 330.95 287.294 330.67 cv
287.654 330.39 288.174 330.25 288.854 330.25 cv
289.184 330.25 289.494 330.28 289.794 330.33 cv
290.084 330.38 290.354 330.45 290.604 330.54 cv
f
57.6 307.584 mo
54.1 307.584 li
f
57.6 307.584 mo
54.1 307.584 li
@
47.4206 304.741 mo
46.9106 304.741 46.5306 304.991 46.2706 305.491 cv
46.0106 305.991 45.8906 306.741 45.8906 307.741 cv
45.8906 308.741 46.0106 309.491 46.2706 309.991 cv
46.5306 310.491 46.9106 310.741 47.4206 310.741 cv
47.9306 310.741 48.3106 310.491 48.5706 309.991 cv
48.8206 309.491 48.9506 308.741 48.9506 307.741 cv
48.9506 306.741 48.8206 305.991 48.5706 305.491 cv
48.3106 304.991 47.9306 304.741 47.4206 304.741 cv
47.4206 303.961 mo
48.2306 303.961 48.8506 304.291 49.2906 304.931 cv
49.7206 305.581 49.9406 306.521 49.9406 307.741 cv
49.9406 308.971 49.7206 309.911 49.2906 310.551 cv
48.8506 311.191 48.2306 311.511 47.4206 311.511 cv
46.6006 311.511 45.9706 311.191 45.5406 310.551 cv
45.1106 309.911 44.9006 308.971 44.9006 307.741 cv
44.9006 306.521 45.1106 305.581 45.5406 304.931 cv
45.9706 304.291 46.6006 303.961 47.4206 303.961 cv
f
57.6 276.677 mo
54.1 276.677 li
f
57.6 276.677 mo
54.1 276.677 li
@
45.3206 273.184 mo
49.1906 273.184 li
49.1906 274.014 li
46.2206 274.014 li
46.2206 275.804 li
46.3606 275.754 46.5106 275.714 46.6506 275.694 cv
46.7906 275.674 46.9406 275.654 47.0806 275.654 cv
47.8906 275.654 48.5306 275.884 49.0106 276.324 cv
49.4906 276.774 49.7306 277.374 49.7306 278.134 cv
49.7306 278.924 49.4806 279.534 48.9906 279.964 cv
48.5006 280.394 47.8106 280.604 46.9306 280.604 cv
46.6206 280.604 46.3106 280.574 45.9906 280.534 cv
45.6706 280.484 45.3506 280.414 45.0106 280.304 cv
45.0106 279.314 li
45.3006 279.474 45.6006 279.594 45.9206 279.674 cv
46.2306 279.754 46.5606 279.784 46.9106 279.784 cv
47.4706 279.784 47.9206 279.644 48.2506 279.344 cv
48.5706 279.044 48.7406 278.644 48.7406 278.134 cv
48.7406 277.634 48.5706 277.234 48.2506 276.934 cv
47.9206 276.634 47.4706 276.484 46.9106 276.484 cv
46.6506 276.484 46.3806 276.514 46.1206 276.574 cv
45.8606 276.634 45.5906 276.724 45.3206 276.844 cv
45.3206 273.184 li
f
57.6 245.769 mo
54.1 245.769 li
f
57.6 245.769 mo
54.1 245.769 li
@
39.1213 248.736 mo
40.7312 248.736 li
40.7312 243.176 li
38.9812 243.526 li
38.9812 242.626 li
40.7212 242.276 li
41.7113 242.276 li
41.7113 248.736 li
43.3213 248.736 li
43.3213 249.566 li
39.1213 249.566 li
39.1213 248.736 li
f
47.4213 242.926 mo
46.9113 242.926 46.5313 243.176 46.2713 243.676 cv
46.0113 244.176 45.8913 244.926 45.8913 245.926 cv
45.8913 246.926 46.0113 247.676 46.2713 248.176 cv
46.5313 248.676 46.9113 248.926 47.4213 248.926 cv
47.9313 248.926 48.3113 248.676 48.5713 248.176 cv
48.8213 247.676 48.9513 246.926 48.9513 245.926 cv
48.9513 244.926 48.8213 244.176 48.5713 243.676 cv
48.3113 243.176 47.9313 242.926 47.4213 242.926 cv
47.4213 242.146 mo
48.2313 242.146 48.8513 242.476 49.2913 243.116 cv
49.7213 243.766 49.9413 244.706 49.9413 245.926 cv
49.9413 247.156 49.7213 248.096 49.2913 248.736 cv
48.8513 249.376 48.2313 249.696 47.4213 249.696 cv
46.6013 249.696 45.9713 249.376 45.5413 248.736 cv
45.1113 248.096 44.9013 247.156 44.9013 245.926 cv
44.9013 244.706 45.1113 243.766 45.5413 243.116 cv
45.9713 242.476 46.6013 242.146 47.4213 242.146 cv
f
57.6 214.862 mo
54.1 214.862 li
f
57.6 214.862 mo
54.1 214.862 li
@
39.1213 217.829 mo
40.7312 217.829 li
40.7312 212.269 li
38.9812 212.619 li
38.9812 211.719 li
40.7212 211.369 li
41.7113 211.369 li
41.7113 217.829 li
43.3213 217.829 li
43.3213 218.659 li
39.1213 218.659 li
39.1213 217.829 li
f
45.3213 211.369 mo
49.1913 211.369 li
49.1913 212.199 li
46.2213 212.199 li
46.2213 213.989 li
46.3613 213.939 46.5113 213.899 46.6513 213.879 cv
46.7913 213.859 46.9413 213.839 47.0813 213.839 cv
47.8913 213.839 48.5313 214.069 49.0113 214.509 cv
49.4913 214.959 49.7313 215.559 49.7313 216.319 cv
49.7313 217.109 49.4813 217.719 48.9913 218.149 cv
48.5013 218.579 47.8113 218.789 46.9313 218.789 cv
46.6213 218.789 46.3113 218.759 45.9913 218.719 cv
45.6713 218.669 45.3513 218.599 45.0113 218.489 cv
45.0113 217.499 li
45.3013 217.659 45.6013 217.779 45.9213 217.859 cv
46.2313 217.939 46.5613 217.969 46.9113 217.969 cv
47.4713 217.969 47.9213 217.829 48.2513 217.529 cv
48.5713 217.229 48.7413 216.829 48.7413 216.319 cv
48.7413 215.819 48.5713 215.419 48.2513 215.119 cv
47.9213 214.819 47.4713 214.669 46.9113 214.669 cv
46.6513 214.669 46.3813 214.699 46.1213 214.759 cv
45.8613 214.819 45.5913 214.909 45.3213 215.029 cv
45.3213 211.369 li
f
57.6 183.955 mo
54.1 183.955 li
f
57.6 183.955 mo
54.1 183.955 li
@
39.8012 186.922 mo
43.2412 186.922 li
43.2412 187.752 li
38.6112 187.752 li
38.6112 186.922 li
38.9812 186.542 39.4912 186.022 40.1413 185.362 cv
40.7813 184.712 41.1912 184.292 41.3612 184.102 cv
41.6812 183.752 41.9012 183.452 42.0212 183.202 cv
42.1413 182.962 42.2113 182.712 42.2113 182.472 cv
42.2113 182.092 42.0713 181.772 41.8013 181.532 cv
41.5313 181.292 41.1812 181.162 40.7412 181.162 cv
40.4312 181.162 40.1012 181.222 39.7612 181.322 cv
39.4212 181.432 39.0512 181.592 38.6612 181.812 cv
38.6612 180.812 li
39.0612 180.652 39.4312 180.532 39.7712 180.452 cv
40.1112 180.372 40.4312 180.332 40.7212 180.332 cv
41.4712 180.332 42.0713 180.522 42.5212 180.902 cv
42.9712 181.282 43.2012 181.782 43.2012 182.412 cv
43.2012 182.712 43.1413 183.002 43.0313 183.262 cv
42.9212 183.532 42.7212 183.852 42.4212 184.212 cv
42.3412 184.312 42.0812 184.582 41.6413 185.032 cv
41.2012 185.482 40.5912 186.112 39.8012 186.922 cv
f
47.4213 181.112 mo
46.9113 181.112 46.5313 181.362 46.2713 181.862 cv
46.0113 182.362 45.8913 183.112 45.8913 184.112 cv
45.8913 185.112 46.0113 185.862 46.2713 186.362 cv
46.5313 186.862 46.9113 187.112 47.4213 187.112 cv
47.9313 187.112 48.3113 186.862 48.5713 186.362 cv
48.8213 185.862 48.9513 185.112 48.9513 184.112 cv
48.9513 183.112 48.8213 182.362 48.5713 181.862 cv
48.3113 181.362 47.9313 181.112 47.4213 181.112 cv
47.4213 180.332 mo
48.2313 180.332 48.8513 180.662 49.2913 181.302 cv
49.7213 181.952 49.9413 182.892 49.9413 184.112 cv
49.9413 185.342 49.7213 186.282 49.2913 186.922 cv
48.8513 187.562 48.2313 187.882 47.4213 187.882 cv
46.6013 187.882 45.9713 187.562 45.5413 186.922 cv
45.1113 186.282 44.9013 185.342 44.9013 184.112 cv
44.9013 182.892 45.1113 181.952 45.5413 181.302 cv
45.9713 180.662 46.6013 180.332 47.4213 180.332 cv
f
57.6 153.047 mo
54.1 153.047 li
f
57.6 153.047 mo
54.1 153.047 li
@
39.8012 156.014 mo
43.2412 156.014 li
43.2412 156.844 li
38.6112 156.844 li
38.6112 156.014 li
38.9812 155.634 39.4912 155.114 40.1413 154.454 cv
40.7813 153.804 41.1912 153.384 41.3612 153.194 cv
41.6812 152.844 41.9012 152.544 42.0212 152.294 cv
42.1413 152.054 42.2113 151.804 42.2113 151.564 cv
42.2113 151.184 42.0713 150.864 41.8013 150.624 cv
41.5313 150.384 41.1812 150.254 40.7412 150.254 cv
40.4312 150.254 40.1012 150.314 39.7612 150.414 cv
39.4212 150.524 39.0512 150.684 38.6612 150.904 cv
38.6612 149.904 li
39.0612 149.744 39.4312 149.624 39.7712 149.544 cv
40.1112 149.464 40.4312 149.424 40.7212 149.424 cv
41.4712 149.424 42.0713 149.614 42.5212 149.994 cv
42.9712 150.374 43.2012 150.874 43.2012 151.504 cv
43.2012 151.804 43.1413 152.094 43.0313 152.354 cv
42.9212 152.624 42.7212 152.944 42.4212 153.304 cv
42.3412 153.404 42.0812 153.674 41.6413 154.124 cv
41.2012 154.574 40.5912 155.204 39.8012 156.014 cv
f
45.3213 149.554 mo
49.1913 149.554 li
49.1913 150.384 li
46.2213 150.384 li
46.2213 152.174 li
46.3613 152.124 46.5113 152.084 46.6513 152.064 cv
46.7913 152.044 46.9413 152.024 47.0813 152.024 cv
47.8913 152.024 48.5313 152.254 49.0113 152.694 cv
49.4913 153.144 49.7313 153.744 49.7313 154.504 cv
49.7313 155.294 49.4813 155.904 48.9913 156.334 cv
48.5013 156.764 47.8113 156.974 46.9313 156.974 cv
46.6213 156.974 46.3113 156.944 45.9913 156.904 cv
45.6713 156.854 45.3513 156.784 45.0113 156.674 cv
45.0113 155.684 li
45.3013 155.844 45.6013 155.964 45.9213 156.044 cv
46.2313 156.124 46.5613 156.154 46.9113 156.154 cv
47.4713 156.154 47.9213 156.014 48.2513 155.714 cv
48.5713 155.414 48.7413 155.014 48.7413 154.504 cv
48.7413 154.004 48.5713 153.604 48.2513 153.304 cv
47.9213 153.004 47.4713 152.854 46.9113 152.854 cv
46.6513 152.854 46.3813 152.884 46.1213 152.944 cv
45.8613 153.004 45.5913 153.094 45.3213 153.214 cv
45.3213 149.554 li
f
57.6 122.14 mo
54.1 122.14 li
f
57.6 122.14 mo
54.1 122.14 li
@
41.9412 122.007 mo
42.4112 122.107 42.7813 122.317 43.0412 122.637 cv
43.3013 122.957 43.4412 123.357 43.4412 123.817 cv
43.4412 124.537 43.1912 125.097 42.7012 125.487 cv
42.2012 125.877 41.5012 126.067 40.5912 126.067 cv
40.2813 126.067 39.9613 126.037 39.6412 125.977 cv
39.3212 125.927 38.9812 125.837 38.6412 125.717 cv
38.6412 124.767 li
38.9112 124.927 39.2113 125.047 39.5412 125.127 cv
39.8612 125.207 40.2012 125.247 40.5612 125.247 cv
41.1812 125.247 41.6512 125.127 41.9712 124.887 cv
42.2912 124.647 42.4613 124.287 42.4613 123.817 cv
42.4613 123.397 42.3112 123.057 42.0112 122.817 cv
41.7113 122.577 41.2912 122.447 40.7512 122.447 cv
39.9012 122.447 li
39.9012 121.637 li
40.7912 121.637 li
41.2712 121.637 41.6413 121.547 41.9012 121.347 cv
42.1612 121.157 42.2912 120.877 42.2912 120.507 cv
42.2912 120.137 42.1512 119.847 41.8913 119.647 cv
41.6213 119.447 41.2412 119.347 40.7512 119.347 cv
40.4812 119.347 40.1912 119.377 39.8812 119.437 cv
39.5712 119.497 39.2312 119.587 38.8612 119.707 cv
38.8612 118.827 li
39.2312 118.727 39.5812 118.647 39.9112 118.597 cv
40.2312 118.547 40.5412 118.517 40.8412 118.517 cv
41.5812 118.517 42.1712 118.687 42.6112 119.027 cv
43.0513 119.367 43.2712 119.827 43.2712 120.407 cv
43.2712 120.807 43.1512 121.147 42.9212 121.427 cv
42.6912 121.707 42.3612 121.907 41.9412 122.007 cv
f
47.4213 119.297 mo
46.9113 119.297 46.5313 119.547 46.2713 120.047 cv
46.0113 120.547 45.8913 121.297 45.8913 122.297 cv
45.8913 123.297 46.0113 124.047 46.2713 124.547 cv
46.5313 125.047 46.9113 125.297 47.4213 125.297 cv
47.9313 125.297 48.3113 125.047 48.5713 124.547 cv
48.8213 124.047 48.9513 123.297 48.9513 122.297 cv
48.9513 121.297 48.8213 120.547 48.5713 120.047 cv
48.3113 119.547 47.9313 119.297 47.4213 119.297 cv
47.4213 118.517 mo
48.2313 118.517 48.8513 118.847 49.2913 119.487 cv
49.7213 120.137 49.9413 121.077 49.9413 122.297 cv
49.9413 123.527 49.7213 124.467 49.2913 125.107 cv
48.8513 125.747 48.2313 126.067 47.4213 126.067 cv
46.6013 126.067 45.9713 125.747 45.5413 125.107 cv
45.1113 124.467 44.9013 123.527 44.9013 122.297 cv
44.9013 121.077 45.1113 120.137 45.5413 119.487 cv
45.9713 118.847 46.6013 118.517 47.4213 118.517 cv
f
57.6 91.2328 mo
54.1 91.2328 li
f
57.6 91.2328 mo
54.1 91.2328 li
@
41.9412 91.0997 mo
42.4112 91.1997 42.7813 91.4097 43.0412 91.7297 cv
43.3013 92.0497 43.4412 92.4497 43.4412 92.9097 cv
43.4412 93.6297 43.1912 94.1897 42.7012 94.5797 cv
42.2012 94.9697 41.5012 95.1597 40.5912 95.1597 cv
40.2813 95.1597 39.9613 95.1297 39.6412 95.0697 cv
39.3212 95.0197 38.9812 94.9297 38.6412 94.8097 cv
38.6412 93.8597 li
38.9112 94.0197 39.2113 94.1397 39.5412 94.2197 cv
39.8612 94.2997 40.2012 94.3397 40.5612 94.3397 cv
41.1812 94.3397 41.6512 94.2197 41.9712 93.9797 cv
42.2912 93.7397 42.4613 93.3797 42.4613 92.9097 cv
42.4613 92.4897 42.3112 92.1497 42.0112 91.9097 cv
41.7113 91.6697 41.2912 91.5397 40.7512 91.5397 cv
39.9012 91.5397 li
39.9012 90.7297 li
40.7912 90.7297 li
41.2712 90.7297 41.6413 90.6397 41.9012 90.4397 cv
42.1612 90.2497 42.2912 89.9697 42.2912 89.5997 cv
42.2912 89.2297 42.1512 88.9397 41.8913 88.7397 cv
41.6213 88.5397 41.2412 88.4397 40.7512 88.4397 cv
40.4812 88.4397 40.1912 88.4697 39.8812 88.5297 cv
39.5712 88.5897 39.2312 88.6797 38.8612 88.7997 cv
38.8612 87.9197 li
39.2312 87.8197 39.5812 87.7397 39.9112 87.6897 cv
40.2312 87.6397 40.5412 87.6097 40.8412 87.6097 cv
41.5812 87.6097 42.1712 87.7797 42.6112 88.1197 cv
43.0513 88.4597 43.2712 88.9197 43.2712 89.4997 cv
43.2712 89.8997 43.1512 90.2397 42.9212 90.5197 cv
42.6912 90.7997 42.3612 90.9997 41.9412 91.0997 cv
f
45.3213 87.7397 mo
49.1913 87.7397 li
49.1913 88.5697 li
46.2213 88.5697 li
46.2213 90.3597 li
46.3613 90.3097 46.5113 90.2697 46.6513 90.2497 cv
46.7913 90.2297 46.9413 90.2097 47.0813 90.2097 cv
47.8913 90.2097 48.5313 90.4397 49.0113 90.8797 cv
49.4913 91.3297 49.7313 91.9297 49.7313 92.6897 cv
49.7313 93.4797 49.4813 94.0897 48.9913 94.5197 cv
48.5013 94.9497 47.8113 95.1597 46.9313 95.1597 cv
46.6213 95.1597 46.3113 95.1297 45.9913 95.0897 cv
45.6713 95.0397 45.3513 94.9697 45.0113 94.8597 cv
45.0113 93.8697 li
45.3013 94.0297 45.6013 94.1497 45.9213 94.2297 cv
46.2313 94.3097 46.5613 94.3397 46.9113 94.3397 cv
47.4713 94.3397 47.9213 94.1997 48.2513 93.8997 cv
48.5713 93.5997 48.7413 93.1997 48.7413 92.6897 cv
48.7413 92.1897 48.5713 91.7897 48.2513 91.4897 cv
47.9213 91.1897 47.4713 91.0397 46.9113 91.0397 cv
46.6513 91.0397 46.3813 91.0697 46.1213 91.1297 cv
45.8613 91.1897 45.5913 91.2797 45.3213 91.3997 cv
45.3213 87.7397 li
f
57.6 60.3255 mo
54.1 60.3255 li
f
57.6 60.3255 mo
54.1 60.3255 li
@
41.6612 57.6923 mo
39.1712 61.5823 li
41.6612 61.5823 li
41.6612 57.6923 li
41.4012 56.8323 mo
42.6413 56.8323 li
42.6413 61.5823 li
43.6812 61.5823 li
43.6812 62.4023 li
42.6413 62.4023 li
42.6413 64.1223 li
41.6612 64.1223 li
41.6612 62.4023 li
38.3713 62.4023 li
38.3713 61.4523 li
41.4012 56.8323 li
f
47.4213 57.4823 mo
46.9113 57.4823 46.5313 57.7323 46.2713 58.2323 cv
46.0113 58.7323 45.8913 59.4823 45.8913 60.4823 cv
45.8913 61.4823 46.0113 62.2323 46.2713 62.7323 cv
46.5313 63.2323 46.9113 63.4823 47.4213 63.4823 cv
47.9313 63.4823 48.3113 63.2323 48.5713 62.7323 cv
48.8213 62.2323 48.9513 61.4823 48.9513 60.4823 cv
48.9513 59.4823 48.8213 58.7323 48.5713 58.2323 cv
48.3113 57.7323 47.9313 57.4823 47.4213 57.4823 cv
47.4213 56.7023 mo
48.2313 56.7023 48.8513 57.0323 49.2913 57.6723 cv
49.7213 58.3223 49.9413 59.2623 49.9413 60.4823 cv
49.9413 61.7123 49.7213 62.6523 49.2913 63.2923 cv
48.8513 63.9323 48.2313 64.2523 47.4213 64.2523 cv
46.6013 64.2523 45.9713 63.9323 45.5413 63.2923 cv
45.1113 62.6523 44.9013 61.7123 44.9013 60.4823 cv
44.9013 59.2623 45.1113 58.3223 45.5413 57.6723 cv
45.9713 57.0323 46.6013 56.7023 47.4213 56.7023 cv
f
25.4831 242.71 mo
29.1131 244.05 li
29.1131 241.37 li
25.4831 242.71 li
24.5131 243.27 mo
24.5131 242.15 li
31.8031 239.37 li
31.8031 240.4 li
29.9331 241.06 li
29.9331 244.35 li
31.8031 245.01 li
31.8031 246.05 li
24.5131 243.27 li
f
26.3331 238.99 mo
26.3331 238.04 li
30.9231 236.33 li
26.3331 234.62 li
26.3331 233.67 li
31.8031 235.72 li
31.8031 236.94 li
26.3331 238.99 li
f
28.8431 227.75 mo
29.2831 227.75 li
29.2831 231.88 li
29.9031 231.84 30.3831 231.66 30.7031 231.32 cv
31.0231 230.99 31.1831 230.53 31.1831 229.93 cv
31.1831 229.59 31.1431 229.25 31.0631 228.93 cv
30.9831 228.61 30.8531 228.28 30.6731 227.96 cv
31.5231 227.96 li
31.6631 228.28 31.7731 228.61 31.8331 228.95 cv
31.8931 229.29 31.9331 229.64 31.9331 229.98 cv
31.9331 230.86 31.6831 231.55 31.1831 232.06 cv
30.6831 232.57 29.9931 232.82 29.1231 232.82 cv
28.2331 232.82 27.5231 232.58 26.9931 232.1 cv
26.4731 231.62 26.2031 230.96 26.2031 230.14 cv
26.2031 229.4 26.4431 228.82 26.9131 228.39 cv
27.3931 227.97 28.0331 227.75 28.8431 227.75 cv
28.5831 228.65 mo
28.0931 228.66 27.7031 228.8 27.4031 229.06 cv
27.1131 229.33 26.9631 229.69 26.9631 230.13 cv
26.9631 230.63 27.1131 231.03 27.3931 231.33 cv
27.6731 231.63 28.0731 231.81 28.5831 231.85 cv
28.5831 228.65 li
f
27.1731 223.11 mo
27.1131 223.21 27.0731 223.32 27.0431 223.44 cv
27.0231 223.56 27.0031 223.69 27.0031 223.83 cv
27.0031 224.34 27.1731 224.73 27.5031 225 cv
27.8331 225.28 28.3031 225.41 28.9231 225.41 cv
31.8031 225.41 li
31.8031 226.31 li
26.3331 226.31 li
26.3331 225.41 li
27.1831 225.41 li
26.8531 225.23 26.6031 224.98 26.4431 224.68 cv
26.2831 224.38 26.2031 224.01 26.2031 223.57 cv
26.2131 223.36 li
26.2231 223.29 26.2331 223.21 26.2531 223.11 cv
27.1731 223.11 li
f
29.0531 219.68 mo
29.0531 220.41 29.1431 220.91 29.3031 221.19 cv
29.4731 221.47 29.7531 221.61 30.1531 221.61 cv
30.4731 221.61 30.7331 221.51 30.9131 221.3 cv
31.1031 221.09 31.1931 220.8 31.1931 220.44 cv
31.1931 219.94 31.0231 219.54 30.6631 219.24 cv
30.3131 218.94 29.8431 218.79 29.2531 218.79 cv
29.0531 218.79 li
29.0531 219.68 li
28.6831 217.89 mo
31.8031 217.89 li
31.8031 218.79 li
30.9731 218.79 li
31.3131 219 31.5531 219.26 31.7031 219.56 cv
31.8531 219.86 31.9331 220.24 31.9331 220.68 cv
31.9331 221.24 31.7831 221.69 31.4731 222.02 cv
31.1631 222.35 30.7431 222.51 30.2131 222.51 cv
29.6031 222.51 29.1431 222.31 28.8231 221.89 cv
28.5131 221.48 28.3531 220.87 28.3531 220.05 cv
28.3531 218.79 li
28.2631 218.79 li
27.8531 218.79 27.5331 218.93 27.3031 219.2 cv
27.0831 219.47 26.9631 219.85 26.9631 220.34 cv
26.9631 220.66 27.0031 220.96 27.0831 221.26 cv
27.1631 221.56 27.2731 221.84 27.4131 222.11 cv
26.5831 222.11 li
26.4631 221.79 26.3631 221.47 26.3031 221.16 cv
26.2431 220.85 26.2031 220.55 26.2031 220.25 cv
26.2031 219.46 26.4131 218.87 26.8231 218.48 cv
27.2331 218.09 27.8531 217.89 28.6831 217.89 cv
f
29.0031 212.439 mo
28.3631 212.439 27.8531 212.579 27.4931 212.839 cv
27.1331 213.109 26.9531 213.489 26.9531 213.969 cv
26.9531 214.449 27.1331 214.829 27.4931 215.099 cv
27.8531 215.369 28.3631 215.499 29.0031 215.499 cv
29.6531 215.499 30.1531 215.369 30.5131 215.099 cv
30.8731 214.829 31.0531 214.449 31.0531 213.969 cv
31.0531 213.489 30.8731 213.109 30.5131 212.839 cv
30.1531 212.579 29.6531 212.439 29.0031 212.439 cv
31.1231 211.539 mo
32.0431 211.539 32.7331 211.749 33.1931 212.159 cv
33.6431 212.579 33.8731 213.209 33.8731 214.059 cv
33.8731 214.379 33.8431 214.669 33.8031 214.949 cv
33.7531 215.229 33.6831 215.509 33.5831 215.769 cv
32.7131 215.769 li
32.8531 215.509 32.9531 215.249 33.0231 214.989 cv
33.0931 214.729 33.1331 214.469 33.1331 214.199 cv
33.1331 213.619 32.9731 213.179 32.6731 212.879 cv
32.3631 212.589 31.9031 212.439 31.2831 212.439 cv
30.8431 212.439 li
31.1631 212.629 31.4031 212.869 31.5631 213.159 cv
31.7231 213.449 31.8031 213.789 31.8031 214.189 cv
31.8031 214.869 31.5531 215.409 31.0431 215.819 cv
30.5331 216.229 29.8531 216.429 29.0031 216.429 cv
28.1631 216.429 27.4831 216.229 26.9731 215.819 cv
26.4631 215.409 26.2031 214.869 26.2031 214.189 cv
26.2031 213.789 26.2831 213.449 26.4431 213.159 cv
26.6031 212.869 26.8431 212.629 27.1631 212.439 cv
26.3331 212.439 li
26.3331 211.539 li
31.1231 211.539 li
f
28.8431 205.01 mo
29.2831 205.01 li
29.2831 209.14 li
29.9031 209.1 30.3831 208.92 30.7031 208.58 cv
31.0231 208.25 31.1831 207.79 31.1831 207.19 cv
31.1831 206.85 31.1431 206.51 31.0631 206.19 cv
30.9831 205.87 30.8531 205.54 30.6731 205.22 cv
31.5231 205.22 li
31.6631 205.54 31.7731 205.87 31.8331 206.21 cv
31.8931 206.55 31.9331 206.9 31.9331 207.24 cv
31.9331 208.12 31.6831 208.81 31.1831 209.32 cv
30.6831 209.83 29.9931 210.08 29.1231 210.08 cv
28.2331 210.08 27.5231 209.84 26.9931 209.36 cv
26.4731 208.88 26.2031 208.22 26.2031 207.4 cv
26.2031 206.66 26.4431 206.08 26.9131 205.65 cv
27.3931 205.23 28.0331 205.01 28.8431 205.01 cv
28.5831 205.91 mo
28.0931 205.92 27.7031 206.06 27.4031 206.32 cv
27.1131 206.59 26.9631 206.95 26.9631 207.39 cv
26.9631 207.89 27.1131 208.29 27.3931 208.59 cv
27.6731 208.89 28.0731 209.07 28.5831 209.11 cv
28.5831 205.91 li
f
25.0731 194.86 mo
26.1131 194.86 li
25.8131 195.2 25.5831 195.55 25.4231 195.93 cv
25.2731 196.31 25.1931 196.7 25.1931 197.12 cv
25.1931 197.96 25.4531 198.6 25.9631 199.04 cv
26.4731 199.48 27.2031 199.7 28.1631 199.7 cv
29.1231 199.7 29.8631 199.48 30.3731 199.04 cv
30.8831 198.6 31.1331 197.96 31.1331 197.12 cv
31.1331 196.7 31.0631 196.31 30.9031 195.93 cv
30.7531 195.55 30.5231 195.2 30.2131 194.86 cv
31.2431 194.86 li
31.4831 195.21 31.6531 195.58 31.7631 195.96 cv
31.8731 196.34 31.9331 196.75 31.9331 197.18 cv
31.9331 198.28 31.6031 199.15 30.9331 199.79 cv
30.2631 200.43 29.3431 200.74 28.1631 200.74 cv
26.9931 200.74 26.0731 200.43 25.3931 199.79 cv
24.7231 199.15 24.3831 198.28 24.3831 197.18 cv
24.3831 196.74 24.4431 196.33 24.5531 195.95 cv
24.6731 195.57 24.8431 195.2 25.0731 194.86 cv
f
25.3231 192.35 mo
28.0631 192.35 li
28.0631 191.11 li
28.0631 190.65 27.9531 190.3 27.7131 190.05 cv
27.4731 189.8 27.1331 189.67 26.6931 189.67 cv
26.2531 189.67 25.9231 189.8 25.6831 190.05 cv
25.4431 190.3 25.3231 190.65 25.3231 191.11 cv
25.3231 192.35 li
24.5131 193.34 mo
24.5131 191.11 li
24.5131 190.3 24.7031 189.68 25.0731 189.26 cv
25.4431 188.84 25.9831 188.63 26.6931 188.63 cv
27.4131 188.63 27.9631 188.84 28.3231 189.26 cv
28.6931 189.68 28.8731 190.3 28.8731 191.11 cv
28.8731 192.35 li
31.8031 192.35 li
31.8031 193.34 li
24.5131 193.34 li
f
24.5131 187.42 mo
24.5131 186.43 li
28.9431 186.43 li
29.7231 186.43 30.2931 186.29 30.6331 186.01 cv
30.9731 185.73 31.1431 185.27 31.1431 184.63 cv
31.1431 184 30.9731 183.54 30.6331 183.26 cv
30.2931 182.98 29.7231 182.83 28.9431 182.83 cv
24.5131 182.83 li
24.5131 181.84 li
29.0631 181.84 li
30.0231 181.84 30.7331 182.08 31.2131 182.55 cv
31.6931 183.02 31.9331 183.71 31.9331 184.63 cv
31.9331 185.55 31.6931 186.25 31.2131 186.72 cv
30.7331 187.19 30.0231 187.42 29.0631 187.42 cv
24.5131 187.42 li
f
24.5131 176.92 mo
24.5131 175.93 li
28.9431 175.93 li
29.7231 175.93 30.2931 175.79 30.6331 175.51 cv
30.9731 175.23 31.1431 174.77 31.1431 174.13 cv
31.1431 173.5 30.9731 173.04 30.6331 172.76 cv
30.2931 172.48 29.7231 172.33 28.9431 172.33 cv
24.5131 172.33 li
24.5131 171.34 li
29.0631 171.34 li
30.0231 171.34 30.7331 171.58 31.2131 172.05 cv
31.6931 172.52 31.9331 173.21 31.9331 174.13 cv
31.9331 175.05 31.6931 175.75 31.2131 176.22 cv
30.7331 176.69 30.0231 176.92 29.0631 176.92 cv
24.5131 176.92 li
f
26.4931 166.04 mo
27.3431 166.04 li
27.2231 166.3 27.1231 166.56 27.0531 166.83 cv
26.9931 167.11 26.9531 167.39 26.9531 167.68 cv
26.9531 168.13 27.0231 168.47 27.1631 168.69 cv
27.3031 168.91 27.5031 169.02 27.7731 169.02 cv
27.9831 169.02 28.1431 168.94 28.2631 168.78 cv
28.3831 168.62 28.5031 168.3 28.6031 167.82 cv
28.6731 167.51 li
28.8131 166.87 29.0131 166.42 29.2531 166.15 cv
29.5031 165.89 29.8531 165.75 30.2931 165.75 cv
30.8031 165.75 31.2031 165.95 31.4931 166.35 cv
31.7931 166.75 31.9331 167.31 31.9331 168.01 cv
31.9331 168.31 31.9031 168.61 31.8531 168.93 cv
31.8031 169.25 31.7231 169.58 31.6031 169.93 cv
30.6731 169.93 li
30.8531 169.6 30.9831 169.27 31.0631 168.95 cv
31.1531 168.63 31.1931 168.31 31.1931 167.99 cv
31.1931 167.57 31.1231 167.24 30.9831 167.01 cv
30.8431 166.79 30.6331 166.67 30.3631 166.67 cv
30.1231 166.67 29.9331 166.76 29.8031 166.92 cv
29.6731 167.08 29.5431 167.44 29.4231 168 cv
29.3531 168.31 li
29.2331 168.87 29.0531 169.28 28.8131 169.52 cv
28.5731 169.77 28.2431 169.89 27.8131 169.89 cv
27.3031 169.89 26.9031 169.71 26.6231 169.35 cv
26.3431 168.99 26.2031 168.47 26.2031 167.79 cv
26.2031 167.46 26.2331 167.15 26.2831 166.85 cv
26.3331 166.56 26.4031 166.29 26.4931 166.04 cv
f
29.0531 161.83 mo
29.0531 162.56 29.1431 163.06 29.3031 163.34 cv
29.4731 163.62 29.7531 163.76 30.1531 163.76 cv
30.4731 163.76 30.7331 163.66 30.9131 163.45 cv
31.1031 163.24 31.1931 162.95 31.1931 162.59 cv
31.1931 162.09 31.0231 161.69 30.6631 161.39 cv
30.3131 161.09 29.8431 160.94 29.2531 160.94 cv
29.0531 160.94 li
29.0531 161.83 li
28.6831 160.04 mo
31.8031 160.04 li
31.8031 160.94 li
30.9731 160.94 li
31.3131 161.15 31.5531 161.41 31.7031 161.71 cv
31.8531 162.01 31.9331 162.39 31.9331 162.83 cv
31.9331 163.39 31.7831 163.84 31.4731 164.17 cv
31.1631 164.5 30.7431 164.66 30.2131 164.66 cv
29.6031 164.66 29.1431 164.46 28.8231 164.04 cv
28.5131 163.63 28.3531 163.02 28.3531 162.2 cv
28.3531 160.94 li
28.2631 160.94 li
27.8531 160.94 27.5331 161.08 27.3031 161.35 cv
27.0831 161.62 26.9631 162 26.9631 162.49 cv
26.9631 162.81 27.0031 163.11 27.0831 163.41 cv
27.1631 163.71 27.2731 163.99 27.4131 164.26 cv
26.5831 164.26 li
26.4631 163.94 26.3631 163.62 26.3031 163.31 cv
26.2431 163 26.2031 162.7 26.2031 162.4 cv
26.2031 161.61 26.4131 161.02 26.8231 160.63 cv
27.2331 160.24 27.8531 160.04 28.6831 160.04 cv
f
29.0031 154.59 mo
28.3631 154.59 27.8531 154.73 27.4931 154.99 cv
27.1331 155.26 26.9531 155.64 26.9531 156.12 cv
26.9531 156.6 27.1331 156.98 27.4931 157.25 cv
27.8531 157.52 28.3631 157.65 29.0031 157.65 cv
29.6531 157.65 30.1531 157.52 30.5131 157.25 cv
30.8731 156.98 31.0531 156.6 31.0531 156.12 cv
31.0531 155.64 30.8731 155.26 30.5131 154.99 cv
30.1531 154.73 29.6531 154.59 29.0031 154.59 cv
31.1231 153.69 mo
32.0431 153.69 32.7331 153.9 33.1931 154.31 cv
33.6431 154.73 33.8731 155.36 33.8731 156.21 cv
33.8731 156.53 33.8431 156.82 33.8031 157.1 cv
33.7531 157.38 33.6831 157.66 33.5831 157.92 cv
32.7131 157.92 li
32.8531 157.66 32.9531 157.4 33.0231 157.14 cv
33.0931 156.88 33.1331 156.62 33.1331 156.35 cv
33.1331 155.77 32.9731 155.33 32.6731 155.03 cv
32.3631 154.74 31.9031 154.59 31.2831 154.59 cv
30.8431 154.59 li
31.1631 154.78 31.4031 155.02 31.5631 155.31 cv
31.7231 155.6 31.8031 155.94 31.8031 156.34 cv
31.8031 157.02 31.5531 157.56 31.0431 157.97 cv
30.5331 158.38 29.8531 158.58 29.0031 158.58 cv
28.1631 158.58 27.4831 158.38 26.9731 157.97 cv
26.4631 157.56 26.2031 157.02 26.2031 156.34 cv
26.2031 155.94 26.2831 155.6 26.4431 155.31 cv
26.6031 155.02 26.8431 154.78 27.1631 154.59 cv
26.3331 154.59 li
26.3331 153.69 li
31.1231 153.69 li
f
28.8431 147.16 mo
29.2831 147.16 li
29.2831 151.29 li
29.9031 151.25 30.3831 151.07 30.7031 150.73 cv
31.0231 150.4 31.1831 149.94 31.1831 149.34 cv
31.1831 149 31.1431 148.66 31.0631 148.34 cv
30.9831 148.02 30.8531 147.69 30.6731 147.37 cv
31.5231 147.37 li
31.6631 147.69 31.7731 148.02 31.8331 148.36 cv
31.8931 148.7 31.9331 149.05 31.9331 149.39 cv
31.9331 150.27 31.6831 150.96 31.1831 151.47 cv
30.6831 151.98 29.9931 152.23 29.1231 152.23 cv
28.2331 152.23 27.5231 151.99 26.9931 151.51 cv
26.4731 151.03 26.2031 150.37 26.2031 149.55 cv
26.2031 148.81 26.4431 148.23 26.9131 147.8 cv
27.3931 147.38 28.0331 147.16 28.8431 147.16 cv
28.5831 148.06 mo
28.0931 148.07 27.7031 148.21 27.4031 148.47 cv
27.1131 148.74 26.9631 149.1 26.9631 149.54 cv
26.9631 150.04 27.1131 150.44 27.3931 150.74 cv
27.6731 151.04 28.0731 151.22 28.5831 151.26 cv
28.5831 148.06 li
f
28.3831 139.01 mo
28.4631 138.8 28.6131 138.59 28.8431 138.39 cv
29.0831 138.19 29.4031 137.99 29.8131 137.79 cv
31.8031 136.79 li
31.8031 137.85 li
29.9331 138.78 li
29.4531 139.02 29.1231 139.26 28.9631 139.48 cv
28.8031 139.71 28.7231 140.02 28.7231 140.41 cv
28.7231 141.48 li
31.8031 141.48 li
31.8031 142.47 li
24.5131 142.47 li
24.5131 140.24 li
24.5131 139.41 24.6931 138.79 25.0331 138.38 cv
25.3831 137.97 25.9131 137.76 26.6131 137.76 cv
27.0731 137.76 27.4631 137.87 27.7631 138.08 cv
28.0631 138.3 28.2731 138.61 28.3831 139.01 cv
25.3231 141.48 mo
27.9131 141.48 li
27.9131 140.24 li
27.9131 139.77 27.8031 139.41 27.5831 139.17 cv
27.3631 138.93 27.0431 138.8 26.6131 138.8 cv
26.1931 138.8 25.8731 138.93 25.6531 139.17 cv
25.4331 139.41 25.3231 139.77 25.3231 140.24 cv
25.3231 141.48 li
f
29.0531 133.07 mo
29.0531 133.8 29.1431 134.3 29.3031 134.58 cv
29.4731 134.86 29.7531 135 30.1531 135 cv
30.4731 135 30.7331 134.9 30.9131 134.69 cv
31.1031 134.48 31.1931 134.19 31.1931 133.83 cv
31.1931 133.33 31.0231 132.93 30.6631 132.63 cv
30.3131 132.33 29.8431 132.18 29.2531 132.18 cv
29.0531 132.18 li
29.0531 133.07 li
28.6831 131.28 mo
31.8031 131.28 li
31.8031 132.18 li
30.9731 132.18 li
31.3131 132.39 31.5531 132.65 31.7031 132.95 cv
31.8531 133.25 31.9331 133.63 31.9331 134.07 cv
31.9331 134.63 31.7831 135.08 31.4731 135.41 cv
31.1631 135.74 30.7431 135.9 30.2131 135.9 cv
29.6031 135.9 29.1431 135.7 28.8231 135.28 cv
28.5131 134.87 28.3531 134.26 28.3531 133.44 cv
28.3531 132.18 li
28.2631 132.18 li
27.8531 132.18 27.5331 132.32 27.3031 132.59 cv
27.0831 132.86 26.9631 133.24 26.9631 133.73 cv
26.9631 134.05 27.0031 134.35 27.0831 134.65 cv
27.1631 134.95 27.2731 135.23 27.4131 135.5 cv
26.5831 135.5 li
26.4631 135.18 26.3631 134.86 26.3031 134.55 cv
26.2431 134.24 26.2031 133.94 26.2031 133.64 cv
26.2031 132.85 26.4131 132.26 26.8231 131.87 cv
27.2331 131.48 27.8531 131.28 28.6831 131.28 cv
f
24.7831 128.54 mo
26.3331 128.54 li
26.3331 126.69 li
27.0331 126.69 li
27.0331 128.54 li
30.0031 128.54 li
30.4531 128.54 30.7431 128.48 30.8631 128.36 cv
30.9931 128.24 31.0531 127.99 31.0531 127.61 cv
31.0531 126.69 li
31.8031 126.69 li
31.8031 127.61 li
31.8031 128.31 31.6731 128.79 31.4131 129.05 cv
31.1531 129.31 30.6831 129.44 30.0031 129.44 cv
27.0331 129.44 li
27.0331 130.1 li
26.3331 130.1 li
26.3331 129.44 li
24.7831 129.44 li
24.7831 128.54 li
f
28.8431 120.83 mo
29.2831 120.83 li
29.2831 124.96 li
29.9031 124.92 30.3831 124.74 30.7031 124.4 cv
31.0231 124.07 31.1831 123.61 31.1831 123.01 cv
31.1831 122.67 31.1431 122.33 31.0631 122.01 cv
30.9831 121.69 30.8531 121.36 30.6731 121.04 cv
31.5231 121.04 li
31.6631 121.36 31.7731 121.69 31.8331 122.03 cv
31.8931 122.37 31.9331 122.72 31.9331 123.06 cv
31.9331 123.94 31.6831 124.63 31.1831 125.14 cv
30.6831 125.65 29.9931 125.9 29.1231 125.9 cv
28.2331 125.9 27.5231 125.66 26.9931 125.18 cv
26.4731 124.7 26.2031 124.04 26.2031 123.22 cv
26.2031 122.48 26.4431 121.9 26.9131 121.47 cv
27.3931 121.05 28.0331 120.83 28.8431 120.83 cv
28.5831 121.73 mo
28.0931 121.74 27.7031 121.88 27.4031 122.14 cv
27.1131 122.41 26.9631 122.77 26.9631 123.21 cv
26.9631 123.71 27.1131 124.11 27.3931 124.41 cv
27.6731 124.71 28.0731 124.89 28.5831 124.93 cv
28.5831 121.73 li
f
24.2131 117.2 mo
24.9731 117.64 25.7131 117.96 26.4431 118.17 cv
27.1731 118.39 27.9131 118.49 28.6631 118.49 cv
29.4231 118.49 30.1631 118.39 30.8931 118.17 cv
31.6331 117.96 32.3631 117.64 33.1131 117.2 cv
33.1131 117.98 li
32.3431 118.47 31.6031 118.84 30.8631 119.08 cv
30.1231 119.32 29.3931 119.44 28.6631 119.44 cv
27.9431 119.44 27.2131 119.32 26.4731 119.08 cv
25.7331 118.84 24.9831 118.48 24.2131 117.98 cv
24.2131 117.2 li
f
28.5931 109.13 mo
28.5931 109.41 28.7131 109.64 28.9531 109.8 cv
29.1931 109.96 29.5331 110.04 29.9631 110.04 cv
30.3831 110.04 30.7231 109.96 30.9631 109.8 cv
31.2031 109.64 31.3231 109.41 31.3231 109.13 cv
31.3231 108.85 31.2031 108.63 30.9631 108.47 cv
30.7231 108.31 30.3831 108.23 29.9631 108.23 cv
29.5431 108.23 29.2031 108.31 28.9631 108.47 cv
28.7231 108.63 28.5931 108.85 28.5931 109.13 cv
27.9731 109.13 mo
27.9731 108.62 28.1531 108.21 28.5131 107.91 cv
28.8731 107.61 29.3631 107.45 29.9631 107.45 cv
30.5731 107.45 31.0531 107.61 31.4031 107.91 cv
31.7631 108.21 31.9331 108.62 31.9331 109.13 cv
31.9331 109.65 31.7631 110.07 31.4031 110.37 cv
31.0531 110.67 30.5731 110.82 29.9631 110.82 cv
29.3531 110.82 28.8731 110.67 28.5131 110.37 cv
28.1531 110.07 27.9731 109.65 27.9731 109.13 cv
25.0031 114.17 mo
25.0031 114.45 25.1331 114.67 25.3731 114.83 cv
25.6131 114.99 25.9431 115.07 26.3631 115.07 cv
26.8031 115.07 27.1331 114.99 27.3731 114.83 cv
27.6131 114.67 27.7331 114.45 27.7331 114.17 cv
27.7331 113.89 27.6131 113.66 27.3731 113.5 cv
27.1331 113.34 26.8031 113.26 26.3631 113.26 cv
25.9431 113.26 25.6131 113.35 25.3731 113.51 cv
25.1331 113.67 25.0031 113.89 25.0031 114.17 cv
24.3831 109.76 mo
24.3831 108.98 li
31.9331 113.54 li
31.9331 114.32 li
24.3831 109.76 li
24.3831 114.17 mo
24.3831 113.66 24.5631 113.25 24.9231 112.94 cv
25.2831 112.64 25.7631 112.48 26.3631 112.48 cv
26.9831 112.48 27.4631 112.64 27.8231 112.94 cv
28.1831 113.24 28.3531 113.65 28.3531 114.17 cv
28.3531 114.69 28.1831 115.1 27.8231 115.4 cv
27.4631 115.7 26.9831 115.85 26.3631 115.85 cv
25.7631 115.85 25.2831 115.7 24.9231 115.4 cv
24.5631 115.1 24.3831 114.69 24.3831 114.17 cv
f
24.2131 106.1 mo
24.2131 105.32 li
24.9831 104.84 25.7331 104.47 26.4731 104.23 cv
27.2131 103.99 27.9431 103.86 28.6631 103.86 cv
29.3931 103.86 30.1231 103.99 30.8631 104.23 cv
31.6031 104.47 32.3431 104.84 33.1131 105.32 cv
33.1131 106.1 li
32.3631 105.67 31.6331 105.35 30.8931 105.13 cv
30.1631 104.92 29.4231 104.81 28.6631 104.81 cv
27.9131 104.81 27.1731 104.92 26.4431 105.13 cv
25.7131 105.35 24.9731 105.67 24.2131 106.1 cv
f
2 lc
0 lj
57.6 307.584 mo
57.6 41.472 li
@
414.72 307.584 mo
414.72 41.472 li
@
57.6 307.584 mo
414.72 307.584 li
@
57.6 41.472 mo
414.72 41.472 li
@
78.4115 137.776 mo
81.8515 137.776 li
81.8515 138.606 li
77.2215 138.606 li
77.2215 137.776 li
77.5915 137.396 78.1015 136.876 78.7515 136.216 cv
79.3915 135.566 79.8015 135.146 79.9715 134.956 cv
80.2915 134.606 80.5115 134.306 80.6315 134.056 cv
80.7515 133.816 80.8215 133.566 80.8215 133.326 cv
80.8215 132.946 80.6815 132.626 80.4115 132.386 cv
80.1415 132.146 79.7915 132.016 79.3515 132.016 cv
79.0415 132.016 78.7115 132.076 78.3715 132.176 cv
78.0315 132.286 77.6615 132.446 77.2715 132.666 cv
77.2715 131.666 li
77.6715 131.506 78.0415 131.386 78.3815 131.306 cv
78.7215 131.226 79.0415 131.186 79.3315 131.186 cv
80.0815 131.186 80.6815 131.376 81.1315 131.756 cv
81.5815 132.136 81.8115 132.636 81.8115 133.266 cv
81.8115 133.566 81.7515 133.856 81.6415 134.116 cv
81.5315 134.386 81.3315 134.706 81.0315 135.066 cv
80.9515 135.166 80.6915 135.436 80.2515 135.886 cv
79.8115 136.336 79.2015 136.966 78.4115 137.776 cv
0 .993988 1 0 cmyk
f
83.6715 131.316 mo
88.3615 131.316 li
88.3615 131.736 li
85.7115 138.606 li
84.6815 138.606 li
87.1715 132.146 li
83.6715 132.146 li
83.6715 131.316 li
f
170.733 97.5876 mo
171.203 97.6876 171.573 97.8976 171.833 98.2176 cv
172.093 98.5376 172.233 98.9376 172.233 99.3976 cv
172.233 100.118 171.983 100.678 171.493 101.068 cv
170.993 101.458 170.293 101.648 169.383 101.648 cv
169.073 101.648 168.753 101.618 168.433 101.558 cv
168.113 101.508 167.773 101.418 167.433 101.298 cv
167.433 100.348 li
167.703 100.508 168.003 100.628 168.333 100.708 cv
168.653 100.788 168.993 100.828 169.353 100.828 cv
169.973 100.828 170.443 100.708 170.763 100.468 cv
171.083 100.228 171.253 99.8676 171.253 99.3976 cv
171.253 98.9776 171.103 98.6376 170.803 98.3976 cv
170.503 98.1576 170.083 98.0276 169.543 98.0276 cv
168.693 98.0276 li
168.693 97.2176 li
169.583 97.2176 li
170.063 97.2176 170.433 97.1276 170.693 96.9276 cv
170.953 96.7376 171.083 96.4576 171.083 96.0876 cv
171.083 95.7176 170.943 95.4276 170.683 95.2276 cv
170.413 95.0276 170.033 94.9276 169.543 94.9276 cv
169.273 94.9276 168.983 94.9576 168.673 95.0176 cv
168.363 95.0776 168.023 95.1676 167.653 95.2876 cv
167.653 94.4076 li
168.023 94.3076 168.373 94.2276 168.703 94.1776 cv
169.023 94.1276 169.333 94.0976 169.633 94.0976 cv
170.373 94.0976 170.963 94.2676 171.403 94.6076 cv
171.843 94.9476 172.063 95.4076 172.063 95.9876 cv
172.063 96.3876 171.943 96.7276 171.713 97.0076 cv
171.483 97.2876 171.153 97.4876 170.733 97.5876 cv
f
177.093 97.5876 mo
177.563 97.6876 177.933 97.8976 178.193 98.2176 cv
178.453 98.5376 178.593 98.9376 178.593 99.3976 cv
178.593 100.118 178.343 100.678 177.853 101.068 cv
177.353 101.458 176.653 101.648 175.743 101.648 cv
175.433 101.648 175.113 101.618 174.793 101.558 cv
174.473 101.508 174.133 101.418 173.793 101.298 cv
173.793 100.348 li
174.063 100.508 174.363 100.628 174.693 100.708 cv
175.013 100.788 175.353 100.828 175.713 100.828 cv
176.333 100.828 176.803 100.708 177.123 100.468 cv
177.443 100.228 177.613 99.8676 177.613 99.3976 cv
177.613 98.9776 177.463 98.6376 177.163 98.3976 cv
176.863 98.1576 176.443 98.0276 175.903 98.0276 cv
175.053 98.0276 li
175.053 97.2176 li
175.943 97.2176 li
176.423 97.2176 176.793 97.1276 177.053 96.9276 cv
177.313 96.7376 177.443 96.4576 177.443 96.0876 cv
177.443 95.7176 177.303 95.4276 177.043 95.2276 cv
176.773 95.0276 176.393 94.9276 175.903 94.9276 cv
175.633 94.9276 175.343 94.9576 175.033 95.0176 cv
174.723 95.0776 174.383 95.1676 174.013 95.2876 cv
174.013 94.4076 li
174.383 94.3076 174.733 94.2276 175.063 94.1776 cv
175.383 94.1276 175.693 94.0976 175.993 94.0976 cv
176.733 94.0976 177.323 94.2676 177.763 94.6076 cv
178.203 94.9476 178.423 95.4076 178.423 95.9876 cv
178.423 96.3876 178.303 96.7276 178.073 97.0076 cv
177.843 97.2876 177.513 97.4876 177.093 97.5876 cv
f
258.775 125.413 mo
262.215 125.413 li
262.215 126.243 li
257.585 126.243 li
257.585 125.413 li
257.955 125.033 258.465 124.513 259.115 123.853 cv
259.755 123.203 260.165 122.783 260.335 122.593 cv
260.655 122.243 260.875 121.943 260.995 121.693 cv
261.115 121.453 261.185 121.203 261.185 120.963 cv
261.185 120.583 261.045 120.263 260.775 120.023 cv
260.505 119.783 260.155 119.653 259.715 119.653 cv
259.405 119.653 259.075 119.713 258.735 119.813 cv
258.395 119.923 258.025 120.083 257.635 120.303 cv
257.635 119.303 li
258.035 119.143 258.405 119.023 258.745 118.943 cv
259.085 118.863 259.405 118.823 259.695 118.823 cv
260.445 118.823 261.045 119.013 261.495 119.393 cv
261.945 119.773 262.175 120.273 262.175 120.903 cv
262.175 121.203 262.115 121.493 262.005 121.753 cv
261.895 122.023 261.695 122.343 261.395 122.703 cv
261.315 122.803 261.055 123.073 260.615 123.523 cv
260.175 123.973 259.565 124.603 258.775 125.413 cv
f
264.315 126.093 mo
264.315 125.193 li
264.555 125.313 264.805 125.403 265.065 125.463 cv
265.315 125.523 265.565 125.553 265.815 125.553 cv
266.455 125.553 266.955 125.343 267.295 124.903 cv
267.635 124.463 267.835 123.803 267.895 122.903 cv
267.695 123.183 267.455 123.403 267.175 123.553 cv
266.885 123.703 266.565 123.773 266.215 123.773 cv
265.475 123.773 264.895 123.553 264.475 123.113 cv
264.055 122.673 263.845 122.073 263.845 121.303 cv
263.845 120.563 264.065 119.963 264.505 119.503 cv
264.945 119.053 265.535 118.823 266.275 118.823 cv
267.115 118.823 267.765 119.153 268.205 119.793 cv
268.645 120.443 268.875 121.383 268.875 122.603 cv
268.875 123.763 268.595 124.673 268.055 125.353 cv
267.505 126.033 266.775 126.373 265.855 126.373 cv
265.605 126.373 265.355 126.343 265.105 126.303 cv
264.845 126.263 264.585 126.193 264.315 126.093 cv
266.275 123.003 mo
266.715 123.003 267.065 122.853 267.325 122.553 cv
267.585 122.253 267.715 121.833 267.715 121.303 cv
267.715 120.783 267.585 120.363 267.325 120.063 cv
267.065 119.763 266.715 119.603 266.275 119.603 cv
265.835 119.603 265.485 119.763 265.225 120.063 cv
264.965 120.363 264.835 120.783 264.835 121.303 cv
264.835 121.833 264.965 122.253 265.225 122.553 cv
265.485 122.853 265.835 123.003 266.275 123.003 cv
f
351.097 85.2247 mo
351.567 85.3247 351.937 85.5347 352.197 85.8547 cv
352.457 86.1747 352.597 86.5747 352.597 87.0347 cv
352.597 87.7547 352.347 88.3147 351.857 88.7047 cv
351.357 89.0947 350.657 89.2847 349.747 89.2847 cv
349.437 89.2847 349.117 89.2547 348.797 89.1947 cv
348.477 89.1447 348.137 89.0547 347.797 88.9347 cv
347.797 87.9847 li
348.067 88.1447 348.367 88.2647 348.697 88.3447 cv
349.017 88.4247 349.357 88.4647 349.717 88.4647 cv
350.337 88.4647 350.807 88.3447 351.127 88.1047 cv
351.447 87.8647 351.617 87.5047 351.617 87.0347 cv
351.617 86.6147 351.467 86.2747 351.167 86.0347 cv
350.867 85.7947 350.447 85.6647 349.907 85.6647 cv
349.057 85.6647 li
349.057 84.8547 li
349.947 84.8547 li
350.427 84.8547 350.797 84.7647 351.057 84.5647 cv
351.317 84.3747 351.447 84.0947 351.447 83.7247 cv
351.447 83.3547 351.307 83.0647 351.047 82.8647 cv
350.777 82.6647 350.397 82.5647 349.907 82.5647 cv
349.637 82.5647 349.347 82.5947 349.037 82.6547 cv
348.727 82.7147 348.387 82.8047 348.017 82.9247 cv
348.017 82.0447 li
348.387 81.9447 348.737 81.8647 349.067 81.8147 cv
349.387 81.7647 349.697 81.7347 349.997 81.7347 cv
350.737 81.7347 351.327 81.9047 351.767 82.2447 cv
352.207 82.5847 352.427 83.0447 352.427 83.6247 cv
352.427 84.0247 352.307 84.3647 352.077 84.6447 cv
351.847 84.9247 351.517 85.1247 351.097 85.2247 cv
f
354.477 81.8647 mo
358.347 81.8647 li
358.347 82.6947 li
355.377 82.6947 li
355.377 84.4847 li
355.517 84.4347 355.667 84.3947 355.807 84.3747 cv
355.947 84.3547 356.097 84.3347 356.237 84.3347 cv
357.047 84.3347 357.687 84.5647 358.167 85.0047 cv
358.647 85.4547 358.887 86.0547 358.887 86.8147 cv
358.887 87.6047 358.637 88.2147 358.147 88.6447 cv
357.657 89.0747 356.967 89.2847 356.087 89.2847 cv
355.777 89.2847 355.467 89.2547 355.147 89.2147 cv
354.827 89.1647 354.507 89.0947 354.167 88.9847 cv
354.167 87.9947 li
354.457 88.1547 354.757 88.2747 355.077 88.3547 cv
355.387 88.4347 355.717 88.4647 356.067 88.4647 cv
356.627 88.4647 357.077 88.3247 357.407 88.0247 cv
357.727 87.7247 357.897 87.3247 357.897 86.8147 cv
357.897 86.3147 357.727 85.9147 357.407 85.6147 cv
357.077 85.3147 356.627 85.1647 356.067 85.1647 cv
355.807 85.1647 355.537 85.1947 355.277 85.2547 cv
355.017 85.3147 354.747 85.4047 354.477 85.5247 cv
354.477 81.8647 li
f
96.4479 143.958 mo
99.8879 143.958 li
99.8879 144.788 li
95.2579 144.788 li
95.2579 143.958 li
95.6279 143.578 96.1379 143.058 96.7879 142.398 cv
97.4279 141.748 97.8379 141.328 98.0079 141.138 cv
98.3279 140.788 98.5479 140.488 98.6679 140.238 cv
98.7879 139.998 98.8579 139.748 98.8579 139.508 cv
98.8579 139.128 98.7179 138.808 98.4479 138.568 cv
98.1779 138.328 97.8279 138.198 97.3879 138.198 cv
97.0779 138.198 96.7479 138.258 96.4079 138.358 cv
96.0679 138.468 95.6979 138.628 95.3079 138.848 cv
95.3079 137.848 li
95.7079 137.688 96.0779 137.568 96.4179 137.488 cv
96.7579 137.408 97.0779 137.368 97.3679 137.368 cv
98.1179 137.368 98.7179 137.558 99.1679 137.938 cv
99.6179 138.318 99.8479 138.818 99.8479 139.448 cv
99.8479 139.748 99.7879 140.038 99.6779 140.298 cv
99.5679 140.568 99.3679 140.888 99.0679 141.248 cv
98.9879 141.348 98.7279 141.618 98.2879 142.068 cv
97.8479 142.518 97.2379 143.148 96.4479 143.958 cv
.883665 .769162 0 0 cmyk
f
104.188 140.748 mo
103.748 140.748 103.398 140.908 103.138 141.208 cv
102.878 141.508 102.748 141.928 102.748 142.448 cv
102.748 142.978 102.878 143.398 103.138 143.698 cv
103.398 143.998 103.748 144.148 104.188 144.148 cv
104.628 144.148 104.978 143.998 105.238 143.698 cv
105.498 143.398 105.628 142.978 105.628 142.448 cv
105.628 141.928 105.498 141.508 105.238 141.208 cv
104.978 140.908 104.628 140.748 104.188 140.748 cv
106.148 137.658 mo
106.148 138.558 li
105.898 138.438 105.648 138.348 105.398 138.288 cv
105.138 138.228 104.888 138.198 104.648 138.198 cv
103.988 138.198 103.488 138.418 103.148 138.858 cv
102.808 139.298 102.608 139.968 102.568 140.848 cv
102.758 140.568 102.998 140.348 103.288 140.198 cv
103.578 140.048 103.898 139.968 104.248 139.968 cv
104.978 139.968 105.558 140.198 105.978 140.638 cv
106.398 141.078 106.618 141.688 106.618 142.448 cv
106.618 143.198 106.388 143.798 105.948 144.248 cv
105.508 144.698 104.918 144.918 104.188 144.918 cv
103.348 144.918 102.698 144.598 102.258 143.958 cv
101.808 143.318 101.588 142.378 101.588 141.148 cv
101.588 139.998 101.858 139.078 102.408 138.398 cv
102.948 137.718 103.688 137.368 104.608 137.368 cv
104.848 137.368 105.098 137.398 105.358 137.438 cv
105.608 137.488 105.868 137.558 106.148 137.658 cv
f
188.77 60.4988 mo
189.24 60.5988 189.61 60.8088 189.87 61.1288 cv
190.13 61.4488 190.27 61.8488 190.27 62.3088 cv
190.27 63.0288 190.02 63.5888 189.53 63.9788 cv
189.03 64.3688 188.33 64.5588 187.42 64.5588 cv
187.11 64.5588 186.79 64.5288 186.47 64.4688 cv
186.15 64.4188 185.81 64.3288 185.47 64.2088 cv
185.47 63.2588 li
185.74 63.4188 186.04 63.5388 186.37 63.6188 cv
186.69 63.6988 187.03 63.7388 187.39 63.7388 cv
188.01 63.7388 188.48 63.6188 188.8 63.3788 cv
189.12 63.1388 189.29 62.7788 189.29 62.3088 cv
189.29 61.8888 189.14 61.5488 188.84 61.3088 cv
188.54 61.0688 188.12 60.9388 187.58 60.9388 cv
186.73 60.9388 li
186.73 60.1288 li
187.62 60.1288 li
188.1 60.1288 188.47 60.0388 188.73 59.8388 cv
188.99 59.6488 189.12 59.3688 189.12 58.9988 cv
189.12 58.6288 188.98 58.3388 188.72 58.1388 cv
188.45 57.9388 188.07 57.8388 187.58 57.8388 cv
187.31 57.8388 187.02 57.8688 186.71 57.9288 cv
186.4 57.9888 186.06 58.0788 185.69 58.1988 cv
185.69 57.3188 li
186.06 57.2188 186.41 57.1388 186.74 57.0888 cv
187.06 57.0388 187.37 57.0088 187.67 57.0088 cv
188.41 57.0088 189 57.1788 189.44 57.5188 cv
189.88 57.8588 190.1 58.3188 190.1 58.8988 cv
190.1 59.2988 189.98 59.6388 189.75 59.9188 cv
189.52 60.1988 189.19 60.3988 188.77 60.4988 cv
f
192.17 64.2788 mo
192.17 63.3788 li
192.41 63.4988 192.66 63.5888 192.92 63.6488 cv
193.17 63.7088 193.42 63.7388 193.67 63.7388 cv
194.31 63.7388 194.81 63.5288 195.15 63.0888 cv
195.49 62.6488 195.69 61.9888 195.75 61.0888 cv
195.55 61.3688 195.31 61.5888 195.03 61.7388 cv
194.74 61.8888 194.42 61.9588 194.07 61.9588 cv
193.33 61.9588 192.75 61.7388 192.33 61.2988 cv
191.91 60.8588 191.7 60.2588 191.7 59.4888 cv
191.7 58.7488 191.92 58.1488 192.36 57.6888 cv
192.8 57.2388 193.39 57.0088 194.13 57.0088 cv
194.97 57.0088 195.62 57.3388 196.06 57.9788 cv
196.5 58.6288 196.73 59.5688 196.73 60.7888 cv
196.73 61.9488 196.45 62.8588 195.91 63.5388 cv
195.36 64.2188 194.63 64.5588 193.71 64.5588 cv
193.46 64.5588 193.21 64.5288 192.96 64.4888 cv
192.7 64.4488 192.44 64.3788 192.17 64.2788 cv
194.13 61.1888 mo
194.57 61.1888 194.92 61.0388 195.18 60.7388 cv
195.44 60.4388 195.57 60.0188 195.57 59.4888 cv
195.57 58.9688 195.44 58.5488 195.18 58.2488 cv
194.92 57.9488 194.57 57.7888 194.13 57.7888 cv
193.69 57.7888 193.34 57.9488 193.08 58.2488 cv
192.82 58.5488 192.69 58.9688 192.69 59.4888 cv
192.69 60.0188 192.82 60.4388 193.08 60.7388 cv
193.34 61.0388 193.69 61.1888 194.13 61.1888 cv
f
278.952 91.4061 mo
279.422 91.5061 279.792 91.7161 280.052 92.0361 cv
280.312 92.3561 280.452 92.7561 280.452 93.2161 cv
280.452 93.9361 280.202 94.4961 279.712 94.8861 cv
279.212 95.2761 278.512 95.4661 277.602 95.4661 cv
277.292 95.4661 276.972 95.4361 276.652 95.3761 cv
276.332 95.3261 275.992 95.2361 275.652 95.1161 cv
275.652 94.1661 li
275.922 94.3261 276.222 94.4461 276.552 94.5261 cv
276.872 94.6061 277.212 94.6461 277.572 94.6461 cv
278.192 94.6461 278.662 94.5261 278.982 94.2861 cv
279.302 94.0461 279.472 93.6861 279.472 93.2161 cv
279.472 92.7961 279.322 92.4561 279.022 92.2161 cv
278.722 91.9761 278.302 91.8461 277.762 91.8461 cv
276.912 91.8461 li
276.912 91.0361 li
277.802 91.0361 li
278.282 91.0361 278.652 90.9461 278.912 90.7461 cv
279.172 90.5561 279.302 90.2761 279.302 89.9061 cv
279.302 89.5361 279.162 89.2461 278.902 89.0461 cv
278.632 88.8461 278.252 88.7461 277.762 88.7461 cv
277.492 88.7461 277.202 88.7761 276.892 88.8361 cv
276.582 88.8961 276.242 88.9861 275.872 89.1061 cv
275.872 88.2261 li
276.242 88.1261 276.592 88.0461 276.922 87.9961 cv
277.242 87.9461 277.552 87.9161 277.852 87.9161 cv
278.592 87.9161 279.182 88.0861 279.622 88.4261 cv
280.062 88.7661 280.282 89.2261 280.282 89.8061 cv
280.282 90.2061 280.162 90.5461 279.932 90.8261 cv
279.702 91.1061 279.372 91.3061 278.952 91.4061 cv
f
285.032 88.9061 mo
282.542 92.7961 li
285.032 92.7961 li
285.032 88.9061 li
284.772 88.0461 mo
286.012 88.0461 li
286.012 92.7961 li
287.052 92.7961 li
287.052 93.6161 li
286.012 93.6161 li
286.012 95.3361 li
285.032 95.3361 li
285.032 93.6161 li
281.742 93.6161 li
281.742 92.6661 li
284.772 88.0461 li
f
368.853 45.6359 mo
366.363 49.5259 li
368.853 49.5259 li
368.853 45.6359 li
368.593 44.7759 mo
369.833 44.7759 li
369.833 49.5259 li
370.873 49.5259 li
370.873 50.3459 li
369.833 50.3459 li
369.833 52.0659 li
368.853 52.0659 li
368.853 50.3459 li
365.563 50.3459 li
365.563 49.3959 li
368.593 44.7759 li
f
372.673 51.2359 mo
374.283 51.2359 li
374.283 45.6759 li
372.533 46.0259 li
372.533 45.1259 li
374.273 44.7759 li
375.263 44.7759 li
375.263 51.2359 li
376.873 51.2359 li
376.873 52.0659 li
372.673 52.0659 li
372.673 51.2359 li
f
118.924 298.866 mo
118.414 298.866 118.034 299.116 117.774 299.616 cv
117.514 300.116 117.394 300.866 117.394 301.866 cv
117.394 302.866 117.514 303.616 117.774 304.116 cv
118.034 304.616 118.414 304.866 118.924 304.866 cv
119.434 304.866 119.814 304.616 120.074 304.116 cv
120.324 303.616 120.454 302.866 120.454 301.866 cv
120.454 300.866 120.324 300.116 120.074 299.616 cv
119.814 299.116 119.434 298.866 118.924 298.866 cv
118.924 298.086 mo
119.734 298.086 120.354 298.416 120.794 299.056 cv
121.224 299.706 121.444 300.646 121.444 301.866 cv
121.444 303.096 121.224 304.036 120.794 304.676 cv
120.354 305.316 119.734 305.636 118.924 305.636 cv
118.104 305.636 117.474 305.316 117.044 304.676 cv
116.614 304.036 116.404 303.096 116.404 301.866 cv
116.404 300.646 116.614 299.706 117.044 299.056 cv
117.474 298.416 118.104 298.086 118.924 298.086 cv
.873533 .244297 1 .131685 cmyk
f
206.806 103.769 mo
207.276 103.869 207.646 104.079 207.906 104.399 cv
208.166 104.719 208.306 105.119 208.306 105.579 cv
208.306 106.299 208.056 106.859 207.566 107.249 cv
207.066 107.639 206.366 107.829 205.456 107.829 cv
205.146 107.829 204.826 107.799 204.506 107.739 cv
204.186 107.689 203.846 107.599 203.506 107.479 cv
203.506 106.529 li
203.776 106.689 204.076 106.809 204.406 106.889 cv
204.726 106.969 205.066 107.009 205.426 107.009 cv
206.046 107.009 206.516 106.889 206.836 106.649 cv
207.156 106.409 207.326 106.049 207.326 105.579 cv
207.326 105.159 207.176 104.819 206.876 104.579 cv
206.576 104.339 206.156 104.209 205.616 104.209 cv
204.766 104.209 li
204.766 103.399 li
205.656 103.399 li
206.136 103.399 206.506 103.309 206.766 103.109 cv
207.026 102.919 207.156 102.639 207.156 102.269 cv
207.156 101.899 207.016 101.609 206.756 101.409 cv
206.486 101.209 206.106 101.109 205.616 101.109 cv
205.346 101.109 205.056 101.139 204.746 101.199 cv
204.436 101.259 204.096 101.349 203.726 101.469 cv
203.726 100.589 li
204.096 100.489 204.446 100.409 204.776 100.359 cv
205.096 100.309 205.406 100.279 205.706 100.279 cv
206.446 100.279 207.036 100.449 207.476 100.789 cv
207.916 101.129 208.136 101.589 208.136 102.169 cv
208.136 102.569 208.016 102.909 207.786 103.189 cv
207.556 103.469 207.226 103.669 206.806 103.769 cv
f
211.026 106.869 mo
214.466 106.869 li
214.466 107.699 li
209.836 107.699 li
209.836 106.869 li
210.206 106.489 210.716 105.969 211.366 105.309 cv
212.006 104.659 212.416 104.239 212.586 104.049 cv
212.906 103.699 213.126 103.399 213.246 103.149 cv
213.366 102.909 213.436 102.659 213.436 102.419 cv
213.436 102.039 213.296 101.719 213.026 101.479 cv
212.756 101.239 212.406 101.109 211.966 101.109 cv
211.656 101.109 211.326 101.169 210.986 101.269 cv
210.646 101.379 210.276 101.539 209.886 101.759 cv
209.886 100.759 li
210.286 100.599 210.656 100.479 210.996 100.399 cv
211.336 100.319 211.656 100.279 211.946 100.279 cv
212.696 100.279 213.296 100.469 213.746 100.849 cv
214.196 101.229 214.426 101.729 214.426 102.359 cv
214.426 102.659 214.366 102.949 214.256 103.209 cv
214.146 103.479 213.946 103.799 213.646 104.159 cv
213.566 104.259 213.306 104.529 212.866 104.979 cv
212.426 105.429 211.816 106.059 211.026 106.869 cv
f
296.988 109.951 mo
297.458 110.051 297.828 110.261 298.088 110.581 cv
298.348 110.901 298.488 111.301 298.488 111.761 cv
298.488 112.481 298.238 113.041 297.748 113.431 cv
297.248 113.821 296.548 114.011 295.638 114.011 cv
295.328 114.011 295.008 113.981 294.688 113.921 cv
294.368 113.871 294.028 113.781 293.688 113.661 cv
293.688 112.711 li
293.958 112.871 294.258 112.991 294.588 113.071 cv
294.908 113.151 295.248 113.191 295.608 113.191 cv
296.228 113.191 296.698 113.071 297.018 112.831 cv
297.338 112.591 297.508 112.231 297.508 111.761 cv
297.508 111.341 297.358 111.001 297.058 110.761 cv
296.758 110.521 296.338 110.391 295.798 110.391 cv
294.948 110.391 li
294.948 109.581 li
295.838 109.581 li
296.318 109.581 296.688 109.491 296.948 109.291 cv
297.208 109.101 297.338 108.821 297.338 108.451 cv
297.338 108.081 297.198 107.791 296.938 107.591 cv
296.668 107.391 296.288 107.291 295.798 107.291 cv
295.528 107.291 295.238 107.321 294.928 107.381 cv
294.618 107.441 294.278 107.531 293.908 107.651 cv
293.908 106.771 li
294.278 106.671 294.628 106.591 294.958 106.541 cv
295.278 106.491 295.588 106.461 295.888 106.461 cv
296.628 106.461 297.218 106.631 297.658 106.971 cv
298.098 107.311 298.318 107.771 298.318 108.351 cv
298.318 108.751 298.198 109.091 297.968 109.371 cv
297.738 109.651 297.408 109.851 296.988 109.951 cv
f
300.528 113.051 mo
302.138 113.051 li
302.138 107.491 li
300.388 107.841 li
300.388 106.941 li
302.128 106.591 li
303.118 106.591 li
303.118 113.051 li
304.728 113.051 li
304.728 113.881 li
300.528 113.881 li
300.528 113.051 li
f
387.17 91.4061 mo
387.64 91.5061 388.01 91.7161 388.27 92.0361 cv
388.53 92.3561 388.67 92.7561 388.67 93.2161 cv
388.67 93.9361 388.42 94.4961 387.93 94.8861 cv
387.43 95.2761 386.73 95.4661 385.82 95.4661 cv
385.51 95.4661 385.19 95.4361 384.87 95.3761 cv
384.55 95.3261 384.21 95.2361 383.87 95.1161 cv
383.87 94.1661 li
384.14 94.3261 384.44 94.4461 384.77 94.5261 cv
385.09 94.6061 385.43 94.6461 385.79 94.6461 cv
386.41 94.6461 386.88 94.5261 387.2 94.2861 cv
387.52 94.0461 387.69 93.6861 387.69 93.2161 cv
387.69 92.7961 387.54 92.4561 387.24 92.2161 cv
386.94 91.9761 386.52 91.8461 385.98 91.8461 cv
385.13 91.8461 li
385.13 91.0361 li
386.02 91.0361 li
386.5 91.0361 386.87 90.9461 387.13 90.7461 cv
387.39 90.5561 387.52 90.2761 387.52 89.9061 cv
387.52 89.5361 387.38 89.2461 387.12 89.0461 cv
386.85 88.8461 386.47 88.7461 385.98 88.7461 cv
385.71 88.7461 385.42 88.7761 385.11 88.8361 cv
384.8 88.8961 384.46 88.9861 384.09 89.1061 cv
384.09 88.2261 li
384.46 88.1261 384.81 88.0461 385.14 87.9961 cv
385.46 87.9461 385.77 87.9161 386.07 87.9161 cv
386.81 87.9161 387.4 88.0861 387.84 88.4261 cv
388.28 88.7661 388.5 89.2261 388.5 89.8061 cv
388.5 90.2061 388.38 90.5461 388.15 90.8261 cv
387.92 91.1061 387.59 91.3061 387.17 91.4061 cv
f
393.25 88.9061 mo
390.76 92.7961 li
393.25 92.7961 li
393.25 88.9061 li
392.99 88.0461 mo
394.23 88.0461 li
394.23 92.7961 li
395.27 92.7961 li
395.27 93.6161 li
394.23 93.6161 li
394.23 95.3361 li
393.25 95.3361 li
393.25 93.6161 li
389.96 93.6161 li
389.96 92.6661 li
392.99 88.0461 li
f
138.522 94.6439 mo
64.6 94.6439 li
64.0101 94.6421 63.6627 94.4998 63.4535 94.2904 cv
63.2441 94.0811 63.1018 93.7338 63.1 93.1439 cv
63.1 48.472 li
63.1018 47.8822 63.2441 47.5347 63.4535 47.3256 cv
63.6627 47.1161 64.0101 46.9738 64.6 46.972 cv
138.522 46.972 li
139.112 46.9738 139.459 47.1161 139.668 47.3256 cv
139.878 47.5347 140.02 47.8822 140.022 48.472 cv
140.022 93.1439 li
140.02 93.7338 139.878 94.0811 139.668 94.2904 cv
139.459 94.4998 139.112 94.6421 138.522 94.6439 cv
66.6 82.0658 mo
66.6 89.0658 li
86.6 89.0658 li
86.6 82.0658 li
66.6 82.0658 li
66.6 66.472 mo
66.6 73.4721 li
86.6 73.4721 li
86.6 66.472 li
66.6 66.472 li
66.6 51.3939 mo
66.6 58.3939 li
86.6 58.3939 li
86.6 51.3939 li
66.6 51.3939 li
0 0 0 0 cmyk
f
138.533 95.6439 mo
138.529 95.6439 138.525 95.6439 138.522 95.6439 cv
64.6 95.6439 li
64.5964 95.6439 64.5928 95.6439 64.5893 95.6439 cv
63.8503 95.6439 63.2018 95.4524 62.7464 94.9975 cv
62.2893 94.5399 62.0982 93.8874 62.1 93.1439 cv
62.1 48.472 li
62.0982 47.7286 62.2893 47.0759 62.7464 46.6185 cv
63.2019 46.1633 63.8507 45.972 64.59 45.972 cv
64.5933 45.972 64.5966 45.972 64.6 45.972 cv
138.522 45.972 li
138.525 45.972 138.529 45.972 138.532 45.972 cv
139.271 45.972 139.92 46.1633 140.375 46.6185 cv
140.833 47.0759 141.024 47.7286 141.022 48.472 cv
141.022 93.1439 li
141.024 93.8874 140.833 94.5399 140.375 94.9975 cv
139.92 95.4524 139.272 95.6439 138.533 95.6439 cv
64.6 94.6439 mo
138.522 94.6439 li
139.112 94.6421 139.459 94.4998 139.668 94.2904 cv
139.878 94.0811 140.02 93.7338 140.022 93.1439 cv
140.022 48.472 li
140.02 47.8822 139.878 47.5347 139.668 47.3256 cv
139.459 47.1161 139.112 46.9738 138.522 46.972 cv
64.6 46.972 li
64.0101 46.9738 63.6627 47.1161 63.4535 47.3256 cv
63.2441 47.5347 63.1018 47.8822 63.1 48.472 cv
63.1 93.1439 li
63.1018 93.7338 63.2441 94.0811 63.4535 94.2904 cv
63.6627 94.4998 64.0101 94.6421 64.6 94.6439 cv
64.6 94.6439 li
.15433 .116732 .12192 0 cmyk
f
86.6 58.3939 mo
66.6 58.3939 li
66.6 51.3939 li
86.6 51.3939 li
86.6 58.3939 li
0 .638514 .385901 0 cmyk
f
98.28 50.4008 mo
99.4 50.4008 li
100.75 57.6908 li
99.72 57.6908 li
99.42 55.8208 li
96.14 55.8208 li
95.11 57.6908 li
94.08 57.6908 li
98.28 50.4008 li
98.64 51.3708 mo
96.59 55.0008 li
99.27 55.0008 li
98.64 51.3708 li
1 /0 /CSD get_res sepcs
1 sep
f
104.283 56.5804 mo
104.612 56.6504 104.871 56.7974 105.053 57.0214 cv
105.235 57.2454 105.333 57.5254 105.333 57.8474 cv
105.333 58.3514 105.158 58.7434 104.815 59.0164 cv
104.465 59.2894 103.975 59.4224 103.338 59.4224 cv
103.121 59.4224 102.897 59.4014 102.673 59.3594 cv
102.449 59.3244 102.211 59.2614 101.973 59.1774 cv
101.973 58.5124 li
102.162 58.6244 102.372 58.7084 102.603 58.7644 cv
102.827 58.8204 103.065 58.8484 103.317 58.8484 cv
103.751 58.8484 104.08 58.7644 104.304 58.5964 cv
104.528 58.4284 104.647 58.1764 104.647 57.8474 cv
104.647 57.5534 104.542 57.3154 104.332 57.1474 cv
104.122 56.9794 103.828 56.8884 103.45 56.8884 cv
102.855 56.8884 li
102.855 56.3214 li
103.478 56.3214 li
103.814 56.3214 104.073 56.2584 104.255 56.1184 cv
104.437 55.9854 104.528 55.7894 104.528 55.5304 cv
104.528 55.2714 104.43 55.0684 104.248 54.9284 cv
104.059 54.7884 103.793 54.7184 103.45 54.7184 cv
103.261 54.7184 103.058 54.7394 102.841 54.7814 cv
102.624 54.8234 102.386 54.8864 102.127 54.9704 cv
102.127 54.3544 li
102.386 54.2844 102.631 54.2284 102.862 54.1934 cv
103.086 54.1584 103.303 54.1374 103.513 54.1374 cv
104.031 54.1374 104.444 54.2564 104.752 54.4944 cv
105.06 54.7324 105.214 55.0544 105.214 55.4604 cv
105.214 55.7404 105.13 55.9784 104.969 56.1744 cv
104.808 56.3704 104.577 56.5104 104.283 56.5804 cv
f
86.6 73.4721 mo
66.6 73.4721 li
66.6 66.472 li
86.6 66.472 li
86.6 73.4721 li
.578576 .527581 0 0 cmyk
f
96.57 66.5858 mo
96.57 72.2558 li
97.76 72.2558 li
98.76 72.2558 99.5 72.0358 99.97 71.5758 cv
100.43 71.1158 100.67 70.3958 100.67 69.4158 cv
100.67 68.4358 100.43 67.7258 99.97 67.2658 cv
99.5 66.8158 98.76 66.5858 97.76 66.5858 cv
96.57 66.5858 li
95.58 65.7758 mo
97.61 65.7758 li
99.02 65.7758 100.06 66.0758 100.72 66.6558 cv
101.38 67.2458 101.71 68.1658 101.71 69.4158 cv
101.71 70.6758 101.37 71.5958 100.71 72.1858 cv
100.05 72.7758 99.01 73.0658 97.61 73.0658 cv
95.58 73.0658 li
95.58 65.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
108.74 66.3358 mo
108.74 67.3758 li
108.4 67.0758 108.05 66.8458 107.67 66.6858 cv
107.29 66.5358 106.9 66.4558 106.48 66.4558 cv
105.64 66.4558 105 66.7158 104.56 67.2258 cv
104.12 67.7358 103.9 68.4658 103.9 69.4258 cv
103.9 70.3858 104.12 71.1258 104.56 71.6358 cv
105 72.1458 105.64 72.3958 106.48 72.3958 cv
106.9 72.3958 107.29 72.3258 107.67 72.1658 cv
108.05 72.0158 108.4 71.7858 108.74 71.4758 cv
108.74 72.5058 li
108.39 72.7458 108.02 72.9158 107.64 73.0258 cv
107.26 73.1358 106.85 73.1958 106.42 73.1958 cv
105.32 73.1958 104.45 72.8658 103.81 72.1958 cv
103.17 71.5258 102.86 70.6058 102.86 69.4258 cv
102.86 68.2558 103.17 67.3358 103.81 66.6558 cv
104.45 65.9858 105.32 65.6458 106.42 65.6458 cv
106.86 65.6458 107.27 65.7058 107.65 65.8158 cv
108.03 65.9358 108.4 66.1058 108.74 66.3358 cv
f
114.903 70.1058 mo
114.903 70.5458 li
110.773 70.5458 li
110.813 71.1658 110.993 71.6458 111.333 71.9658 cv
111.663 72.2858 112.123 72.4458 112.723 72.4458 cv
113.063 72.4458 113.403 72.4058 113.723 72.3258 cv
114.043 72.2458 114.373 72.1158 114.693 71.9358 cv
114.693 72.7858 li
114.373 72.9258 114.043 73.0358 113.703 73.0958 cv
113.363 73.1558 113.013 73.1958 112.673 73.1958 cv
111.793 73.1958 111.103 72.9458 110.593 72.4458 cv
110.083 71.9458 109.833 71.2558 109.833 70.3858 cv
109.833 69.4958 110.073 68.7858 110.553 68.2558 cv
111.033 67.7358 111.693 67.4658 112.513 67.4658 cv
113.253 67.4658 113.833 67.7058 114.263 68.1758 cv
114.683 68.6558 114.903 69.2958 114.903 70.1058 cv
114.003 69.8458 mo
113.993 69.3558 113.853 68.9658 113.593 68.6658 cv
113.323 68.3758 112.963 68.2258 112.523 68.2258 cv
112.023 68.2258 111.623 68.3758 111.323 68.6558 cv
111.023 68.9358 110.843 69.3358 110.803 69.8458 cv
114.003 69.8458 li
f
116.375 65.4658 mo
117.275 65.4658 li
117.275 73.0658 li
116.375 73.0658 li
116.375 65.4658 li
f
119.153 65.4658 mo
120.053 65.4658 li
120.053 73.0658 li
119.153 73.0658 li
119.153 65.4658 li
f
121.955 74.1254 mo
123.082 74.1254 li
123.082 70.2334 li
121.857 70.4784 li
121.857 69.8484 li
123.075 69.6034 li
123.768 69.6034 li
123.768 74.1254 li
124.895 74.1254 li
124.895 74.7064 li
121.955 74.7064 li
121.955 74.1254 li
f
126.36 73.8384 mo
127.081 73.8384 li
127.081 74.4264 li
126.521 75.5114 li
126.08 75.5114 li
126.36 74.4264 li
126.36 73.8384 li
f
131.972 71.9554 mo
132.301 72.0254 132.56 72.1724 132.742 72.3964 cv
132.924 72.6204 133.022 72.9004 133.022 73.2224 cv
133.022 73.7264 132.847 74.1184 132.504 74.3914 cv
132.154 74.6644 131.664 74.7974 131.027 74.7974 cv
130.81 74.7974 130.586 74.7764 130.362 74.7344 cv
130.138 74.6994 129.9 74.6364 129.662 74.5524 cv
129.662 73.8874 li
129.851 73.9994 130.061 74.0834 130.292 74.1394 cv
130.516 74.1954 130.754 74.2234 131.006 74.2234 cv
131.44 74.2234 131.769 74.1394 131.993 73.9714 cv
132.217 73.8034 132.336 73.5514 132.336 73.2224 cv
132.336 72.9284 132.231 72.6904 132.021 72.5224 cv
131.811 72.3544 131.517 72.2634 131.139 72.2634 cv
130.544 72.2634 li
130.544 71.6964 li
131.167 71.6964 li
131.503 71.6964 131.762 71.6334 131.944 71.4934 cv
132.126 71.3604 132.217 71.1644 132.217 70.9054 cv
132.217 70.6464 132.119 70.4434 131.937 70.3034 cv
131.748 70.1634 131.482 70.0934 131.139 70.0934 cv
130.95 70.0934 130.747 70.1144 130.53 70.1564 cv
130.313 70.1984 130.075 70.2614 129.816 70.3454 cv
129.816 69.7294 li
130.075 69.6594 130.32 69.6034 130.551 69.5684 cv
130.775 69.5334 130.992 69.5124 131.202 69.5124 cv
131.72 69.5124 132.133 69.6314 132.441 69.8694 cv
132.749 70.1074 132.903 70.4294 132.903 70.8354 cv
132.903 71.1154 132.819 71.3534 132.658 71.5494 cv
132.497 71.7454 132.266 71.8854 131.972 71.9554 cv
f
86.6 89.0658 mo
66.6 89.0658 li
66.6 82.0658 li
86.6 82.0658 li
86.6 89.0658 li
.532036 .0339361 .660609 0 cmyk
f
95.58 81.7758 mo
99.77 81.7758 li
99.77 82.6058 li
96.57 82.6058 li
96.57 84.7558 li
99.46 84.7558 li
99.46 85.5858 li
96.57 85.5858 li
96.57 89.0658 li
95.58 89.0658 li
95.58 81.7758 li
1 /0 /CSD get_res sepcs
1 sep
f
103.78 86.3158 mo
103.05 86.3158 102.55 86.4058 102.27 86.5658 cv
101.99 86.7358 101.85 87.0158 101.85 87.4158 cv
101.85 87.7358 101.95 87.9958 102.16 88.1758 cv
102.37 88.3658 102.66 88.4558 103.02 88.4558 cv
103.52 88.4558 103.92 88.2858 104.22 87.9258 cv
104.52 87.5758 104.67 87.1058 104.67 86.5158 cv
104.67 86.3158 li
103.78 86.3158 li
105.57 85.9458 mo
105.57 89.0658 li
104.67 89.0658 li
104.67 88.2358 li
104.46 88.5758 104.2 88.8158 103.9 88.9658 cv
103.6 89.1158 103.22 89.1958 102.78 89.1958 cv
102.22 89.1958 101.77 89.0458 101.44 88.7358 cv
101.11 88.4258 100.95 88.0058 100.95 87.4758 cv
100.95 86.8658 101.15 86.4058 101.57 86.0858 cv
101.98 85.7758 102.59 85.6158 103.41 85.6158 cv
104.67 85.6158 li
104.67 85.5258 li
104.67 85.1158 104.53 84.7958 104.26 84.5658 cv
103.99 84.3458 103.61 84.2258 103.12 84.2258 cv
102.8 84.2258 102.5 84.2658 102.2 84.3458 cv
101.9 84.4258 101.62 84.5358 101.35 84.6758 cv
101.35 83.8458 li
101.67 83.7258 101.99 83.6258 102.3 83.5658 cv
102.61 83.5058 102.91 83.4658 103.21 83.4658 cv
104 83.4658 104.59 83.6758 104.98 84.0858 cv
105.37 84.4958 105.57 85.1158 105.57 85.9458 cv
f
108.31 82.0458 mo
108.31 83.5958 li
110.16 83.5958 li
110.16 84.2958 li
108.31 84.2958 li
108.31 87.2658 li
108.31 87.7158 108.37 88.0058 108.49 88.1258 cv
108.61 88.2558 108.86 88.3158 109.24 88.3158 cv
110.16 88.3158 li
110.16 89.0658 li
109.24 89.0658 li
108.54 89.0658 108.06 88.9358 107.8 88.6758 cv
107.54 88.4158 107.41 87.9458 107.41 87.2658 cv
107.41 84.2958 li
106.75 84.2958 li
106.75 83.5958 li
107.41 83.5958 li
107.41 82.0458 li
108.31 82.0458 li
f
110.89 85.9258 mo
113.52 85.9258 li
113.52 86.7258 li
110.89 86.7258 li
110.89 85.9258 li
f
113.99 81.7758 mo
120.15 81.7758 li
120.15 82.6058 li
117.56 82.6058 li
117.56 89.0658 li
116.57 89.0658 li
116.57 82.6058 li
113.99 82.6058 li
113.99 81.7758 li
f
124.23 84.4358 mo
124.13 84.3758 124.02 84.3358 123.9 84.3058 cv
123.78 84.2858 123.65 84.2658 123.51 84.2658 cv
123 84.2658 122.61 84.4358 122.34 84.7658 cv
122.06 85.0958 121.93 85.5658 121.93 86.1858 cv
121.93 89.0658 li
121.03 89.0658 li
121.03 83.5958 li
121.93 83.5958 li
121.93 84.4458 li
122.11 84.1158 122.36 83.8658 122.66 83.7058 cv
122.96 83.5458 123.33 83.4658 123.77 83.4658 cv
123.98 83.4758 li
124.05 83.4858 124.13 83.4958 124.23 83.5158 cv
124.23 84.4358 li
f
129.85 86.1058 mo
129.85 86.5458 li
125.72 86.5458 li
125.76 87.1658 125.94 87.6458 126.28 87.9658 cv
126.61 88.2858 127.07 88.4458 127.67 88.4458 cv
128.01 88.4458 128.35 88.4058 128.67 88.3258 cv
128.99 88.2458 129.32 88.1158 129.64 87.9358 cv
129.64 88.7858 li
129.32 88.9258 128.99 89.0358 128.65 89.0958 cv
128.31 89.1558 127.96 89.1958 127.62 89.1958 cv
126.74 89.1958 126.05 88.9458 125.54 88.4458 cv
125.03 87.9458 124.78 87.2558 124.78 86.3858 cv
124.78 85.4958 125.02 84.7858 125.5 84.2558 cv
125.98 83.7358 126.64 83.4658 127.46 83.4658 cv
128.2 83.4658 128.78 83.7058 129.21 84.1758 cv
129.63 84.6558 129.85 85.2958 129.85 86.1058 cv
128.95 85.8458 mo
128.94 85.3558 128.8 84.9658 128.54 84.6658 cv
128.27 84.3758 127.91 84.2258 127.47 84.2258 cv
126.97 84.2258 126.57 84.3758 126.27 84.6558 cv
125.97 84.9358 125.79 85.3358 125.75 85.8458 cv
128.95 85.8458 li
f
136 86.1058 mo
136 86.5458 li
131.87 86.5458 li
131.91 87.1658 132.09 87.6458 132.43 87.9658 cv
132.76 88.2858 133.22 88.4458 133.82 88.4458 cv
134.16 88.4458 134.5 88.4058 134.82 88.3258 cv
135.14 88.2458 135.47 88.1158 135.79 87.9358 cv
135.79 88.7858 li
135.47 88.9258 135.14 89.0358 134.8 89.0958 cv
134.46 89.1558 134.11 89.1958 133.77 89.1958 cv
132.89 89.1958 132.2 88.9458 131.69 88.4458 cv
131.18 87.9458 130.93 87.2558 130.93 86.3858 cv
130.93 85.4958 131.17 84.7858 131.65 84.2558 cv
132.13 83.7358 132.79 83.4658 133.61 83.4658 cv
134.35 83.4658 134.93 83.7058 135.36 84.1758 cv
135.78 84.6558 136 85.2958 136 86.1058 cv
135.1 85.8458 mo
135.09 85.3558 134.95 84.9658 134.69 84.6658 cv
134.42 84.3758 134.06 84.2258 133.62 84.2258 cv
133.12 84.2258 132.72 84.3758 132.42 84.6558 cv
132.12 84.9358 131.94 85.3358 131.9 85.8458 cv
135.1 85.8458 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
